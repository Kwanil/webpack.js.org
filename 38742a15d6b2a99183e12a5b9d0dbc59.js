!function(n,s){if("object"==typeof exports&&"object"==typeof module)module.exports=s();else if("function"==typeof define&&define.amd)define([],s);else{var a=s();for(var e in a)("object"==typeof exports?exports:n)[e]=a[e]}}("undefined"!=typeof self?self:this,function(){return function(n){function s(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}var a={};return s.m=n,s.c=a,s.d=function(n,a,e){s.o(n,a)||Object.defineProperty(n,a,{configurable:!1,enumerable:!0,get:e})},s.n=function(n){var a=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(a,"a",a),a},s.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},s.p="/",s(s.s=49)}([function(n,s,a){(function(s){!function(s,e){n.exports=e(a(13),a(18))}(0,function(n,a){function e(){return null}function t(n){var s=n.nodeName,a=n.attributes;n.attributes={},s.defaultProps&&w(n.attributes,s.defaultProps),a&&w(n.attributes,a)}function o(n,s){var a,e,t;if(s){for(t in s)if(a=U.test(t))break;if(a){e=n.attributes={};for(t in s)s.hasOwnProperty(t)&&(e[U.test(t)?t.replace(/([A-Z0-9])/,"-$1").toLowerCase():t]=s[t])}}}function p(n,s,e){var t=s&&s._preactCompatRendered&&s._preactCompatRendered.base;t&&t.parentNode!==s&&(t=null),!t&&s&&(t=s.firstElementChild);for(var o=s.childNodes.length;o--;)s.childNodes[o]!==t&&s.removeChild(s.childNodes[o]);var p=a.render(n,s,t);return s&&(s._preactCompatRendered=p&&(p._component||{base:p})),"function"==typeof e&&e(),p&&p._component||p}function c(n,s,e,t){var o=a.h(V,{context:n.context},s),c=p(o,e),i=c._component||c.base;return t&&t.call(i,c),i}function i(n){var s=n._preactCompatRendered&&n._preactCompatRendered.base;return!(!s||s.parentNode!==n||(a.render(a.h(e),n,s),0))}function l(n){return h.bind(null,n)}function r(n,s){for(var a=s||0;a<n.length;a++){var e=n[a];Array.isArray(e)?r(e):e&&"object"==typeof e&&!g(e)&&(e.props&&e.type||e.attributes&&e.nodeName||e.children)&&(n[a]=h(e.type||e.nodeName,e.props||e.attributes,e.children))}}function u(n){return"function"==typeof n&&!(n.prototype&&n.prototype.render)}function d(n){return T({displayName:n.displayName||n.name,render:function(){return n(this.props,this.context)}})}function k(n){var s=n[z];return s?!0===s?n:s:(s=d(n),Object.defineProperty(s,z,{configurable:!0,value:!0}),s.displayName=n.displayName,s.propTypes=n.propTypes,s.defaultProps=n.defaultProps,Object.defineProperty(n,z,{configurable:!0,value:s}),s)}function h(){for(var n=[],s=arguments.length;s--;)n[s]=arguments[s];return r(n,2),m(a.h.apply(void 0,n))}function m(n){n.preactCompatNormalized=!0,y(n),u(n.nodeName)&&(n.nodeName=k(n.nodeName));var s=n.attributes.ref,a=s&&typeof s;return!G||"string"!==a&&"number"!==a||(n.attributes.ref=f(s,G)),v(n),n}function b(n,s){for(var e=[],t=arguments.length-2;t-- >0;)e[t]=arguments[t+2];if(!g(n))return n;var o=n.attributes||n.props,p=a.h(n.nodeName||n.type,o,n.children||o&&o.children),c=[p,s];return e&&e.length?c.push(e):s&&s.children&&c.push(s.children),m(a.cloneElement.apply(void 0,c))}function g(n){return n&&(n instanceof F||n.$$typeof===L)}function f(n,s){return s._refProxies[n]||(s._refProxies[n]=function(a){s&&s.refs&&(s.refs[n]=a,null===a&&(delete s._refProxies[n],s=null))})}function v(n){var s=n.nodeName,a=n.attributes;if(a&&"string"==typeof s){var e={};for(var t in a)e[t.toLowerCase()]=t;if(e.ondoubleclick&&(a.ondblclick=a[e.ondoubleclick],delete a[e.ondoubleclick]),e.onchange&&("textarea"===s||"input"===s.toLowerCase()&&!/^fil|che|rad/i.test(a.type))){var o=e.oninput||"oninput";a[o]||(a[o]=E([a[o],a[e.onchange]]),delete a[e.onchange])}}}function y(n){var s=n.attributes||(n.attributes={});Z.enumerable="className"in s,s.className&&(s.class=s.className),Object.defineProperty(s,"className",Z)}function w(n,s){for(var a=arguments,e=1,t=void 0;e<arguments.length;e++)if(t=a[e])for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);return n}function x(n,s){for(var a in n)if(!(a in s))return!0;for(var e in s)if(n[e]!==s[e])return!0;return!1}function j(n){return n&&n.base||n}function q(){}function T(n){function s(n,s){C(this),N.call(this,n,s,B),M.call(this,n,s)}return n=w({constructor:s},n),n.mixins&&_(n,S(n.mixins)),n.statics&&w(s,n.statics),n.propTypes&&(s.propTypes=n.propTypes),n.defaultProps&&(s.defaultProps=n.defaultProps),n.getDefaultProps&&(s.defaultProps=n.getDefaultProps()),q.prototype=N.prototype,s.prototype=w(new q,n),s.displayName=n.displayName||"Component",s}function S(n){for(var s={},a=0;a<n.length;a++){var e=n[a];for(var t in e)e.hasOwnProperty(t)&&"function"==typeof e[t]&&(s[t]||(s[t]=[])).push(e[t])}return s}function _(n,s){for(var a in s)s.hasOwnProperty(a)&&(n[a]=E(s[a].concat(n[a]||Y),"getDefaultProps"===a||"getInitialState"===a||"getChildContext"===a))}function C(n){for(var s in n){var a=n[s];"function"!=typeof a||a.__bound||W.hasOwnProperty(s)||((n[s]=a.bind(n)).__bound=!0)}}function P(n,s,a){if("string"==typeof s&&(s=n.constructor.prototype[s]),"function"==typeof s)return s.apply(n,a)}function E(n,s){return function(){for(var a,e=arguments,t=this,o=0;o<n.length;o++){var p=P(t,n[o],e);if(s&&null!=p){a||(a={});for(var c in p)p.hasOwnProperty(c)&&(a[c]=p[c])}else void 0!==p&&(a=p)}return a}}function M(n,s){I.call(this,n,s),this.componentWillReceiveProps=E([I,this.componentWillReceiveProps||"componentWillReceiveProps"]),this.render=E([I,A,this.render||"render",D])}function I(s,a){if(s){var e=s.children;if(e&&Array.isArray(e)&&1===e.length&&("string"==typeof e[0]||"function"==typeof e[0]||e[0]instanceof F)&&(s.children=e[0],s.children&&"object"==typeof s.children&&(s.children.length=1,s.children[0]=s.children)),H){var t="function"==typeof this?this:this.constructor,o=this.propTypes||t.propTypes,p=this.displayName||t.name;o&&n.checkPropTypes(o,s,"prop",p)}}}function A(n){G=this}function D(){G===this&&(G=null)}function N(n,s,e){a.Component.call(this,n,s),this.state=this.getInitialState?this.getInitialState():{},this.refs={},this._refProxies={},e!==B&&M.call(this,n,s)}function R(n,s){N.call(this,n,s)}n="default"in n?n.default:n;var O="a abbr address area article aside audio b base bdi bdo big blockquote body br button canvas caption cite code col colgroup data datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins kbd keygen label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr circle clipPath defs ellipse g image line linearGradient mask path pattern polygon polyline radialGradient rect stop svg text tspan".split(" "),L="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,z="undefined"!=typeof Symbol?Symbol.for("__preactCompatWrapper"):"__preactCompatWrapper",W={constructor:1,render:1,shouldComponentUpdate:1,componentWillReceiveProps:1,componentWillUpdate:1,componentDidUpdate:1,componentWillMount:1,componentDidMount:1,componentWillUnmount:1,componentDidUnmount:1},U=/^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[A-Z]/,B={},H=void 0===s||!s.env||"production"!==s.env.NODE_ENV,F=a.h("a",null).constructor;F.prototype.$$typeof=L,F.prototype.preactCompatUpgraded=!1,F.prototype.preactCompatNormalized=!1,Object.defineProperty(F.prototype,"type",{get:function(){return this.nodeName},set:function(n){this.nodeName=n},configurable:!0}),Object.defineProperty(F.prototype,"props",{get:function(){return this.attributes},set:function(n){this.attributes=n},configurable:!0});var J=a.options.event;a.options.event=function(n){return J&&(n=J(n)),n.persist=Object,n.nativeEvent=n,n};var $=a.options.vnode;a.options.vnode=function(n){if(!n.preactCompatUpgraded){n.preactCompatUpgraded=!0;var s=n.nodeName,a=n.attributes=w({},n.attributes);"function"==typeof s?(!0===s[z]||s.prototype&&"isReactComponent"in s.prototype)&&(n.children&&""===String(n.children)&&(n.children=void 0),n.children&&(a.children=n.children),n.preactCompatNormalized||m(n),t(n)):(n.children&&""===String(n.children)&&(n.children=void 0),n.children&&(a.children=n.children),a.defaultValue&&(a.value||0===a.value||(a.value=a.defaultValue),delete a.defaultValue),o(n,a))}$&&$(n)};var V=function(){};V.prototype.getChildContext=function(){return this.props.context},V.prototype.render=function(n){return n.children[0]};for(var G,Y=[],K={map:function(n,s,a){return null==n?null:(n=K.toArray(n),a&&a!==n&&(s=s.bind(a)),n.map(s))},forEach:function(n,s,a){if(null==n)return null;n=K.toArray(n),a&&a!==n&&(s=s.bind(a)),n.forEach(s)},count:function(n){return n&&n.length||0},only:function(n){if(n=K.toArray(n),1!==n.length)throw new Error("Children.only() expects only one child.");return n[0]},toArray:function(n){return null==n?[]:Y.concat(n)}},Q={},X=O.length;X--;)Q[O[X]]=l(O[X]);var Z={configurable:!0,get:function(){return this.class},set:function(n){this.class=n}};return w(N.prototype=new a.Component,{constructor:N,isReactComponent:{},replaceState:function(n,s){var a=this;this.setState(n,s);for(var e in a.state)e in n||delete a.state[e]},getDOMNode:function(){return this.base},isMounted:function(){return!!this.base}}),q.prototype=N.prototype,R.prototype=new q,R.prototype.isPureReactComponent=!0,R.prototype.shouldComponentUpdate=function(n,s){return x(this.props,n)||x(this.state,s)},{version:"15.1.0",DOM:Q,PropTypes:n,Children:K,render:p,createClass:T,createFactory:l,createElement:h,cloneElement:b,isValidElement:g,findDOMNode:j,unmountComponentAtNode:i,Component:N,PureComponent:R,unstable_renderSubtreeIntoContainer:c,__spread:w}})}).call(s,a(1))},function(n,s){function a(){throw new Error("setTimeout has not been defined")}function e(){throw new Error("clearTimeout has not been defined")}function t(n){if(r===setTimeout)return setTimeout(n,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(n,0);try{return r(n,0)}catch(s){try{return r.call(null,n,0)}catch(s){return r.call(this,n,0)}}}function o(n){if(u===clearTimeout)return clearTimeout(n);if((u===e||!u)&&clearTimeout)return u=clearTimeout,clearTimeout(n);try{return u(n)}catch(s){try{return u.call(null,n)}catch(s){return u.call(this,n)}}}function p(){m&&k&&(m=!1,k.length?h=k.concat(h):b=-1,h.length&&c())}function c(){if(!m){var n=t(p);m=!0;for(var s=h.length;s;){for(k=h,h=[];++b<s;)k&&k[b].run();b=-1,s=h.length}k=null,m=!1,o(n)}}function i(n,s){this.fun=n,this.array=s}function l(){}var r,u,d=n.exports={};!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(n){r=a}try{u="function"==typeof clearTimeout?clearTimeout:e}catch(n){u=e}}();var k,h=[],m=!1,b=-1;d.nextTick=function(n){var s=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)s[a-1]=arguments[a];h.push(new i(n,s)),1!==h.length||m||t(c)},i.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=l,d.addListener=l,d.once=l,d.off=l,d.removeListener=l,d.removeAllListeners=l,d.emit=l,d.prependListener=l,d.prependOnceListener=l,d.listeners=function(n){return[]},d.binding=function(n){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(n){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(n,s,a){"use strict";function e(n){return function(){return n}}var t=function(){};t.thatReturns=e,t.thatReturnsFalse=e(!1),t.thatReturnsTrue=e(!0),t.thatReturnsNull=e(null),t.thatReturnsThis=function(){return this},t.thatReturnsArgument=function(n){return n},n.exports=t},function(n,s,a){"use strict";(function(s){function a(n,s,a,t,o,p,c,i){if(e(s),!n){var l;if(void 0===s)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var r=[a,t,o,p,c,i],u=0;l=new Error(s.replace(/%s/g,function(){return r[u++]})),l.name="Invariant Violation"}throw l.framesToPop=1,l}}var e=function(n){};"production"!==s.env.NODE_ENV&&(e=function(n){if(void 0===n)throw new Error("invariant requires an error message argument")}),n.exports=a}).call(s,a(1))},function(n,s,a){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){var a={};for(var e in n)s.indexOf(e)>=0||Object.prototype.hasOwnProperty.call(n,e)&&(a[e]=n[e]);return a}Object.defineProperty(s,"__esModule",{value:!0});var o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},p=a(0),c=e(p),i=a(21),l=e(i);s.default=function(n){var s=n.to,a=t(n,["to"]);return(0,l.default)(s,"http")||(0,l.default)(s,"//")?c.default.createElement("a",o({href:s,target:"_blank"},a)):c.default.createElement("a",o({href:s},a))}},function(n,s,a){var e=a(23),t=e.Symbol;n.exports=t},function(n,s,a){"use strict";(function(s){var e=a(2),t=e;if("production"!==s.env.NODE_ENV){var o=function(n){for(var s=arguments.length,a=Array(s>1?s-1:0),e=1;e<s;e++)a[e-1]=arguments[e];var t=0,o="Warning: "+n.replace(/%s/g,function(){return a[t++]});"undefined"!=typeof console&&console.error(o);try{throw new Error(o)}catch(n){}};t=function(n,s){if(void 0===s)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==s.indexOf("Failed Composite propType: ")&&!n){for(var a=arguments.length,e=Array(a>2?a-2:0),t=2;t<a;t++)e[t-2]=arguments[t];o.apply(void 0,[s].concat(e))}}}n.exports=t}).call(s,a(1))},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a(0),t=function(n){return n&&n.__esModule?n:{default:n}}(e);s.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=n.className,a=void 0===s?"":s;return t.default.createElement("div",{className:"container "+a},n.children)}},function(n,s,a){function e(n){if("string"==typeof n)return n;if(p(n))return o(n,e)+"";if(c(n))return r?r.call(n):"";var s=n+"";return"0"==s&&1/n==-i?"-0":s}var t=a(6),o=a(25),p=a(26),c=a(11),i=1/0,l=t?t.prototype:void 0,r=l?l.toString:void 0;n.exports=e},function(n,s){var a;a=function(){return this}();try{a=a||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(a=window)}n.exports=a},function(n,s,a){function e(n){return"symbol"==typeof n||o(n)&&t(n)==p}var t=a(27),o=a(30),p="[object Symbol]";n.exports=e},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),l=e(i),r=a(8),u=e(r),d=a(19),k=e(d),h=!1!==(0,k.default)(),m=function(n){function s(){return t(this,s),o(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return p(s,n),c(s,[{key:"render",value:function(){var n=this._dismissed?"notification-bar--dismissed":"";return l.default.createElement("div",{className:"notification-bar "+n},l.default.createElement(u.default,{className:"notification-bar__inner"},l.default.createElement("p",null,"Sponsor webpack and get apparel from the ",l.default.createElement("a",{href:"https://webpack.threadless.com"},"official shop"),"  or get stickers ",l.default.createElement("a",{href:"http://www.unixstickers.com/tag/webpack"},"here"),"! All proceeds go to our ",l.default.createElement("a",{href:"https://opencollective.com/webpack"},"open collective"),"!"),h?l.default.createElement("button",{className:"notification-bar__close icon-cross",onClick:this._close.bind(this)}):null))}},{key:"_close",value:function(n){h&&localStorage.setItem("notification-dismissed","2"),this.forceUpdate()}},{key:"_dismissed",get:function(){return!!h&&"2"===localStorage.getItem("notification-dismissed")}}]),s}(l.default.Component);s.default=m},function(n,s,a){(function(s){if("production"!==s.env.NODE_ENV){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,t=function(n){return"object"==typeof n&&null!==n&&n.$$typeof===e};n.exports=a(14)(t,!0)}else n.exports=a(17)()}).call(s,a(1))},function(n,s,a){"use strict";(function(s){var e=a(2),t=a(3),o=a(7),p=a(15),c=a(4),i=a(16);n.exports=function(n,a){function l(n){var s=n&&(_&&n[_]||n[C]);if("function"==typeof s)return s}function r(n,s){return n===s?0!==n||1/n==1/s:n!==n&&s!==s}function u(n){this.message=n,this.stack=""}function d(n){function e(e,l,r,d,k,h,m){if(d=d||P,h=h||r,m!==c)if(a)t(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!==s.env.NODE_ENV&&"undefined"!=typeof console){var b=d+":"+r;!p[b]&&i<3&&(o(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",h,d),p[b]=!0,i++)}return null==l[r]?e?new u(null===l[r]?"The "+k+" `"+h+"` is marked as required in `"+d+"`, but its value is `null`.":"The "+k+" `"+h+"` is marked as required in `"+d+"`, but its value is `undefined`."):null:n(l,r,d,k,h)}if("production"!==s.env.NODE_ENV)var p={},i=0;var l=e.bind(null,!1);return l.isRequired=e.bind(null,!0),l}function k(n){function s(s,a,e,t,o,p){var c=s[a];if(j(c)!==n)return new u("Invalid "+t+" `"+o+"` of type `"+q(c)+"` supplied to `"+e+"`, expected `"+n+"`.");return null}return d(s)}function h(n){function s(s,a,e,t,o){if("function"!=typeof n)return new u("Property `"+o+"` of component `"+e+"` has invalid PropType notation inside arrayOf.");var p=s[a];if(!Array.isArray(p)){return new u("Invalid "+t+" `"+o+"` of type `"+j(p)+"` supplied to `"+e+"`, expected an array.")}for(var i=0;i<p.length;i++){var l=n(p,i,e,t,o+"["+i+"]",c);if(l instanceof Error)return l}return null}return d(s)}function m(n){function s(s,a,e,t,o){if(!(s[a]instanceof n)){var p=n.name||P;return new u("Invalid "+t+" `"+o+"` of type `"+S(s[a])+"` supplied to `"+e+"`, expected instance of `"+p+"`.")}return null}return d(s)}function b(n){function a(s,a,e,t,o){for(var p=s[a],c=0;c<n.length;c++)if(r(p,n[c]))return null;return new u("Invalid "+t+" `"+o+"` of value `"+p+"` supplied to `"+e+"`, expected one of "+JSON.stringify(n)+".")}return Array.isArray(n)?d(a):("production"!==s.env.NODE_ENV&&o(!1,"Invalid argument supplied to oneOf, expected an instance of array."),e.thatReturnsNull)}function g(n){function s(s,a,e,t,o){if("function"!=typeof n)return new u("Property `"+o+"` of component `"+e+"` has invalid PropType notation inside objectOf.");var p=s[a],i=j(p);if("object"!==i)return new u("Invalid "+t+" `"+o+"` of type `"+i+"` supplied to `"+e+"`, expected an object.");for(var l in p)if(p.hasOwnProperty(l)){var r=n(p,l,e,t,o+"."+l,c);if(r instanceof Error)return r}return null}return d(s)}function f(n){function a(s,a,e,t,o){for(var p=0;p<n.length;p++){if(null==(0,n[p])(s,a,e,t,o,c))return null}return new u("Invalid "+t+" `"+o+"` supplied to `"+e+"`.")}if(!Array.isArray(n))return"production"!==s.env.NODE_ENV&&o(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),e.thatReturnsNull;for(var t=0;t<n.length;t++){var p=n[t];if("function"!=typeof p)return o(!1,"Invalid argument supplied to oneOfType. Expected an array of check functions, but received %s at index %s.",T(p),t),e.thatReturnsNull}return d(a)}function v(n){function s(s,a,e,t,o){var p=s[a],i=j(p);if("object"!==i)return new u("Invalid "+t+" `"+o+"` of type `"+i+"` supplied to `"+e+"`, expected `object`.");for(var l in n){var r=n[l];if(r){var d=r(p,l,e,t,o+"."+l,c);if(d)return d}}return null}return d(s)}function y(n){function s(s,a,e,t,o){var i=s[a],l=j(i);if("object"!==l)return new u("Invalid "+t+" `"+o+"` of type `"+l+"` supplied to `"+e+"`, expected `object`.");var r=p({},s[a],n);for(var d in r){var k=n[d];if(!k)return new u("Invalid "+t+" `"+o+"` key `"+d+"` supplied to `"+e+"`.\nBad object: "+JSON.stringify(s[a],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(n),null,"  "));var h=k(i,d,e,t,o+"."+d,c);if(h)return h}return null}return d(s)}function w(s){switch(typeof s){case"number":case"string":case"undefined":return!0;case"boolean":return!s;case"object":if(Array.isArray(s))return s.every(w);if(null===s||n(s))return!0;var a=l(s);if(!a)return!1;var e,t=a.call(s);if(a!==s.entries){for(;!(e=t.next()).done;)if(!w(e.value))return!1}else for(;!(e=t.next()).done;){var o=e.value;if(o&&!w(o[1]))return!1}return!0;default:return!1}}function x(n,s){return"symbol"===n||("Symbol"===s["@@toStringTag"]||"function"==typeof Symbol&&s instanceof Symbol)}function j(n){var s=typeof n;return Array.isArray(n)?"array":n instanceof RegExp?"object":x(s,n)?"symbol":s}function q(n){if(void 0===n||null===n)return""+n;var s=j(n);if("object"===s){if(n instanceof Date)return"date";if(n instanceof RegExp)return"regexp"}return s}function T(n){var s=q(n);switch(s){case"array":case"object":return"an "+s;case"boolean":case"date":case"regexp":return"a "+s;default:return s}}function S(n){return n.constructor&&n.constructor.name?n.constructor.name:P}var _="function"==typeof Symbol&&Symbol.iterator,C="@@iterator",P="<<anonymous>>",E={array:k("array"),bool:k("boolean"),func:k("function"),number:k("number"),object:k("object"),string:k("string"),symbol:k("symbol"),any:function(){return d(e.thatReturnsNull)}(),arrayOf:h,element:function(){function s(s,a,e,t,o){var p=s[a];if(!n(p)){return new u("Invalid "+t+" `"+o+"` of type `"+j(p)+"` supplied to `"+e+"`, expected a single ReactElement.")}return null}return d(s)}(),instanceOf:m,node:function(){function n(n,s,a,e,t){return w(n[s])?null:new u("Invalid "+e+" `"+t+"` supplied to `"+a+"`, expected a ReactNode.")}return d(n)}(),objectOf:g,oneOf:b,oneOfType:f,shape:v,exact:y};return u.prototype=Error.prototype,E.checkPropTypes=i,E.PropTypes=E,E}}).call(s,a(1))},function(n,s,a){"use strict";function e(n){if(null===n||void 0===n)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(n)}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var t=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;n.exports=function(){try{if(!Object.assign)return!1;var n=new String("abc");if(n[5]="de","5"===Object.getOwnPropertyNames(n)[0])return!1;for(var s={},a=0;a<10;a++)s["_"+String.fromCharCode(a)]=a;if("0123456789"!==Object.getOwnPropertyNames(s).map(function(n){return s[n]}).join(""))return!1;var e={};return"abcdefghijklmnopqrst".split("").forEach(function(n){e[n]=n}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},e)).join("")}catch(n){return!1}}()?Object.assign:function(n,s){for(var a,c,i=e(n),l=1;l<arguments.length;l++){a=Object(arguments[l]);for(var r in a)o.call(a,r)&&(i[r]=a[r]);if(t){c=t(a);for(var u=0;u<c.length;u++)p.call(a,c[u])&&(i[c[u]]=a[c[u]])}}return i}},function(n,s,a){"use strict";(function(s){function e(n,a,e,i,l){if("production"!==s.env.NODE_ENV)for(var r in n)if(n.hasOwnProperty(r)){var u;try{t("function"==typeof n[r],"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",i||"React class",e,r,typeof n[r]),u=n[r](a,r,i,e,null,p)}catch(n){u=n}if(o(!u||u instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",i||"React class",e,r,typeof u),u instanceof Error&&!(u.message in c)){c[u.message]=!0;var d=l?l():"";o(!1,"Failed %s type: %s%s",e,u.message,null!=d?d:"")}}}if("production"!==s.env.NODE_ENV)var t=a(3),o=a(7),p=a(4),c={};n.exports=e}).call(s,a(1))},function(n,s,a){"use strict";var e=a(2),t=a(3),o=a(4);n.exports=function(){function n(n,s,a,e,p,c){c!==o&&t(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function s(){return n}n.isRequired=n;var a={array:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s};return a.checkPropTypes=e,a.PropTypes=a,a}},function(n,s,a){"use strict";function e(){}function t(n,s){var a,t,o,p,c=N;for(p=arguments.length;p-- >2;)D.push(arguments[p]);for(s&&null!=s.children&&(D.length||D.push(s.children),delete s.children);D.length;)if((t=D.pop())&&void 0!==t.pop)for(p=t.length;p--;)D.push(t[p]);else"boolean"==typeof t&&(t=null),(o="function"!=typeof n)&&(null==t?t="":"number"==typeof t?t=String(t):"string"!=typeof t&&(o=!1)),o&&a?c[c.length-1]+=t:c===N?c=[t]:c.push(t),a=o;var i=new e;return i.nodeName=n,i.children=c,i.attributes=null==s?void 0:s,i.key=null==s?void 0:s.key,void 0!==A.vnode&&A.vnode(i),i}function o(n,s){for(var a in s)n[a]=s[a];return n}function p(n,s){return t(n.nodeName,o(o({},n.attributes),s),arguments.length>2?[].slice.call(arguments,2):n.children)}function c(n){!n._dirty&&(n._dirty=!0)&&1==L.push(n)&&(A.debounceRendering||R)(i)}function i(){var n,s=L;for(L=[];n=s.pop();)n._dirty&&C(n)}function l(n,s,a){return"string"==typeof s||"number"==typeof s?void 0!==n.splitText:"string"==typeof s.nodeName?!n._componentConstructor&&r(n,s.nodeName):a||n._componentConstructor===s.nodeName}function r(n,s){return n.normalizedNodeName===s||n.nodeName.toLowerCase()===s.toLowerCase()}function u(n){var s=o({},n.attributes);s.children=n.children;var a=n.nodeName.defaultProps;if(void 0!==a)for(var e in a)void 0===s[e]&&(s[e]=a[e]);return s}function d(n,s){var a=s?document.createElementNS("http://www.w3.org/2000/svg",n):document.createElement(n);return a.normalizedNodeName=n,a}function k(n){var s=n.parentNode;s&&s.removeChild(n)}function h(n,s,a,e,t){if("className"===s&&(s="class"),"key"===s);else if("ref"===s)a&&a(null),e&&e(n);else if("class"!==s||t)if("style"===s){if(e&&"string"!=typeof e&&"string"!=typeof a||(n.style.cssText=e||""),e&&"object"==typeof e){if("string"!=typeof a)for(var o in a)o in e||(n.style[o]="");for(var o in e)n.style[o]="number"==typeof e[o]&&!1===O.test(o)?e[o]+"px":e[o]}}else if("dangerouslySetInnerHTML"===s)e&&(n.innerHTML=e.__html||"");else if("o"==s[0]&&"n"==s[1]){var p=s!==(s=s.replace(/Capture$/,""));s=s.toLowerCase().substring(2),e?a||n.addEventListener(s,b,p):n.removeEventListener(s,b,p),(n._listeners||(n._listeners={}))[s]=e}else if("list"!==s&&"type"!==s&&!t&&s in n)m(n,s,null==e?"":e),null!=e&&!1!==e||n.removeAttribute(s);else{var c=t&&s!==(s=s.replace(/^xlink\:?/,""));null==e||!1===e?c?n.removeAttributeNS("http://www.w3.org/1999/xlink",s.toLowerCase()):n.removeAttribute(s):"function"!=typeof e&&(c?n.setAttributeNS("http://www.w3.org/1999/xlink",s.toLowerCase(),e):n.setAttribute(s,e))}else n.className=e||""}function m(n,s,a){try{n[s]=a}catch(n){}}function b(n){return this._listeners[n.type](A.event&&A.event(n)||n)}function g(){for(var n;n=z.pop();)A.afterMount&&A.afterMount(n),n.componentDidMount&&n.componentDidMount()}function f(n,s,a,e,t,o){W++||(U=null!=t&&void 0!==t.ownerSVGElement,B=null!=n&&!("__preactattr_"in n));var p=v(n,s,a,e,o);return t&&p.parentNode!==t&&t.appendChild(p),--W||(B=!1,o||g()),p}function v(n,s,a,e,t){var o=n,p=U;if(null!=s&&"boolean"!=typeof s||(s=""),"string"==typeof s||"number"==typeof s)return n&&void 0!==n.splitText&&n.parentNode&&(!n._component||t)?n.nodeValue!=s&&(n.nodeValue=s):(o=document.createTextNode(s),n&&(n.parentNode&&n.parentNode.replaceChild(o,n),w(n,!0))),o.__preactattr_=!0,o;var c=s.nodeName;if("function"==typeof c)return P(n,s,a,e);if(U="svg"===c||"foreignObject"!==c&&U,c=String(c),(!n||!r(n,c))&&(o=d(c,U),n)){for(;n.firstChild;)o.appendChild(n.firstChild);n.parentNode&&n.parentNode.replaceChild(o,n),w(n,!0)}var i=o.firstChild,l=o.__preactattr_,u=s.children;if(null==l){l=o.__preactattr_={};for(var k=o.attributes,h=k.length;h--;)l[k[h].name]=k[h].value}return!B&&u&&1===u.length&&"string"==typeof u[0]&&null!=i&&void 0!==i.splitText&&null==i.nextSibling?i.nodeValue!=u[0]&&(i.nodeValue=u[0]):(u&&u.length||null!=i)&&y(o,u,a,e,B||null!=l.dangerouslySetInnerHTML),j(o,s.attributes,l),U=p,o}function y(n,s,a,e,t){var o,p,c,i,r,u=n.childNodes,d=[],h={},m=0,b=0,g=u.length,f=0,y=s?s.length:0;if(0!==g)for(var x=0;x<g;x++){var j=u[x],q=j.__preactattr_,T=y&&q?j._component?j._component.__key:q.key:null;null!=T?(m++,h[T]=j):(q||(void 0!==j.splitText?!t||j.nodeValue.trim():t))&&(d[f++]=j)}if(0!==y)for(var x=0;x<y;x++){i=s[x],r=null;var T=i.key;if(null!=T)m&&void 0!==h[T]&&(r=h[T],h[T]=void 0,m--);else if(!r&&b<f)for(o=b;o<f;o++)if(void 0!==d[o]&&l(p=d[o],i,t)){r=p,d[o]=void 0,o===f-1&&f--,o===b&&b++;break}r=v(r,i,a,e),c=u[x],r&&r!==n&&r!==c&&(null==c?n.appendChild(r):r===c.nextSibling?k(c):n.insertBefore(r,c))}if(m)for(var x in h)void 0!==h[x]&&w(h[x],!1);for(;b<=f;)void 0!==(r=d[f--])&&w(r,!1)}function w(n,s){var a=n._component;a?E(a):(null!=n.__preactattr_&&n.__preactattr_.ref&&n.__preactattr_.ref(null),!1!==s&&null!=n.__preactattr_||k(n),x(n))}function x(n){for(n=n.lastChild;n;){var s=n.previousSibling;w(n,!0),n=s}}function j(n,s,a){var e;for(e in a)s&&null!=s[e]||null==a[e]||h(n,e,a[e],a[e]=void 0,U);for(e in s)"children"===e||"innerHTML"===e||e in a&&s[e]===("value"===e||"checked"===e?n[e]:a[e])||h(n,e,a[e],a[e]=s[e],U)}function q(n){var s=n.constructor.name;(H[s]||(H[s]=[])).push(n)}function T(n,s,a){var e,t=H[n.name];if(n.prototype&&n.prototype.render?(e=new n(s,a),M.call(e,s,a)):(e=new M(s,a),e.constructor=n,e.render=S),t)for(var o=t.length;o--;)if(t[o].constructor===n){e.nextBase=t[o].nextBase,t.splice(o,1);break}return e}function S(n,s,a){return this.constructor(n,a)}function _(n,s,a,e,t){n._disable||(n._disable=!0,(n.__ref=s.ref)&&delete s.ref,(n.__key=s.key)&&delete s.key,!n.base||t?n.componentWillMount&&n.componentWillMount():n.componentWillReceiveProps&&n.componentWillReceiveProps(s,e),e&&e!==n.context&&(n.prevContext||(n.prevContext=n.context),n.context=e),n.prevProps||(n.prevProps=n.props),n.props=s,n._disable=!1,0!==a&&(1!==a&&!1===A.syncComponentUpdates&&n.base?c(n):C(n,1,t)),n.__ref&&n.__ref(n))}function C(n,s,a,e){if(!n._disable){var t,p,c,i=n.props,l=n.state,r=n.context,d=n.prevProps||i,k=n.prevState||l,h=n.prevContext||r,m=n.base,b=n.nextBase,v=m||b,y=n._component,x=!1;if(m&&(n.props=d,n.state=k,n.context=h,2!==s&&n.shouldComponentUpdate&&!1===n.shouldComponentUpdate(i,l,r)?x=!0:n.componentWillUpdate&&n.componentWillUpdate(i,l,r),n.props=i,n.state=l,n.context=r),n.prevProps=n.prevState=n.prevContext=n.nextBase=null,n._dirty=!1,!x){t=n.render(i,l,r),n.getChildContext&&(r=o(o({},r),n.getChildContext()));var j,q,S=t&&t.nodeName;if("function"==typeof S){var P=u(t);p=y,p&&p.constructor===S&&P.key==p.__key?_(p,P,1,r,!1):(j=p,n._component=p=T(S,P,r),p.nextBase=p.nextBase||b,p._parentComponent=n,_(p,P,0,r,!1),C(p,1,a,!0)),q=p.base}else c=v,j=y,j&&(c=n._component=null),(v||1===s)&&(c&&(c._component=null),q=f(c,t,r,a||!m,v&&v.parentNode,!0));if(v&&q!==v&&p!==y){var M=v.parentNode;M&&q!==M&&(M.replaceChild(q,v),j||(v._component=null,w(v,!1)))}if(j&&E(j),n.base=q,q&&!e){for(var I=n,D=n;D=D._parentComponent;)(I=D).base=q;q._component=I,q._componentConstructor=I.constructor}}if(!m||a?z.unshift(n):x||(n.componentDidUpdate&&n.componentDidUpdate(d,k,h),A.afterUpdate&&A.afterUpdate(n)),null!=n._renderCallbacks)for(;n._renderCallbacks.length;)n._renderCallbacks.pop().call(n);W||e||g()}}function P(n,s,a,e){for(var t=n&&n._component,o=t,p=n,c=t&&n._componentConstructor===s.nodeName,i=c,l=u(s);t&&!i&&(t=t._parentComponent);)i=t.constructor===s.nodeName;return t&&i&&(!e||t._component)?(_(t,l,3,a,e),n=t.base):(o&&!c&&(E(o),n=p=null),t=T(s.nodeName,l,a),n&&!t.nextBase&&(t.nextBase=n,p=null),_(t,l,1,a,e),n=t.base,p&&n!==p&&(p._component=null,w(p,!1))),n}function E(n){A.beforeUnmount&&A.beforeUnmount(n);var s=n.base;n._disable=!0,n.componentWillUnmount&&n.componentWillUnmount(),n.base=null;var a=n._component;a?E(a):s&&(s.__preactattr_&&s.__preactattr_.ref&&s.__preactattr_.ref(null),n.nextBase=s,k(s),q(n),x(s)),n.__ref&&n.__ref(null)}function M(n,s){this._dirty=!0,this.context=s,this.props=n,this.state=this.state||{}}function I(n,s,a){return f(a,n,{},!1,s,!1)}Object.defineProperty(s,"__esModule",{value:!0}),a.d(s,"h",function(){return t}),a.d(s,"createElement",function(){return t}),a.d(s,"cloneElement",function(){return p}),a.d(s,"Component",function(){return M}),a.d(s,"render",function(){return I}),a.d(s,"rerender",function(){return i}),a.d(s,"options",function(){return A});var A={},D=[],N=[],R="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout,O=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,L=[],z=[],W=0,U=!1,B=!1,H={};o(M.prototype,{setState:function(n,s){var a=this.state;this.prevState||(this.prevState=o({},a)),o(a,"function"==typeof n?n(a,this.props):n),s&&(this._renderCallbacks=this._renderCallbacks||[]).push(s),c(this)},forceUpdate:function(n){n&&(this._renderCallbacks=this._renderCallbacks||[]).push(n),C(this,2)},render:function(){}});var F={h:t,createElement:t,cloneElement:p,Component:M,render:I,rerender:i,options:A};s.default=F},function(n,s){n.exports=function(){const n="localStorageTest";try{localStorage.setItem(n,n),localStorage.removeItem(n)}catch(n){return!1}}},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),l=e(i),r=a(5),u=e(r),d=a(8),k=e(d),h=a(36),m=e(h),b=a(38),g=e(b),f=a(40),v=e(f),y=function(n){function s(){return t(this,s),o(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return p(s,n),c(s,[{key:"render",value:function(){var n=this;this.props.pageUrl;return l.default.createElement("header",{className:"navigation"},l.default.createElement(k.default,{className:"navigation__inner"},l.default.createElement("div",{className:"navigation__mobile",onClick:this._toggleSidebar},l.default.createElement("i",{className:"icon-menu"})),l.default.createElement(u.default,{className:"navigation__logo",to:"/"},l.default.createElement(m.default,{light:!0})),l.default.createElement("nav",{className:"navigation__links"},v.default.map(function(s){var a=n._isActive(s),e=a?"navigation__link--active":"";return l.default.createElement(u.default,{key:"navigation__link-"+s.title,className:"navigation__link "+e,to:"/"+s.url+"/"},s.title)})),l.default.createElement("div",{className:"navigation__search"},l.default.createElement("input",{type:"text",className:"navigation__search-input",placeholder:"Search documentation…",onBlur:this._toggleSearch.bind(this)}),l.default.createElement("button",{className:"navigation__search-icon icon-magnifying-glass",onClick:this._toggleSearch.bind(this)}),l.default.createElement("button",{className:"navigation__search-icon icon-cross",onClick:this._toggleSearch.bind(this)})),l.default.createElement(u.default,{className:"navigation__icon",title:"GitHub Repository",to:"//github.com/webpack/webpack"},l.default.createElement("i",{className:"sidecar__icon icon-github"})),l.default.createElement(u.default,{className:"navigation__icon",title:"See Questions on Stack Overflow",to:"//stackoverflow.com/questions/tagged/webpack"},l.default.createElement("i",{className:"sidecar__icon icon-stack-overflow"})),l.default.createElement(g.default,{className:"navigation__languages",items:[{title:"English",url:"https://webpack.js.org/"},{title:"中文",url:"https://doc.webpack-china.org/"}]})),v.default.filter(function(s){return n._isActive(s)&&s.children}).map(function(s){return l.default.createElement("div",{className:"navigation__bottom",key:s.title},l.default.createElement(k.default,{className:"navigation__inner"},s.children.map(function(s){var a=n._isActive(s)?"navigation__child--active":"";return l.default.createElement(u.default,{key:"navigation__child-"+s.title,className:"navigation__child "+a,to:"/"+s.url+"/"},s.title)})))}))}},{key:"componentDidMount",value:function(){var n=this;if("undefined"!=typeof window){var s=function(){};window.docsearch&&(s=window.docsearch.default||window.docsearch),s({apiKey:"fac401d1a5f68bc41f01fb6261661490",indexName:"webpack-js-org",inputSelector:".navigation__search-input"}),window.addEventListener("keyup",function(s){9===s.which&&s.target.classList.contains("navigation__search-input")&&n._openSearch()})}}},{key:"_isActive",value:function(n){var s=this.props.pageUrl,a=void 0===s?"":s;return n.children?n.children.some(function(n){return new RegExp("^/"+n.url+".*/").test(a)}):new RegExp("^/"+n.url+".*/").test(a)}},{key:"_toggleSidebar",value:function(n){document.querySelector(".sidebar-mobile").classList.toggle("sidebar-mobile--visible")}},{key:"_toggleSearch",value:function(){var n=document.querySelector(".navigation"),s=document.querySelector(".navigation__search-input");!0===n.classList.toggle("navigation--search-mode")&&s.focus()}},{key:"_openSearch",value:function(){document.querySelector(".navigation").classList.add("navigation--search-mode")}}]),s}(l.default.Component);s.default=y},function(n,s,a){function e(n,s,a){return n=c(n),a=null==a?0:t(p(a),0,n.length),s=o(s),n.slice(a,a+s.length)==s}var t=a(22),o=a(9),p=a(31),c=a(35);n.exports=e},function(n,s){function a(n,s,a){return n===n&&(void 0!==a&&(n=n<=a?n:a),void 0!==s&&(n=n>=s?n:s)),n}n.exports=a},function(n,s,a){var e=a(24),t="object"==typeof self&&self&&self.Object===Object&&self,o=e||t||Function("return this")();n.exports=o},function(n,s,a){(function(s){var a="object"==typeof s&&s&&s.Object===Object&&s;n.exports=a}).call(s,a(10))},function(n,s){function a(n,s){for(var a=-1,e=null==n?0:n.length,t=Array(e);++a<e;)t[a]=s(n[a],a,n);return t}n.exports=a},function(n,s){var a=Array.isArray;n.exports=a},function(n,s,a){function e(n){return null==n?void 0===n?i:c:l&&l in Object(n)?o(n):p(n)}var t=a(6),o=a(28),p=a(29),c="[object Null]",i="[object Undefined]",l=t?t.toStringTag:void 0;n.exports=e},function(n,s,a){function e(n){var s=p.call(n,i),a=n[i];try{n[i]=void 0;var e=!0}catch(n){}var t=c.call(n);return e&&(s?n[i]=a:delete n[i]),t}var t=a(6),o=Object.prototype,p=o.hasOwnProperty,c=o.toString,i=t?t.toStringTag:void 0;n.exports=e},function(n,s){function a(n){return t.call(n)}var e=Object.prototype,t=e.toString;n.exports=a},function(n,s){function a(n){return null!=n&&"object"==typeof n}n.exports=a},function(n,s,a){function e(n){var s=t(n),a=s%1;return s===s?a?s-a:s:0}var t=a(32);n.exports=e},function(n,s,a){function e(n){if(!n)return 0===n?n:0;if((n=t(n))===o||n===-o){return(n<0?-1:1)*p}return n===n?n:0}var t=a(33),o=1/0,p=1.7976931348623157e308;n.exports=e},function(n,s,a){function e(n){if("number"==typeof n)return n;if(o(n))return p;if(t(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=t(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(c,"");var a=l.test(n);return a||r.test(n)?u(n.slice(2),a?2:8):i.test(n)?p:+n}var t=a(34),o=a(11),p=NaN,c=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,r=/^0o[0-7]+$/i,u=parseInt;n.exports=e},function(n,s){function a(n){var s=typeof n;return null!=n&&("object"==s||"function"==s)}n.exports=a},function(n,s,a){function e(n){return null==n?"":t(n)}var t=a(9);n.exports=e},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"__esModule",{value:!0});var t=a(0),o=e(t),p=a(37),c=e(p);s.default=function(){return o.default.createElement("img",{className:"logo",src:c.default,alt:"webpack logo"})}},function(n,s,a){n.exports=a.p+"cd0bb358c45b584743d8ce4991777c42.svg"},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),l=e(i),r=a(39),u=e(r),d=function(n){function s(){var n,a,e,p;t(this,s);for(var c=arguments.length,i=Array(c),l=0;l<c;l++)i[l]=arguments[l];return a=e=o(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(i))),e.state={active:!1},p=a,o(e,p)}return p(s,n),c(s,[{key:"render",value:function(){var n=this.props,s=n.className,a=void 0===s?"":s,e=n.items,t=void 0===e?[]:e,o=this.state.active?"dropdown__list--active":"";return l.default.createElement("div",{tabIndex:"0",className:"dropdown "+a,onMouseOver:this._toggle.bind(this,!0),onMouseLeave:this._toggle.bind(this,!1)},l.default.createElement("img",{className:"dropdown__language",alt:"select language",src:u.default}),l.default.createElement("i",{className:"dropdown__arrow"}),l.default.createElement("div",{className:"dropdown__list "+o},l.default.createElement("ul",null,t.map(function(n){return l.default.createElement("li",{key:n.title},l.default.createElement("a",{href:n.url},l.default.createElement("span",null,n.title)))}))))}},{key:"_toggle",value:function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.setState({active:n})}}]),s}(l.default.Component);s.default=d},function(n,s,a){n.exports=a.p+"ffb234d54a64f189d1e4f4d643cb8bb6.svg"},function(n,s){n.exports=[{title:"Documentation",url:"concepts",children:[{title:"Concepts",url:"concepts"},{title:"Configuration",url:"configuration"},{title:"API",url:"api"},{title:"Guides",url:"guides"},{title:"Loaders",url:"loaders"},{title:"Plugins",url:"plugins"}]},{title:"Contribute",url:"contribute"},{title:"Vote",url:"vote"},{title:"Blog",url:"//medium.com/webpack"}]},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),l=e(i),r=a(5),u=e(r),d={},k={},h=function(n){function s(n){t(this,s);var a=o(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,n));return a._handleBodyClick=function(n){n.target.classList.contains("icon-menu")||a.container.contains(n.target)||a._close()},a._handleBodyClick=a._handleBodyClick.bind(a),a}return p(s,n),c(s,[{key:"render",value:function(){var n=this;return l.default.createElement("nav",{className:"sidebar-mobile",ref:function(s){return n.container=s},onTouchStart:this._handleTouchStart.bind(this),onTouchMove:this._handleTouchMove.bind(this),onTouchEnd:this._handleTouchEnd.bind(this)},l.default.createElement("div",{className:"sidebar-mobile__toggle",onTouchStart:this._handleTouchStart.bind(this),onTouchMove:this._handleOpenerTouchMove.bind(this),onTouchEnd:this._handleTouchEnd.bind(this)}),l.default.createElement("div",{className:"sidebar-mobile__content"},l.default.createElement("i",{className:"sidebar-mobile__close icon-cross",onClick:this._close.bind(this)}),this._getSections()))}},{key:"componentDidMount",value:function(){"undefined"!=typeof window&&(window.addEventListener("click",this._handleBodyClick),window.addEventListener("touchstart",this._handleBodyClick))}},{key:"componentWillUnmount",value:function(){"undefined"!=typeof window&&(window.removeEventListener("click",this._handleBodyClick),window.removeEventListener("touchstart",this._handleBodyClick))}},{key:"_getSections",value:function(){var n=this,s="";return"undefined"!=typeof window&&(s=window.location.pathname),this.props.sections.map(function(a){var e=s===a.url||s.includes("/"+a.url),t="/"==a.url?"/":"/"+a.url;return l.default.createElement("div",{className:"sidebar-mobile__section "+(e?"sidebar-mobile__section--active":""),key:t},l.default.createElement(u.default,{className:"sidebar-mobile__section-header",key:t,to:t,onClick:n._close.bind(n)},l.default.createElement("h3",null,a.title||a.url)),n._getPages(a.pages))})}},{key:"_getPages",value:function(n){var s=this,a="";return"undefined"!=typeof window&&(a=window.location.pathname),n.map(function(n){var e=""+n.url,t=a===e||a.includes(e+"/");return l.default.createElement(u.default,{key:e,className:"sidebar-mobile__page "+(t?"sidebar-mobile__page--active":""),to:e,onClick:s._close.bind(s)},n.title)})}},{key:"_close",value:function(){this.container.classList.remove("sidebar-mobile--visible")}},{key:"_open",value:function(){this.container.classList.add("sidebar-mobile--visible")}},{key:"_handleTouchStart",value:function(n){d.x=n.touches[0].pageX,d.y=n.touches[0].pageY,this.container.classList.add("no-delay")}},{key:"_handleTouchMove",value:function(n){var s=d.x-n.touches[0].pageX,a=d.y-n.touches[0].pageY,e=Math.abs(a/s);s>0&&e<.8&&(n.preventDefault(),this.container.style.transform="translateX(-"+s+"px)",k.x=n.touches[0].pageX,k.y=n.touches[0].pageY)}},{key:"_handleOpenerTouchMove",value:function(n){var s=n.touches[0].pageX-d.x,a=d.y-n.touches[0].pageY,e=Math.abs(a/s);s>0&&s<295&&e<.8&&(n.preventDefault(),this.container.style.transform="translateX(calc(-100% + "+s+"px))",k.x=n.touches[0].pageX,k.y=n.touches[0].pageY)}},{key:"_handleTouchEnd",value:function(n){this.container.classList.remove("no-delay"),this.container.style.transform="",d.x-k.x>100?this._close():k.x-d.x>100&&this._open()}}]),s}(l.default.Component);s.default=h},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),l=e(i),r=a(43),u=e(r),d=a(44),k=e(d),h=function(n){function s(){var n,a,e,p;t(this,s);for(var c=arguments.length,i=Array(c),l=0;l<c;l++)i[l]=arguments[l];return a=e=o(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(i))),e.state={fixed:!1,availableHeight:null,maxWidth:null},p=a,o(e,p)}return p(s,n),c(s,[{key:"render",value:function(){var n=this,s=this.props,a=s.pages,e=s.currentPage,t=this.state,o=t.fixed,p=t.availableHeight,c=t.maxWidth,i=void 0;return l.default.createElement("nav",{className:"sidebar",ref:function(s){return n._container=s},style:{position:o?"fixed":null,top:o?0:null,width:o?c:null,maxHeight:p}},l.default.createElement("div",{className:"sidebar__inner"},l.default.createElement("a",{href:"https://github.com/webpack/webpack/releases"},l.default.createElement(u.default,{content:"npm/v/webpack",label:"webpack"})),a.map(function(s,a){var t=i!==s.group&&"-"!==s.group;return i=s.group,l.default.createElement("div",{key:"sidebar-item-"+a},t?l.default.createElement("h4",{className:"sidebar__group"},i):null,l.default.createElement(k.default,{index:a,url:s.url,title:s.title,anchors:s.anchors,currentPage:e,onToggle:n._recalculate.bind(n)}))})))}},{key:"componentDidMount",value:function(){setTimeout(this._recalculate.bind(this),250),document.addEventListener("scroll",this._recalculate.bind(this))}},{key:"componentWillUnmount",value:function(){document.removeEventListener("scroll",this._recalculate.bind(this))}},{key:"_recalculate",value:function(){var n=window,s=n.scrollY,a=n.innerHeight,e=document.body.scrollHeight,t=this._container.offsetHeight,o=this._container.parentNode,p=o.offsetWidth,c=o.offsetHeight,i=document.querySelector("header").offsetHeight+document.querySelector(".notification-bar").offsetHeight,l=document.querySelector("footer").offsetHeight,r=e-s-a,u=s>i?0:i-s,d=r>l?0:l-r;this.setState({fixed:s>=i&&t<c,availableHeight:a-u-d,maxWidth:p})}}]),s}(i.Component);s.default=h},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a(0),t=function(n){return n&&n.__esModule?n:{default:n}}(e);s.default=function(n){return t.default.createElement("img",{src:"https://img.shields.io/"+n.content+".svg?label="+n.label+"&style=flat-square&maxAge=3600"})}},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function p(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),l=e(i),r=a(45),u=a(5),d=e(u),k="sidebar-item",h=function(n){function s(){var n,a,e,p;t(this,s);for(var c=arguments.length,i=Array(c),l=0;l<c;l++)i[l]=arguments[l];return a=e=o(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(i))),e.state={open:e._isOpen(e.props)},p=a,o(e,p)}return p(s,n),c(s,[{key:"render",value:function(){var n=this,s=this.props,a=s.title,e=s.anchors,t=void 0===e?[]:e,o=this.state.open?k+"--open":"",p=0==t.length?k+"--disabled":"";return l.default.createElement("div",{className:k+" "+o+" "+p},t.length>0?l.default.createElement("i",{className:k+"__toggle icon-chevron-right",onClick:this._toggle.bind(this)}):l.default.createElement("i",{className:k+"__toggle icon-vertical-bar"}),l.default.createElement(d.default,{className:k+"__title",to:this.props.url},a),t.length>0?l.default.createElement("ul",{className:k+"__anchors"},t.map(function(s){return l.default.createElement("li",{key:"anchor-"+a+"-"+(0,r.uniqueId)(),className:k+"__anchor",title:s.title},l.default.createElement("a",{href:n._generateAnchorURL(s)},s.title))})):null)}},{key:"componentWillReceiveProps",value:function(n){n.currentPage!==this.props.currentPage&&this.setState({open:this._isOpen(n)})}},{key:"_isOpen",value:function(n){return RegExp(n.currentPage+"/?$").test(n.url)}},{key:"_toggle",value:function(n){var s=this.props.onToggle;this.setState({open:!this.state.open},function(){"function"==typeof s&&s()})}},{key:"_generateAnchorURL",value:function(n){var s=this.props,a=s.currentPage,e=s.url;return"/"+a===e?"#"+n.id:e+"#"+n.id}}]),s}(l.default.Component);s.default=h},function(n,s,a){(function(n,e){var t;(function(){function o(n,s){return n.set(s[0],s[1]),n}function p(n,s){return n.add(s),n}function c(n,s,a){switch(a.length){case 0:return n.call(s);case 1:return n.call(s,a[0]);case 2:return n.call(s,a[0],a[1]);case 3:return n.call(s,a[0],a[1],a[2])}return n.apply(s,a)}function i(n,s,a,e){for(var t=-1,o=null==n?0:n.length;++t<o;){var p=n[t];s(e,p,a(p),n)}return e}function l(n,s){for(var a=-1,e=null==n?0:n.length;++a<e&&!1!==s(n[a],a,n););return n}function r(n,s){for(var a=null==n?0:n.length;a--&&!1!==s(n[a],a,n););return n}function u(n,s){for(var a=-1,e=null==n?0:n.length;++a<e;)if(!s(n[a],a,n))return!1;return!0}function d(n,s){for(var a=-1,e=null==n?0:n.length,t=0,o=[];++a<e;){var p=n[a];s(p,a,n)&&(o[t++]=p)}return o}function k(n,s){return!!(null==n?0:n.length)&&q(n,s,0)>-1}function h(n,s,a){for(var e=-1,t=null==n?0:n.length;++e<t;)if(a(s,n[e]))return!0;return!1}function m(n,s){for(var a=-1,e=null==n?0:n.length,t=Array(e);++a<e;)t[a]=s(n[a],a,n);return t}function b(n,s){for(var a=-1,e=s.length,t=n.length;++a<e;)n[t+a]=s[a];return n}function g(n,s,a,e){var t=-1,o=null==n?0:n.length;for(e&&o&&(a=n[++t]);++t<o;)a=s(a,n[t],t,n);return a}function f(n,s,a,e){var t=null==n?0:n.length;for(e&&t&&(a=n[--t]);t--;)a=s(a,n[t],t,n);return a}function v(n,s){for(var a=-1,e=null==n?0:n.length;++a<e;)if(s(n[a],a,n))return!0;return!1}function y(n){return n.split("")}function w(n){return n.match(Us)||[]}function x(n,s,a){var e;return a(n,function(n,a,t){if(s(n,a,t))return e=a,!1}),e}function j(n,s,a,e){for(var t=n.length,o=a+(e?1:-1);e?o--:++o<t;)if(s(n[o],o,n))return o;return-1}function q(n,s,a){return s===s?Q(n,s,a):j(n,S,a)}function T(n,s,a,e){for(var t=a-1,o=n.length;++t<o;)if(e(n[t],s))return t;return-1}function S(n){return n!==n}function _(n,s){var a=null==n?0:n.length;return a?I(n,s)/a:Rn}function C(n){return function(s){return null==s?tn:s[n]}}function P(n){return function(s){return null==n?tn:n[s]}}function E(n,s,a,e,t){return t(n,function(n,t,o){a=e?(e=!1,n):s(a,n,t,o)}),a}function M(n,s){var a=n.length;for(n.sort(s);a--;)n[a]=n[a].value;return n}function I(n,s){for(var a,e=-1,t=n.length;++e<t;){var o=s(n[e]);o!==tn&&(a=a===tn?o:a+o)}return a}function A(n,s){for(var a=-1,e=Array(n);++a<n;)e[a]=s(a);return e}function D(n,s){return m(s,function(s){return[s,n[s]]})}function N(n){return function(s){return n(s)}}function R(n,s){return m(s,function(s){return n[s]})}function O(n,s){return n.has(s)}function L(n,s){for(var a=-1,e=n.length;++a<e&&q(s,n[a],0)>-1;);return a}function z(n,s){for(var a=n.length;a--&&q(s,n[a],0)>-1;);return a}function W(n,s){for(var a=n.length,e=0;a--;)n[a]===s&&++e;return e}function U(n){return"\\"+Ca[n]}function B(n,s){return null==n?tn:n[s]}function H(n){return va.test(n)}function F(n){return ya.test(n)}function J(n){for(var s,a=[];!(s=n.next()).done;)a.push(s.value);return a}function $(n){var s=-1,a=Array(n.size);return n.forEach(function(n,e){a[++s]=[e,n]}),a}function V(n,s){return function(a){return n(s(a))}}function G(n,s){for(var a=-1,e=n.length,t=0,o=[];++a<e;){var p=n[a];p!==s&&p!==un||(n[a]=un,o[t++]=a)}return o}function Y(n){var s=-1,a=Array(n.size);return n.forEach(function(n){a[++s]=n}),a}function K(n){var s=-1,a=Array(n.size);return n.forEach(function(n){a[++s]=[n,n]}),a}function Q(n,s,a){for(var e=a-1,t=n.length;++e<t;)if(n[e]===s)return e;return-1}function X(n,s,a){for(var e=a+1;e--;)if(n[e]===s)return e;return e}function Z(n){return H(n)?sn(n):Ja(n)}function nn(n){return H(n)?an(n):y(n)}function sn(n){for(var s=ga.lastIndex=0;ga.test(n);)++s;return s}function an(n){return n.match(ga)||[]}function en(n){return n.match(fa)||[]}var tn,on=200,pn="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",cn="Expected a function",ln="__lodash_hash_undefined__",rn=500,un="__lodash_placeholder__",dn=1,kn=2,hn=4,mn=1,bn=2,gn=1,fn=2,vn=4,yn=8,wn=16,xn=32,jn=64,qn=128,Tn=256,Sn=512,_n=30,Cn="...",Pn=800,En=16,Mn=1,In=2,An=1/0,Dn=9007199254740991,Nn=1.7976931348623157e308,Rn=NaN,On=4294967295,Ln=On-1,zn=On>>>1,Wn=[["ary",qn],["bind",gn],["bindKey",fn],["curry",yn],["curryRight",wn],["flip",Sn],["partial",xn],["partialRight",jn],["rearg",Tn]],Un="[object Arguments]",Bn="[object Array]",Hn="[object AsyncFunction]",Fn="[object Boolean]",Jn="[object Date]",$n="[object DOMException]",Vn="[object Error]",Gn="[object Function]",Yn="[object GeneratorFunction]",Kn="[object Map]",Qn="[object Number]",Xn="[object Null]",Zn="[object Object]",ns="[object Proxy]",ss="[object RegExp]",as="[object Set]",es="[object String]",ts="[object Symbol]",os="[object Undefined]",ps="[object WeakMap]",cs="[object WeakSet]",is="[object ArrayBuffer]",ls="[object DataView]",rs="[object Float32Array]",us="[object Float64Array]",ds="[object Int8Array]",ks="[object Int16Array]",hs="[object Int32Array]",ms="[object Uint8Array]",bs="[object Uint8ClampedArray]",gs="[object Uint16Array]",fs="[object Uint32Array]",vs=/\b__p \+= '';/g,ys=/\b(__p \+=) '' \+/g,ws=/(__e\(.*?\)|\b__t\)) \+\n'';/g,xs=/&(?:amp|lt|gt|quot|#39);/g,js=/[&<>"']/g,qs=RegExp(xs.source),Ts=RegExp(js.source),Ss=/<%-([\s\S]+?)%>/g,_s=/<%([\s\S]+?)%>/g,Cs=/<%=([\s\S]+?)%>/g,Ps=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Es=/^\w*$/,Ms=/^\./,Is=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,As=/[\\^$.*+?()[\]{}|]/g,Ds=RegExp(As.source),Ns=/^\s+|\s+$/g,Rs=/^\s+/,Os=/\s+$/,Ls=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,zs=/\{\n\/\* \[wrapped with (.+)\] \*/,Ws=/,? & /,Us=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Bs=/\\(\\)?/g,Hs=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Fs=/\w*$/,Js=/^[-+]0x[0-9a-f]+$/i,$s=/^0b[01]+$/i,Vs=/^\[object .+?Constructor\]$/,Gs=/^0o[0-7]+$/i,Ys=/^(?:0|[1-9]\d*)$/,Ks=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Qs=/($^)/,Xs=/['\n\r\u2028\u2029\\]/g,Zs="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",na="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",sa="["+na+"]",aa="["+Zs+"]",ea="[a-z\\xdf-\\xf6\\xf8-\\xff]",ta="[^\\ud800-\\udfff"+na+"\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",oa="\\ud83c[\\udffb-\\udfff]",pa="(?:\\ud83c[\\udde6-\\uddff]){2}",ca="[\\ud800-\\udbff][\\udc00-\\udfff]",ia="[A-Z\\xc0-\\xd6\\xd8-\\xde]",la="(?:"+ea+"|"+ta+")",ra="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",ua="(?:\\u200d(?:"+["[^\\ud800-\\udfff]",pa,ca].join("|")+")[\\ufe0e\\ufe0f]?"+ra+")*",da="[\\ufe0e\\ufe0f]?"+ra+ua,ka="(?:"+["[\\u2700-\\u27bf]",pa,ca].join("|")+")"+da,ha="(?:"+["[^\\ud800-\\udfff]"+aa+"?",aa,pa,ca,"[\\ud800-\\udfff]"].join("|")+")",ma=RegExp("['’]","g"),ba=RegExp(aa,"g"),ga=RegExp(oa+"(?="+oa+")|"+ha+da,"g"),fa=RegExp([ia+"?"+ea+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[sa,ia,"$"].join("|")+")","(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[sa,ia+la,"$"].join("|")+")",ia+"?"+la+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ia+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)","\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)","\\d+",ka].join("|"),"g"),va=RegExp("[\\u200d\\ud800-\\udfff"+Zs+"\\ufe0e\\ufe0f]"),ya=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,wa=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],xa=-1,ja={};ja[rs]=ja[us]=ja[ds]=ja[ks]=ja[hs]=ja[ms]=ja[bs]=ja[gs]=ja[fs]=!0,ja[Un]=ja[Bn]=ja[is]=ja[Fn]=ja[ls]=ja[Jn]=ja[Vn]=ja[Gn]=ja[Kn]=ja[Qn]=ja[Zn]=ja[ss]=ja[as]=ja[es]=ja[ps]=!1;var qa={};qa[Un]=qa[Bn]=qa[is]=qa[ls]=qa[Fn]=qa[Jn]=qa[rs]=qa[us]=qa[ds]=qa[ks]=qa[hs]=qa[Kn]=qa[Qn]=qa[Zn]=qa[ss]=qa[as]=qa[es]=qa[ts]=qa[ms]=qa[bs]=qa[gs]=qa[fs]=!0,qa[Vn]=qa[Gn]=qa[ps]=!1;var Ta={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"},Sa={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},_a={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},Ca={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pa=parseFloat,Ea=parseInt,Ma="object"==typeof n&&n&&n.Object===Object&&n,Ia="object"==typeof self&&self&&self.Object===Object&&self,Aa=Ma||Ia||Function("return this")(),Da="object"==typeof s&&s&&!s.nodeType&&s,Na=Da&&"object"==typeof e&&e&&!e.nodeType&&e,Ra=Na&&Na.exports===Da,Oa=Ra&&Ma.process,La=function(){try{return Oa&&Oa.binding&&Oa.binding("util")}catch(n){}}(),za=La&&La.isArrayBuffer,Wa=La&&La.isDate,Ua=La&&La.isMap,Ba=La&&La.isRegExp,Ha=La&&La.isSet,Fa=La&&La.isTypedArray,Ja=C("length"),$a=P(Ta),Va=P(Sa),Ga=P(_a),Ya=function n(s){function a(n){if(oi(n)&&!bd(n)&&!(n instanceof y)){if(n instanceof t)return n;if(br.call(n,"__wrapped__"))return ap(n)}return new t(n)}function e(){}function t(n,s){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!s,this.__index__=0,this.__values__=tn}function y(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=On,this.__views__=[]}function P(){var n=new y(this.__wrapped__);return n.__actions__=Ot(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=Ot(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=Ot(this.__views__),n}function Q(){if(this.__filtered__){var n=new y(this);n.__dir__=-1,n.__filtered__=!0}else n=this.clone(),n.__dir__*=-1;return n}function sn(){var n=this.__wrapped__.value(),s=this.__dir__,a=bd(n),e=s<0,t=a?n.length:0,o=_o(0,t,this.__views__),p=o.start,c=o.end,i=c-p,l=e?c:p-1,r=this.__iteratees__,u=r.length,d=0,k=$r(i,this.__takeCount__);if(!a||!e&&t==i&&k==i)return ft(n,this.__actions__);var h=[];n:for(;i--&&d<k;){l+=s;for(var m=-1,b=n[l];++m<u;){var g=r[m],f=g.iteratee,v=g.type,y=f(b);if(v==In)b=y;else if(!y){if(v==Mn)continue n;break n}}h[d++]=b}return h}function an(n){var s=-1,a=null==n?0:n.length;for(this.clear();++s<a;){var e=n[s];this.set(e[0],e[1])}}function Us(){this.__data__=au?au(null):{},this.size=0}function Zs(n){var s=this.has(n)&&delete this.__data__[n];return this.size-=s?1:0,s}function na(n){var s=this.__data__;if(au){var a=s[n];return a===ln?tn:a}return br.call(s,n)?s[n]:tn}function sa(n){var s=this.__data__;return au?s[n]!==tn:br.call(s,n)}function aa(n,s){var a=this.__data__;return this.size+=this.has(n)?0:1,a[n]=au&&s===tn?ln:s,this}function ea(n){var s=-1,a=null==n?0:n.length;for(this.clear();++s<a;){var e=n[s];this.set(e[0],e[1])}}function ta(){this.__data__=[],this.size=0}function oa(n){var s=this.__data__,a=Ka(s,n);return!(a<0)&&(a==s.length-1?s.pop():Er.call(s,a,1),--this.size,!0)}function pa(n){var s=this.__data__,a=Ka(s,n);return a<0?tn:s[a][1]}function ca(n){return Ka(this.__data__,n)>-1}function ia(n,s){var a=this.__data__,e=Ka(a,n);return e<0?(++this.size,a.push([n,s])):a[e][1]=s,this}function la(n){var s=-1,a=null==n?0:n.length;for(this.clear();++s<a;){var e=n[s];this.set(e[0],e[1])}}function ra(){this.size=0,this.__data__={hash:new an,map:new(Xr||ea),string:new an}}function ua(n){var s=jo(this,n).delete(n);return this.size-=s?1:0,s}function da(n){return jo(this,n).get(n)}function ka(n){return jo(this,n).has(n)}function ha(n,s){var a=jo(this,n),e=a.size;return a.set(n,s),this.size+=a.size==e?0:1,this}function ga(n){var s=-1,a=null==n?0:n.length;for(this.__data__=new la;++s<a;)this.add(n[s])}function fa(n){return this.__data__.set(n,ln),this}function va(n){return this.__data__.has(n)}function ya(n){var s=this.__data__=new ea(n);this.size=s.size}function Ta(){this.__data__=new ea,this.size=0}function Sa(n){var s=this.__data__,a=s.delete(n);return this.size=s.size,a}function _a(n){return this.__data__.get(n)}function Ca(n){return this.__data__.has(n)}function Ma(n,s){var a=this.__data__;if(a instanceof ea){var e=a.__data__;if(!Xr||e.length<on-1)return e.push([n,s]),this.size=++a.size,this;a=this.__data__=new la(e)}return a.set(n,s),this.size=a.size,this}function Ia(n,s){var a=bd(n),e=!a&&md(n),t=!a&&!e&&fd(n),o=!a&&!e&&!t&&jd(n),p=a||e||t||o,c=p?A(n.length,lr):[],i=c.length;for(var l in n)!s&&!br.call(n,l)||p&&("length"==l||t&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||No(l,i))||c.push(l);return c}function Da(n){var s=n.length;return s?n[Ze(0,s-1)]:tn}function Na(n,s){return Xo(Ot(n),ae(s,0,n.length))}function Oa(n){return Xo(Ot(n))}function La(n,s,a){(a===tn||Jc(n[s],a))&&(a!==tn||s in n)||ne(n,s,a)}function Ja(n,s,a){var e=n[s];br.call(n,s)&&Jc(e,a)&&(a!==tn||s in n)||ne(n,s,a)}function Ka(n,s){for(var a=n.length;a--;)if(Jc(n[a][0],s))return a;return-1}function Qa(n,s,a,e){return hu(n,function(n,t,o){s(e,n,a(n),o)}),e}function Xa(n,s){return n&&Lt(s,Wi(s),n)}function Za(n,s){return n&&Lt(s,Ui(s),n)}function ne(n,s,a){"__proto__"==s&&Dr?Dr(n,s,{configurable:!0,enumerable:!0,value:a,writable:!0}):n[s]=a}function se(n,s){for(var a=-1,e=s.length,t=ar(e),o=null==n;++a<e;)t[a]=o?tn:Oi(n,s[a]);return t}function ae(n,s,a){return n===n&&(a!==tn&&(n=n<=a?n:a),s!==tn&&(n=n>=s?n:s)),n}function ee(n,s,a,e,t,o){var p,c=s&dn,i=s&kn,r=s&hn;if(a&&(p=t?a(n,e,t,o):a(n)),p!==tn)return p;if(!ti(n))return n;var u=bd(n);if(u){if(p=Eo(n),!c)return Ot(n,p)}else{var d=Su(n),k=d==Gn||d==Yn;if(fd(n))return Tt(n,c);if(d==Zn||d==Un||k&&!t){if(p=i||k?{}:Mo(n),!c)return i?Wt(n,Za(p,n)):zt(n,Xa(p,n))}else{if(!qa[d])return t?n:{};p=Io(n,d,ee,c)}}o||(o=new ya);var h=o.get(n);if(h)return h;o.set(n,p);var m=r?i?vo:fo:i?Ui:Wi,b=u?tn:m(n);return l(b||n,function(e,t){b&&(t=e,e=n[t]),Ja(p,t,ee(e,s,a,t,n,o))}),p}function te(n){var s=Wi(n);return function(a){return oe(a,n,s)}}function oe(n,s,a){var e=a.length;if(null==n)return!e;for(n=cr(n);e--;){var t=a[e],o=s[t],p=n[t];if(p===tn&&!(t in n)||!o(p))return!1}return!0}function pe(n,s,a){if("function"!=typeof n)throw new rr(cn);return Pu(function(){n.apply(tn,a)},s)}function ce(n,s,a,e){var t=-1,o=k,p=!0,c=n.length,i=[],l=s.length;if(!c)return i;a&&(s=m(s,N(a))),e?(o=h,p=!1):s.length>=on&&(o=O,p=!1,s=new ga(s));n:for(;++t<c;){var r=n[t],u=null==a?r:a(r);if(r=e||0!==r?r:0,p&&u===u){for(var d=l;d--;)if(s[d]===u)continue n;i.push(r)}else o(s,u,e)||i.push(r)}return i}function ie(n,s){var a=!0;return hu(n,function(n,e,t){return a=!!s(n,e,t)}),a}function le(n,s,a){for(var e=-1,t=n.length;++e<t;){var o=n[e],p=s(o);if(null!=p&&(c===tn?p===p&&!bi(p):a(p,c)))var c=p,i=o}return i}function re(n,s,a,e){var t=n.length;for(a=xi(a),a<0&&(a=-a>t?0:t+a),e=e===tn||e>t?t:xi(e),e<0&&(e+=t),e=a>e?0:ji(e);a<e;)n[a++]=s;return n}function ue(n,s){var a=[];return hu(n,function(n,e,t){s(n,e,t)&&a.push(n)}),a}function de(n,s,a,e,t){var o=-1,p=n.length;for(a||(a=Do),t||(t=[]);++o<p;){var c=n[o];s>0&&a(c)?s>1?de(c,s-1,a,e,t):b(t,c):e||(t[t.length]=c)}return t}function ke(n,s){return n&&bu(n,s,Wi)}function he(n,s){return n&&gu(n,s,Wi)}function me(n,s){return d(s,function(s){return si(n[s])})}function be(n,s){s=jt(s,n);for(var a=0,e=s.length;null!=n&&a<e;)n=n[Zo(s[a++])];return a&&a==e?n:tn}function ge(n,s,a){var e=s(n);return bd(n)?e:b(e,a(n))}function fe(n){return null==n?n===tn?os:Xn:Ar&&Ar in cr(n)?So(n):$o(n)}function ve(n,s){return n>s}function ye(n,s){return null!=n&&br.call(n,s)}function we(n,s){return null!=n&&s in cr(n)}function xe(n,s,a){return n>=$r(s,a)&&n<Jr(s,a)}function je(n,s,a){for(var e=a?h:k,t=n[0].length,o=n.length,p=o,c=ar(o),i=1/0,l=[];p--;){var r=n[p];p&&s&&(r=m(r,N(s))),i=$r(r.length,i),c[p]=!a&&(s||t>=120&&r.length>=120)?new ga(p&&r):tn}r=n[0];var u=-1,d=c[0];n:for(;++u<t&&l.length<i;){var b=r[u],g=s?s(b):b;if(b=a||0!==b?b:0,!(d?O(d,g):e(l,g,a))){for(p=o;--p;){var f=c[p];if(!(f?O(f,g):e(n[p],g,a)))continue n}d&&d.push(g),l.push(b)}}return l}function qe(n,s,a,e){return ke(n,function(n,t,o){s(e,a(n),t,o)}),e}function Te(n,s,a){s=jt(s,n),n=Go(n,s);var e=null==n?n:n[Zo(wp(s))];return null==e?tn:c(e,n,a)}function Se(n){return oi(n)&&fe(n)==Un}function _e(n){return oi(n)&&fe(n)==is}function Ce(n){return oi(n)&&fe(n)==Jn}function Pe(n,s,a,e,t){return n===s||(null==n||null==s||!oi(n)&&!oi(s)?n!==n&&s!==s:Ee(n,s,a,e,Pe,t))}function Ee(n,s,a,e,t,o){var p=bd(n),c=bd(s),i=p?Bn:Su(n),l=c?Bn:Su(s);i=i==Un?Zn:i,l=l==Un?Zn:l;var r=i==Zn,u=l==Zn,d=i==l;if(d&&fd(n)){if(!fd(s))return!1;p=!0,r=!1}if(d&&!r)return o||(o=new ya),p||jd(n)?ho(n,s,a,e,t,o):mo(n,s,i,a,e,t,o);if(!(a&mn)){var k=r&&br.call(n,"__wrapped__"),h=u&&br.call(s,"__wrapped__");if(k||h){var m=k?n.value():n,b=h?s.value():s;return o||(o=new ya),t(m,b,a,e,o)}}return!!d&&(o||(o=new ya),bo(n,s,a,e,t,o))}function Me(n){return oi(n)&&Su(n)==Kn}function Ie(n,s,a,e){var t=a.length,o=t,p=!e;if(null==n)return!o;for(n=cr(n);t--;){var c=a[t];if(p&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++t<o;){c=a[t];var i=c[0],l=n[i],r=c[1];if(p&&c[2]){if(l===tn&&!(i in n))return!1}else{var u=new ya;if(e)var d=e(l,r,i,n,s,u);if(!(d===tn?Pe(r,l,mn|bn,e,u):d))return!1}}return!0}function Ae(n){return!(!ti(n)||Wo(n))&&(si(n)?xr:Vs).test(np(n))}function De(n){return oi(n)&&fe(n)==ss}function Ne(n){return oi(n)&&Su(n)==as}function Re(n){return oi(n)&&ei(n.length)&&!!ja[fe(n)]}function Oe(n){return"function"==typeof n?n:null==n?El:"object"==typeof n?bd(n)?He(n[0],n[1]):Be(n):Ll(n)}function Le(n){if(!Uo(n))return Fr(n);var s=[];for(var a in cr(n))br.call(n,a)&&"constructor"!=a&&s.push(a);return s}function ze(n){if(!ti(n))return Jo(n);var s=Uo(n),a=[];for(var e in n)("constructor"!=e||!s&&br.call(n,e))&&a.push(e);return a}function We(n,s){return n<s}function Ue(n,s){var a=-1,e=$c(n)?ar(n.length):[];return hu(n,function(n,t,o){e[++a]=s(n,t,o)}),e}function Be(n){var s=qo(n);return 1==s.length&&s[0][2]?Ho(s[0][0],s[0][1]):function(a){return a===n||Ie(a,n,s)}}function He(n,s){return Oo(n)&&Bo(s)?Ho(Zo(n),s):function(a){var e=Oi(a,n);return e===tn&&e===s?zi(a,n):Pe(s,e,mn|bn)}}function Fe(n,s,a,e,t){n!==s&&bu(s,function(o,p){if(ti(o))t||(t=new ya),Je(n,s,p,a,Fe,e,t);else{var c=e?e(n[p],o,p+"",n,s,t):tn;c===tn&&(c=o),La(n,p,c)}},Ui)}function Je(n,s,a,e,t,o,p){var c=n[a],i=s[a],l=p.get(i);if(l)return void La(n,a,l);var r=o?o(c,i,a+"",n,s,p):tn,u=r===tn;if(u){var d=bd(i),k=!d&&fd(i),h=!d&&!k&&jd(i);r=i,d||k||h?bd(c)?r=c:Vc(c)?r=Ot(c):k?(u=!1,r=Tt(i,!0)):h?(u=!1,r=It(i,!0)):r=[]:ki(i)||md(i)?(r=c,md(c)?r=Ti(c):(!ti(c)||e&&si(c))&&(r=Mo(i))):u=!1}u&&(p.set(i,r),t(r,i,e,o,p),p.delete(i)),La(n,a,r)}function $e(n,s){var a=n.length;if(a)return s+=s<0?a:0,No(s,a)?n[s]:tn}function Ve(n,s,a){var e=-1;return s=m(s.length?s:[El],N(xo())),M(Ue(n,function(n,a,t){return{criteria:m(s,function(s){return s(n)}),index:++e,value:n}}),function(n,s){return Dt(n,s,a)})}function Ge(n,s){return Ye(n,s,function(s,a){return zi(n,a)})}function Ye(n,s,a){for(var e=-1,t=s.length,o={};++e<t;){var p=s[e],c=be(n,p);a(c,p)&&ot(o,jt(p,n),c)}return o}function Ke(n){return function(s){return be(s,n)}}function Qe(n,s,a,e){var t=e?T:q,o=-1,p=s.length,c=n;for(n===s&&(s=Ot(s)),a&&(c=m(n,N(a)));++o<p;)for(var i=0,l=s[o],r=a?a(l):l;(i=t(c,r,i,e))>-1;)c!==n&&Er.call(c,i,1),Er.call(n,i,1);return n}function Xe(n,s){for(var a=n?s.length:0,e=a-1;a--;){var t=s[a];if(a==e||t!==o){var o=t;No(t)?Er.call(n,t,1):mt(n,t)}}return n}function Ze(n,s){return n+zr(Yr()*(s-n+1))}function nt(n,s,a,e){for(var t=-1,o=Jr(Lr((s-n)/(a||1)),0),p=ar(o);o--;)p[e?o:++t]=n,n+=a;return p}function st(n,s){var a="";if(!n||s<1||s>Dn)return a;do{s%2&&(a+=n),(s=zr(s/2))&&(n+=n)}while(s);return a}function at(n,s){return Eu(Vo(n,s,El),n+"")}function et(n){return Da(Zi(n))}function tt(n,s){var a=Zi(n);return Xo(a,ae(s,0,a.length))}function ot(n,s,a,e){if(!ti(n))return n;s=jt(s,n);for(var t=-1,o=s.length,p=o-1,c=n;null!=c&&++t<o;){var i=Zo(s[t]),l=a;if(t!=p){var r=c[i];l=e?e(r,i,c):tn,l===tn&&(l=ti(r)?r:No(s[t+1])?[]:{})}Ja(c,i,l),c=c[i]}return n}function pt(n){return Xo(Zi(n))}function ct(n,s,a){var e=-1,t=n.length;s<0&&(s=-s>t?0:t+s),a=a>t?t:a,a<0&&(a+=t),t=s>a?0:a-s>>>0,s>>>=0;for(var o=ar(t);++e<t;)o[e]=n[e+s];return o}function it(n,s){var a;return hu(n,function(n,e,t){return!(a=s(n,e,t))}),!!a}function lt(n,s,a){var e=0,t=null==n?e:n.length;if("number"==typeof s&&s===s&&t<=zn){for(;e<t;){var o=e+t>>>1,p=n[o];null!==p&&!bi(p)&&(a?p<=s:p<s)?e=o+1:t=o}return t}return rt(n,s,El,a)}function rt(n,s,a,e){s=a(s);for(var t=0,o=null==n?0:n.length,p=s!==s,c=null===s,i=bi(s),l=s===tn;t<o;){var r=zr((t+o)/2),u=a(n[r]),d=u!==tn,k=null===u,h=u===u,m=bi(u);if(p)var b=e||h;else b=l?h&&(e||d):c?h&&d&&(e||!k):i?h&&d&&!k&&(e||!m):!k&&!m&&(e?u<=s:u<s);b?t=r+1:o=r}return $r(o,Ln)}function ut(n,s){for(var a=-1,e=n.length,t=0,o=[];++a<e;){var p=n[a],c=s?s(p):p;if(!a||!Jc(c,i)){var i=c;o[t++]=0===p?0:p}}return o}function dt(n){return"number"==typeof n?n:bi(n)?Rn:+n}function kt(n){if("string"==typeof n)return n;if(bd(n))return m(n,kt)+"";if(bi(n))return du?du.call(n):"";var s=n+"";return"0"==s&&1/n==-An?"-0":s}function ht(n,s,a){var e=-1,t=k,o=n.length,p=!0,c=[],i=c;if(a)p=!1,t=h;else if(o>=on){var l=s?null:xu(n);if(l)return Y(l);p=!1,t=O,i=new ga}else i=s?[]:c;n:for(;++e<o;){var r=n[e],u=s?s(r):r;if(r=a||0!==r?r:0,p&&u===u){for(var d=i.length;d--;)if(i[d]===u)continue n;s&&i.push(u),c.push(r)}else t(i,u,a)||(i!==c&&i.push(u),c.push(r))}return c}function mt(n,s){return s=jt(s,n),null==(n=Go(n,s))||delete n[Zo(wp(s))]}function bt(n,s,a,e){return ot(n,s,a(be(n,s)),e)}function gt(n,s,a,e){for(var t=n.length,o=e?t:-1;(e?o--:++o<t)&&s(n[o],o,n););return a?ct(n,e?0:o,e?o+1:t):ct(n,e?o+1:0,e?t:o)}function ft(n,s){var a=n;return a instanceof y&&(a=a.value()),g(s,function(n,s){return s.func.apply(s.thisArg,b([n],s.args))},a)}function vt(n,s,a){var e=n.length;if(e<2)return e?ht(n[0]):[];for(var t=-1,o=ar(e);++t<e;)for(var p=n[t],c=-1;++c<e;)c!=t&&(o[t]=ce(o[t]||p,n[c],s,a));return ht(de(o,1),s,a)}function yt(n,s,a){for(var e=-1,t=n.length,o=s.length,p={};++e<t;){var c=e<o?s[e]:tn;a(p,n[e],c)}return p}function wt(n){return Vc(n)?n:[]}function xt(n){return"function"==typeof n?n:El}function jt(n,s){return bd(n)?n:Oo(n,s)?[n]:Mu(_i(n))}function qt(n,s,a){var e=n.length;return a=a===tn?e:a,!s&&a>=e?n:ct(n,s,a)}function Tt(n,s){if(s)return n.slice();var a=n.length,e=Sr?Sr(a):new n.constructor(a);return n.copy(e),e}function St(n){var s=new n.constructor(n.byteLength);return new Tr(s).set(new Tr(n)),s}function _t(n,s){var a=s?St(n.buffer):n.buffer;return new n.constructor(a,n.byteOffset,n.byteLength)}function Ct(n,s,a){return g(s?a($(n),dn):$(n),o,new n.constructor)}function Pt(n){var s=new n.constructor(n.source,Fs.exec(n));return s.lastIndex=n.lastIndex,s}function Et(n,s,a){return g(s?a(Y(n),dn):Y(n),p,new n.constructor)}function Mt(n){return uu?cr(uu.call(n)):{}}function It(n,s){var a=s?St(n.buffer):n.buffer;return new n.constructor(a,n.byteOffset,n.length)}function At(n,s){if(n!==s){var a=n!==tn,e=null===n,t=n===n,o=bi(n),p=s!==tn,c=null===s,i=s===s,l=bi(s);if(!c&&!l&&!o&&n>s||o&&p&&i&&!c&&!l||e&&p&&i||!a&&i||!t)return 1;if(!e&&!o&&!l&&n<s||l&&a&&t&&!e&&!o||c&&a&&t||!p&&t||!i)return-1}return 0}function Dt(n,s,a){for(var e=-1,t=n.criteria,o=s.criteria,p=t.length,c=a.length;++e<p;){var i=At(t[e],o[e]);if(i){if(e>=c)return i;return i*("desc"==a[e]?-1:1)}}return n.index-s.index}function Nt(n,s,a,e){for(var t=-1,o=n.length,p=a.length,c=-1,i=s.length,l=Jr(o-p,0),r=ar(i+l),u=!e;++c<i;)r[c]=s[c];for(;++t<p;)(u||t<o)&&(r[a[t]]=n[t]);for(;l--;)r[c++]=n[t++];return r}function Rt(n,s,a,e){for(var t=-1,o=n.length,p=-1,c=a.length,i=-1,l=s.length,r=Jr(o-c,0),u=ar(r+l),d=!e;++t<r;)u[t]=n[t];for(var k=t;++i<l;)u[k+i]=s[i];for(;++p<c;)(d||t<o)&&(u[k+a[p]]=n[t++]);return u}function Ot(n,s){var a=-1,e=n.length;for(s||(s=ar(e));++a<e;)s[a]=n[a];return s}function Lt(n,s,a,e){var t=!a;a||(a={});for(var o=-1,p=s.length;++o<p;){var c=s[o],i=e?e(a[c],n[c],c,a,n):tn;i===tn&&(i=n[c]),t?ne(a,c,i):Ja(a,c,i)}return a}function zt(n,s){return Lt(n,qu(n),s)}function Wt(n,s){return Lt(n,Tu(n),s)}function Ut(n,s){return function(a,e){var t=bd(a)?i:Qa,o=s?s():{};return t(a,n,xo(e,2),o)}}function Bt(n){return at(function(s,a){var e=-1,t=a.length,o=t>1?a[t-1]:tn,p=t>2?a[2]:tn;for(o=n.length>3&&"function"==typeof o?(t--,o):tn,p&&Ro(a[0],a[1],p)&&(o=t<3?tn:o,t=1),s=cr(s);++e<t;){var c=a[e];c&&n(s,c,e,o)}return s})}function Ht(n,s){return function(a,e){if(null==a)return a;if(!$c(a))return n(a,e);for(var t=a.length,o=s?t:-1,p=cr(a);(s?o--:++o<t)&&!1!==e(p[o],o,p););return a}}function Ft(n){return function(s,a,e){for(var t=-1,o=cr(s),p=e(s),c=p.length;c--;){var i=p[n?c:++t];if(!1===a(o[i],i,o))break}return s}}function Jt(n,s,a){function e(){return(this&&this!==Aa&&this instanceof e?o:n).apply(t?a:this,arguments)}var t=s&gn,o=Gt(n);return e}function $t(n){return function(s){s=_i(s);var a=H(s)?nn(s):tn,e=a?a[0]:s.charAt(0),t=a?qt(a,1).join(""):s.slice(1);return e[n]()+t}}function Vt(n){return function(s){return g(Tl(ol(s).replace(ma,"")),n,"")}}function Gt(n){return function(){var s=arguments;switch(s.length){case 0:return new n;case 1:return new n(s[0]);case 2:return new n(s[0],s[1]);case 3:return new n(s[0],s[1],s[2]);case 4:return new n(s[0],s[1],s[2],s[3]);case 5:return new n(s[0],s[1],s[2],s[3],s[4]);case 6:return new n(s[0],s[1],s[2],s[3],s[4],s[5]);case 7:return new n(s[0],s[1],s[2],s[3],s[4],s[5],s[6])}var a=ku(n.prototype),e=n.apply(a,s);return ti(e)?e:a}}function Yt(n,s,a){function e(){for(var o=arguments.length,p=ar(o),i=o,l=wo(e);i--;)p[i]=arguments[i];var r=o<3&&p[0]!==l&&p[o-1]!==l?[]:G(p,l);return(o-=r.length)<a?po(n,s,Xt,e.placeholder,tn,p,r,tn,tn,a-o):c(this&&this!==Aa&&this instanceof e?t:n,this,p)}var t=Gt(n);return e}function Kt(n){return function(s,a,e){var t=cr(s);if(!$c(s)){var o=xo(a,3);s=Wi(s),a=function(n){return o(t[n],n,t)}}var p=n(s,a,e);return p>-1?t[o?s[p]:p]:tn}}function Qt(n){return go(function(s){var a=s.length,e=a,o=t.prototype.thru;for(n&&s.reverse();e--;){var p=s[e];if("function"!=typeof p)throw new rr(cn);if(o&&!c&&"wrapper"==yo(p))var c=new t([],!0)}for(e=c?e:a;++e<a;){p=s[e];var i=yo(p),l="wrapper"==i?ju(p):tn;c=l&&zo(l[0])&&l[1]==(qn|yn|xn|Tn)&&!l[4].length&&1==l[9]?c[yo(l[0])].apply(c,l[3]):1==p.length&&zo(p)?c[i]():c.thru(p)}return function(){var n=arguments,e=n[0];if(c&&1==n.length&&bd(e))return c.plant(e).value();for(var t=0,o=a?s[t].apply(this,n):e;++t<a;)o=s[t].call(this,o);return o}})}function Xt(n,s,a,e,t,o,p,c,i,l){function r(){for(var g=arguments.length,f=ar(g),v=g;v--;)f[v]=arguments[v];if(h)var y=wo(r),w=W(f,y);if(e&&(f=Nt(f,e,t,h)),o&&(f=Rt(f,o,p,h)),g-=w,h&&g<l){var x=G(f,y);return po(n,s,Xt,r.placeholder,a,f,x,c,i,l-g)}var j=d?a:this,q=k?j[n]:n;return g=f.length,c?f=Yo(f,c):m&&g>1&&f.reverse(),u&&i<g&&(f.length=i),this&&this!==Aa&&this instanceof r&&(q=b||Gt(q)),q.apply(j,f)}var u=s&qn,d=s&gn,k=s&fn,h=s&(yn|wn),m=s&Sn,b=k?tn:Gt(n);return r}function Zt(n,s){return function(a,e){return qe(a,n,s(e),{})}}function no(n,s){return function(a,e){var t;if(a===tn&&e===tn)return s;if(a!==tn&&(t=a),e!==tn){if(t===tn)return e;"string"==typeof a||"string"==typeof e?(a=kt(a),e=kt(e)):(a=dt(a),e=dt(e)),t=n(a,e)}return t}}function so(n){return go(function(s){return s=m(s,N(xo())),at(function(a){var e=this;return n(s,function(n){return c(n,e,a)})})})}function ao(n,s){s=s===tn?" ":kt(s);var a=s.length;if(a<2)return a?st(s,n):s;var e=st(s,Lr(n/Z(s)));return H(s)?qt(nn(e),0,n).join(""):e.slice(0,n)}function eo(n,s,a,e){function t(){for(var s=-1,i=arguments.length,l=-1,r=e.length,u=ar(r+i),d=this&&this!==Aa&&this instanceof t?p:n;++l<r;)u[l]=e[l];for(;i--;)u[l++]=arguments[++s];return c(d,o?a:this,u)}var o=s&gn,p=Gt(n);return t}function to(n){return function(s,a,e){return e&&"number"!=typeof e&&Ro(s,a,e)&&(a=e=tn),s=wi(s),a===tn?(a=s,s=0):a=wi(a),e=e===tn?s<a?1:-1:wi(e),nt(s,a,e,n)}}function oo(n){return function(s,a){return"string"==typeof s&&"string"==typeof a||(s=qi(s),a=qi(a)),n(s,a)}}function po(n,s,a,e,t,o,p,c,i,l){var r=s&yn,u=r?p:tn,d=r?tn:p,k=r?o:tn,h=r?tn:o;s|=r?xn:jn,(s&=~(r?jn:xn))&vn||(s&=~(gn|fn));var m=[n,s,t,k,u,h,d,c,i,l],b=a.apply(tn,m);return zo(n)&&Cu(b,m),b.placeholder=e,Ko(b,n,s)}function co(n){var s=pr[n];return function(n,a){if(n=qi(n),a=null==a?0:$r(xi(a),292)){var e=(_i(n)+"e").split("e");return e=(_i(s(e[0]+"e"+(+e[1]+a)))+"e").split("e"),+(e[0]+"e"+(+e[1]-a))}return s(n)}}function io(n){return function(s){var a=Su(s);return a==Kn?$(s):a==as?K(s):D(s,n(s))}}function lo(n,s,a,e,t,o,p,c){var i=s&fn;if(!i&&"function"!=typeof n)throw new rr(cn);var l=e?e.length:0;if(l||(s&=~(xn|jn),e=t=tn),p=p===tn?p:Jr(xi(p),0),c=c===tn?c:xi(c),l-=t?t.length:0,s&jn){var r=e,u=t;e=t=tn}var d=i?tn:ju(n),k=[n,s,a,e,t,r,u,o,p,c];if(d&&Fo(k,d),n=k[0],s=k[1],a=k[2],e=k[3],t=k[4],c=k[9]=k[9]===tn?i?0:n.length:Jr(k[9]-l,0),!c&&s&(yn|wn)&&(s&=~(yn|wn)),s&&s!=gn)h=s==yn||s==wn?Yt(n,s,c):s!=xn&&s!=(gn|xn)||t.length?Xt.apply(tn,k):eo(n,s,a,e);else var h=Jt(n,s,a);return Ko((d?fu:Cu)(h,k),n,s)}function ro(n,s,a,e){return n===tn||Jc(n,kr[a])&&!br.call(e,a)?s:n}function uo(n,s,a,e,t,o){return ti(n)&&ti(s)&&(o.set(s,n),Fe(n,s,tn,uo,o),o.delete(s)),n}function ko(n){return ki(n)?tn:n}function ho(n,s,a,e,t,o){var p=a&mn,c=n.length,i=s.length;if(c!=i&&!(p&&i>c))return!1;var l=o.get(n);if(l&&o.get(s))return l==s;var r=-1,u=!0,d=a&bn?new ga:tn;for(o.set(n,s),o.set(s,n);++r<c;){var k=n[r],h=s[r];if(e)var m=p?e(h,k,r,s,n,o):e(k,h,r,n,s,o);if(m!==tn){if(m)continue;u=!1;break}if(d){if(!v(s,function(n,s){if(!O(d,s)&&(k===n||t(k,n,a,e,o)))return d.push(s)})){u=!1;break}}else if(k!==h&&!t(k,h,a,e,o)){u=!1;break}}return o.delete(n),o.delete(s),u}function mo(n,s,a,e,t,o,p){switch(a){case ls:if(n.byteLength!=s.byteLength||n.byteOffset!=s.byteOffset)return!1;n=n.buffer,s=s.buffer;case is:return!(n.byteLength!=s.byteLength||!o(new Tr(n),new Tr(s)));case Fn:case Jn:case Qn:return Jc(+n,+s);case Vn:return n.name==s.name&&n.message==s.message;case ss:case es:return n==s+"";case Kn:var c=$;case as:var i=e&mn;if(c||(c=Y),n.size!=s.size&&!i)return!1;var l=p.get(n);if(l)return l==s;e|=bn,p.set(n,s);var r=ho(c(n),c(s),e,t,o,p);return p.delete(n),r;case ts:if(uu)return uu.call(n)==uu.call(s)}return!1}function bo(n,s,a,e,t,o){var p=a&mn,c=fo(n),i=c.length;if(i!=fo(s).length&&!p)return!1;for(var l=i;l--;){var r=c[l];if(!(p?r in s:br.call(s,r)))return!1}var u=o.get(n);if(u&&o.get(s))return u==s;var d=!0;o.set(n,s),o.set(s,n);for(var k=p;++l<i;){r=c[l];var h=n[r],m=s[r];if(e)var b=p?e(m,h,r,s,n,o):e(h,m,r,n,s,o);if(!(b===tn?h===m||t(h,m,a,e,o):b)){d=!1;break}k||(k="constructor"==r)}if(d&&!k){var g=n.constructor,f=s.constructor;g!=f&&"constructor"in n&&"constructor"in s&&!("function"==typeof g&&g instanceof g&&"function"==typeof f&&f instanceof f)&&(d=!1)}return o.delete(n),o.delete(s),d}function go(n){return Eu(Vo(n,tn,kp),n+"")}function fo(n){return ge(n,Wi,qu)}function vo(n){return ge(n,Ui,Tu)}function yo(n){for(var s=n.name+"",a=tu[s],e=br.call(tu,s)?a.length:0;e--;){var t=a[e],o=t.func;if(null==o||o==n)return t.name}return s}function wo(n){return(br.call(a,"placeholder")?a:n).placeholder}function xo(){var n=a.iteratee||Ml;return n=n===Ml?Oe:n,arguments.length?n(arguments[0],arguments[1]):n}function jo(n,s){var a=n.__data__;return Lo(s)?a["string"==typeof s?"string":"hash"]:a.map}function qo(n){for(var s=Wi(n),a=s.length;a--;){var e=s[a],t=n[e];s[a]=[e,t,Bo(t)]}return s}function To(n,s){var a=B(n,s);return Ae(a)?a:tn}function So(n){var s=br.call(n,Ar),a=n[Ar];try{n[Ar]=tn;var e=!0}catch(n){}var t=vr.call(n);return e&&(s?n[Ar]=a:delete n[Ar]),t}function _o(n,s,a){for(var e=-1,t=a.length;++e<t;){var o=a[e],p=o.size;switch(o.type){case"drop":n+=p;break;case"dropRight":s-=p;break;case"take":s=$r(s,n+p);break;case"takeRight":n=Jr(n,s-p)}}return{start:n,end:s}}function Co(n){var s=n.match(zs);return s?s[1].split(Ws):[]}function Po(n,s,a){s=jt(s,n);for(var e=-1,t=s.length,o=!1;++e<t;){var p=Zo(s[e]);if(!(o=null!=n&&a(n,p)))break;n=n[p]}return o||++e!=t?o:!!(t=null==n?0:n.length)&&ei(t)&&No(p,t)&&(bd(n)||md(n))}function Eo(n){var s=n.length,a=n.constructor(s);return s&&"string"==typeof n[0]&&br.call(n,"index")&&(a.index=n.index,a.input=n.input),a}function Mo(n){return"function"!=typeof n.constructor||Uo(n)?{}:ku(_r(n))}function Io(n,s,a,e){var t=n.constructor;switch(s){case is:return St(n);case Fn:case Jn:return new t(+n);case ls:return _t(n,e);case rs:case us:case ds:case ks:case hs:case ms:case bs:case gs:case fs:return It(n,e);case Kn:return Ct(n,e,a);case Qn:case es:return new t(n);case ss:return Pt(n);case as:return Et(n,e,a);case ts:return Mt(n)}}function Ao(n,s){var a=s.length;if(!a)return n;var e=a-1;return s[e]=(a>1?"& ":"")+s[e],s=s.join(a>2?", ":" "),n.replace(Ls,"{\n/* [wrapped with "+s+"] */\n")}function Do(n){return bd(n)||md(n)||!!(Mr&&n&&n[Mr])}function No(n,s){return!!(s=null==s?Dn:s)&&("number"==typeof n||Ys.test(n))&&n>-1&&n%1==0&&n<s}function Ro(n,s,a){if(!ti(a))return!1;var e=typeof s;return!!("number"==e?$c(a)&&No(s,a.length):"string"==e&&s in a)&&Jc(a[s],n)}function Oo(n,s){if(bd(n))return!1;var a=typeof n;return!("number"!=a&&"symbol"!=a&&"boolean"!=a&&null!=n&&!bi(n))||(Es.test(n)||!Ps.test(n)||null!=s&&n in cr(s))}function Lo(n){var s=typeof n;return"string"==s||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==n:null===n}function zo(n){var s=yo(n),e=a[s];if("function"!=typeof e||!(s in y.prototype))return!1;if(n===e)return!0;var t=ju(e);return!!t&&n===t[0]}function Wo(n){return!!fr&&fr in n}function Uo(n){var s=n&&n.constructor;return n===("function"==typeof s&&s.prototype||kr)}function Bo(n){return n===n&&!ti(n)}function Ho(n,s){return function(a){return null!=a&&(a[n]===s&&(s!==tn||n in cr(a)))}}function Fo(n,s){var a=n[1],e=s[1],t=a|e,o=t<(gn|fn|qn),p=e==qn&&a==yn||e==qn&&a==Tn&&n[7].length<=s[8]||e==(qn|Tn)&&s[7].length<=s[8]&&a==yn;if(!o&&!p)return n;e&gn&&(n[2]=s[2],t|=a&gn?0:vn);var c=s[3];if(c){var i=n[3];n[3]=i?Nt(i,c,s[4]):c,n[4]=i?G(n[3],un):s[4]}return c=s[5],c&&(i=n[5],n[5]=i?Rt(i,c,s[6]):c,n[6]=i?G(n[5],un):s[6]),c=s[7],c&&(n[7]=c),e&qn&&(n[8]=null==n[8]?s[8]:$r(n[8],s[8])),null==n[9]&&(n[9]=s[9]),n[0]=s[0],n[1]=t,n}function Jo(n){var s=[];if(null!=n)for(var a in cr(n))s.push(a);return s}function $o(n){return vr.call(n)}function Vo(n,s,a){return s=Jr(s===tn?n.length-1:s,0),function(){for(var e=arguments,t=-1,o=Jr(e.length-s,0),p=ar(o);++t<o;)p[t]=e[s+t];t=-1;for(var i=ar(s+1);++t<s;)i[t]=e[t];return i[s]=a(p),c(n,this,i)}}function Go(n,s){return s.length<2?n:be(n,ct(s,0,-1))}function Yo(n,s){for(var a=n.length,e=$r(s.length,a),t=Ot(n);e--;){var o=s[e];n[e]=No(o,a)?t[o]:tn}return n}function Ko(n,s,a){var e=s+"";return Eu(n,Ao(e,sp(Co(e),a)))}function Qo(n){var s=0,a=0;return function(){var e=Vr(),t=En-(e-a);if(a=e,t>0){if(++s>=Pn)return arguments[0]}else s=0;return n.apply(tn,arguments)}}function Xo(n,s){var a=-1,e=n.length,t=e-1;for(s=s===tn?e:s;++a<s;){var o=Ze(a,t),p=n[o];n[o]=n[a],n[a]=p}return n.length=s,n}function Zo(n){if("string"==typeof n||bi(n))return n;var s=n+"";return"0"==s&&1/n==-An?"-0":s}function np(n){if(null!=n){try{return mr.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function sp(n,s){return l(Wn,function(a){var e="_."+a[0];s&a[1]&&!k(n,e)&&n.push(e)}),n.sort()}function ap(n){if(n instanceof y)return n.clone();var s=new t(n.__wrapped__,n.__chain__);return s.__actions__=Ot(n.__actions__),s.__index__=n.__index__,s.__values__=n.__values__,s}function ep(n,s,a){s=(a?Ro(n,s,a):s===tn)?1:Jr(xi(s),0);var e=null==n?0:n.length;if(!e||s<1)return[];for(var t=0,o=0,p=ar(Lr(e/s));t<e;)p[o++]=ct(n,t,t+=s);return p}function tp(n){for(var s=-1,a=null==n?0:n.length,e=0,t=[];++s<a;){var o=n[s];o&&(t[e++]=o)}return t}function op(){var n=arguments.length;if(!n)return[];for(var s=ar(n-1),a=arguments[0],e=n;e--;)s[e-1]=arguments[e];return b(bd(a)?Ot(a):[a],de(s,1))}function pp(n,s,a){var e=null==n?0:n.length;return e?(s=a||s===tn?1:xi(s),ct(n,s<0?0:s,e)):[]}function cp(n,s,a){var e=null==n?0:n.length;return e?(s=a||s===tn?1:xi(s),s=e-s,ct(n,0,s<0?0:s)):[]}function ip(n,s){return n&&n.length?gt(n,xo(s,3),!0,!0):[]}function lp(n,s){return n&&n.length?gt(n,xo(s,3),!0):[]}function rp(n,s,a,e){var t=null==n?0:n.length;return t?(a&&"number"!=typeof a&&Ro(n,s,a)&&(a=0,e=t),re(n,s,a,e)):[]}function up(n,s,a){var e=null==n?0:n.length;if(!e)return-1;var t=null==a?0:xi(a);return t<0&&(t=Jr(e+t,0)),j(n,xo(s,3),t)}function dp(n,s,a){var e=null==n?0:n.length;if(!e)return-1;var t=e-1;return a!==tn&&(t=xi(a),t=a<0?Jr(e+t,0):$r(t,e-1)),j(n,xo(s,3),t,!0)}function kp(n){return(null==n?0:n.length)?de(n,1):[]}function hp(n){return(null==n?0:n.length)?de(n,An):[]}function mp(n,s){return(null==n?0:n.length)?(s=s===tn?1:xi(s),de(n,s)):[]}function bp(n){for(var s=-1,a=null==n?0:n.length,e={};++s<a;){var t=n[s];e[t[0]]=t[1]}return e}function gp(n){return n&&n.length?n[0]:tn}function fp(n,s,a){var e=null==n?0:n.length;if(!e)return-1;var t=null==a?0:xi(a);return t<0&&(t=Jr(e+t,0)),q(n,s,t)}function vp(n){return(null==n?0:n.length)?ct(n,0,-1):[]}function yp(n,s){return null==n?"":Hr.call(n,s)}function wp(n){var s=null==n?0:n.length;return s?n[s-1]:tn}function xp(n,s,a){var e=null==n?0:n.length;if(!e)return-1;var t=e;return a!==tn&&(t=xi(a),t=t<0?Jr(e+t,0):$r(t,e-1)),s===s?X(n,s,t):j(n,S,t,!0)}function jp(n,s){return n&&n.length?$e(n,xi(s)):tn}function qp(n,s){return n&&n.length&&s&&s.length?Qe(n,s):n}function Tp(n,s,a){return n&&n.length&&s&&s.length?Qe(n,s,xo(a,2)):n}function Sp(n,s,a){return n&&n.length&&s&&s.length?Qe(n,s,tn,a):n}function _p(n,s){var a=[];if(!n||!n.length)return a;var e=-1,t=[],o=n.length;for(s=xo(s,3);++e<o;){var p=n[e];s(p,e,n)&&(a.push(p),t.push(e))}return Xe(n,t),a}function Cp(n){return null==n?n:Kr.call(n)}function Pp(n,s,a){var e=null==n?0:n.length;return e?(a&&"number"!=typeof a&&Ro(n,s,a)?(s=0,a=e):(s=null==s?0:xi(s),a=a===tn?e:xi(a)),ct(n,s,a)):[]}function Ep(n,s){return lt(n,s)}function Mp(n,s,a){return rt(n,s,xo(a,2))}function Ip(n,s){var a=null==n?0:n.length;if(a){var e=lt(n,s);if(e<a&&Jc(n[e],s))return e}return-1}function Ap(n,s){return lt(n,s,!0)}function Dp(n,s,a){return rt(n,s,xo(a,2),!0)}function Np(n,s){if(null==n?0:n.length){var a=lt(n,s,!0)-1;if(Jc(n[a],s))return a}return-1}function Rp(n){return n&&n.length?ut(n):[]}function Op(n,s){return n&&n.length?ut(n,xo(s,2)):[]}function Lp(n){var s=null==n?0:n.length;return s?ct(n,1,s):[]}function zp(n,s,a){return n&&n.length?(s=a||s===tn?1:xi(s),ct(n,0,s<0?0:s)):[]}function Wp(n,s,a){var e=null==n?0:n.length;return e?(s=a||s===tn?1:xi(s),s=e-s,ct(n,s<0?0:s,e)):[]}function Up(n,s){return n&&n.length?gt(n,xo(s,3),!1,!0):[]}function Bp(n,s){return n&&n.length?gt(n,xo(s,3)):[]}function Hp(n){return n&&n.length?ht(n):[]}function Fp(n,s){return n&&n.length?ht(n,xo(s,2)):[]}function Jp(n,s){return s="function"==typeof s?s:tn,n&&n.length?ht(n,tn,s):[]}function $p(n){if(!n||!n.length)return[];var s=0;return n=d(n,function(n){if(Vc(n))return s=Jr(n.length,s),!0}),A(s,function(s){return m(n,C(s))})}function Vp(n,s){if(!n||!n.length)return[];var a=$p(n);return null==s?a:m(a,function(n){return c(s,tn,n)})}function Gp(n,s){return yt(n||[],s||[],Ja)}function Yp(n,s){return yt(n||[],s||[],ot)}function Kp(n){var s=a(n);return s.__chain__=!0,s}function Qp(n,s){return s(n),n}function Xp(n,s){return s(n)}function Zp(){return Kp(this)}function nc(){return new t(this.value(),this.__chain__)}function sc(){this.__values__===tn&&(this.__values__=yi(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?tn:this.__values__[this.__index__++]}}function ac(){return this}function ec(n){for(var s,a=this;a instanceof e;){var t=ap(a);t.__index__=0,t.__values__=tn,s?o.__wrapped__=t:s=t;var o=t;a=a.__wrapped__}return o.__wrapped__=n,s}function tc(){var n=this.__wrapped__;if(n instanceof y){var s=n;return this.__actions__.length&&(s=new y(this)),s=s.reverse(),s.__actions__.push({func:Xp,args:[Cp],thisArg:tn}),new t(s,this.__chain__)}return this.thru(Cp)}function oc(){return ft(this.__wrapped__,this.__actions__)}function pc(n,s,a){var e=bd(n)?u:ie;return a&&Ro(n,s,a)&&(s=tn),e(n,xo(s,3))}function cc(n,s){return(bd(n)?d:ue)(n,xo(s,3))}function ic(n,s){return de(hc(n,s),1)}function lc(n,s){return de(hc(n,s),An)}function rc(n,s,a){return a=a===tn?1:xi(a),de(hc(n,s),a)}function uc(n,s){return(bd(n)?l:hu)(n,xo(s,3))}function dc(n,s){return(bd(n)?r:mu)(n,xo(s,3))}function kc(n,s,a,e){n=$c(n)?n:Zi(n),a=a&&!e?xi(a):0;var t=n.length;return a<0&&(a=Jr(t+a,0)),mi(n)?a<=t&&n.indexOf(s,a)>-1:!!t&&q(n,s,a)>-1}function hc(n,s){return(bd(n)?m:Ue)(n,xo(s,3))}function mc(n,s,a,e){return null==n?[]:(bd(s)||(s=null==s?[]:[s]),a=e?tn:a,bd(a)||(a=null==a?[]:[a]),Ve(n,s,a))}function bc(n,s,a){var e=bd(n)?g:E,t=arguments.length<3;return e(n,xo(s,4),a,t,hu)}function gc(n,s,a){var e=bd(n)?f:E,t=arguments.length<3;return e(n,xo(s,4),a,t,mu)}function fc(n,s){return(bd(n)?d:ue)(n,Ic(xo(s,3)))}function vc(n){return(bd(n)?Da:et)(n)}function yc(n,s,a){return s=(a?Ro(n,s,a):s===tn)?1:xi(s),(bd(n)?Na:tt)(n,s)}function wc(n){return(bd(n)?Oa:pt)(n)}function xc(n){if(null==n)return 0;if($c(n))return mi(n)?Z(n):n.length;var s=Su(n);return s==Kn||s==as?n.size:Le(n).length}function jc(n,s,a){var e=bd(n)?v:it;return a&&Ro(n,s,a)&&(s=tn),e(n,xo(s,3))}function qc(n,s){if("function"!=typeof s)throw new rr(cn);return n=xi(n),function(){if(--n<1)return s.apply(this,arguments)}}function Tc(n,s,a){return s=a?tn:s,s=n&&null==s?n.length:s,lo(n,qn,tn,tn,tn,tn,s)}function Sc(n,s){var a;if("function"!=typeof s)throw new rr(cn);return n=xi(n),function(){return--n>0&&(a=s.apply(this,arguments)),n<=1&&(s=tn),a}}function _c(n,s,a){s=a?tn:s;var e=lo(n,yn,tn,tn,tn,tn,tn,s);return e.placeholder=_c.placeholder,e}function Cc(n,s,a){s=a?tn:s;var e=lo(n,wn,tn,tn,tn,tn,tn,s);return e.placeholder=Cc.placeholder,e}function Pc(n,s,a){function e(s){var a=d,e=k;return d=k=tn,f=s,m=n.apply(e,a)}function t(n){return f=n,b=Pu(c,s),v?e(n):m}function o(n){var a=n-g,e=n-f,t=s-a;return y?$r(t,h-e):t}function p(n){var a=n-g,e=n-f;return g===tn||a>=s||a<0||y&&e>=h}function c(){var n=td();if(p(n))return i(n);b=Pu(c,o(n))}function i(n){return b=tn,w&&d?e(n):(d=k=tn,m)}function l(){b!==tn&&wu(b),f=0,d=g=k=b=tn}function r(){return b===tn?m:i(td())}function u(){var n=td(),a=p(n);if(d=arguments,k=this,g=n,a){if(b===tn)return t(g);if(y)return b=Pu(c,s),e(g)}return b===tn&&(b=Pu(c,s)),m}var d,k,h,m,b,g,f=0,v=!1,y=!1,w=!0;if("function"!=typeof n)throw new rr(cn);return s=qi(s)||0,ti(a)&&(v=!!a.leading,y="maxWait"in a,h=y?Jr(qi(a.maxWait)||0,s):h,w="trailing"in a?!!a.trailing:w),u.cancel=l,u.flush=r,u}function Ec(n){return lo(n,Sn)}function Mc(n,s){if("function"!=typeof n||null!=s&&"function"!=typeof s)throw new rr(cn);var a=function(){var e=arguments,t=s?s.apply(this,e):e[0],o=a.cache;if(o.has(t))return o.get(t);var p=n.apply(this,e);return a.cache=o.set(t,p)||o,p};return a.cache=new(Mc.Cache||la),a}function Ic(n){if("function"!=typeof n)throw new rr(cn);return function(){var s=arguments;switch(s.length){case 0:return!n.call(this);case 1:return!n.call(this,s[0]);case 2:return!n.call(this,s[0],s[1]);case 3:return!n.call(this,s[0],s[1],s[2])}return!n.apply(this,s)}}function Ac(n){return Sc(2,n)}function Dc(n,s){if("function"!=typeof n)throw new rr(cn);return s=s===tn?s:xi(s),at(n,s)}function Nc(n,s){if("function"!=typeof n)throw new rr(cn);return s=null==s?0:Jr(xi(s),0),at(function(a){var e=a[s],t=qt(a,0,s);return e&&b(t,e),c(n,this,t)})}function Rc(n,s,a){var e=!0,t=!0;if("function"!=typeof n)throw new rr(cn);return ti(a)&&(e="leading"in a?!!a.leading:e,t="trailing"in a?!!a.trailing:t),Pc(n,s,{leading:e,maxWait:s,trailing:t})}function Oc(n){return Tc(n,1)}function Lc(n,s){return rd(xt(s),n)}function zc(){if(!arguments.length)return[];var n=arguments[0];return bd(n)?n:[n]}function Wc(n){return ee(n,hn)}function Uc(n,s){return s="function"==typeof s?s:tn,ee(n,hn,s)}function Bc(n){return ee(n,dn|hn)}function Hc(n,s){return s="function"==typeof s?s:tn,ee(n,dn|hn,s)}function Fc(n,s){return null==s||oe(n,s,Wi(s))}function Jc(n,s){return n===s||n!==n&&s!==s}function $c(n){return null!=n&&ei(n.length)&&!si(n)}function Vc(n){return oi(n)&&$c(n)}function Gc(n){return!0===n||!1===n||oi(n)&&fe(n)==Fn}function Yc(n){return oi(n)&&1===n.nodeType&&!ki(n)}function Kc(n){if(null==n)return!0;if($c(n)&&(bd(n)||"string"==typeof n||"function"==typeof n.splice||fd(n)||jd(n)||md(n)))return!n.length;var s=Su(n);if(s==Kn||s==as)return!n.size;if(Uo(n))return!Le(n).length;for(var a in n)if(br.call(n,a))return!1;return!0}function Qc(n,s){return Pe(n,s)}function Xc(n,s,a){a="function"==typeof a?a:tn;var e=a?a(n,s):tn;return e===tn?Pe(n,s,tn,a):!!e}function Zc(n){if(!oi(n))return!1;var s=fe(n);return s==Vn||s==$n||"string"==typeof n.message&&"string"==typeof n.name&&!ki(n)}function ni(n){return"number"==typeof n&&Br(n)}function si(n){if(!ti(n))return!1;var s=fe(n);return s==Gn||s==Yn||s==Hn||s==ns}function ai(n){return"number"==typeof n&&n==xi(n)}function ei(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=Dn}function ti(n){var s=typeof n;return null!=n&&("object"==s||"function"==s)}function oi(n){return null!=n&&"object"==typeof n}function pi(n,s){return n===s||Ie(n,s,qo(s))}function ci(n,s,a){return a="function"==typeof a?a:tn,Ie(n,s,qo(s),a)}function ii(n){return di(n)&&n!=+n}function li(n){if(_u(n))throw new tr(pn);return Ae(n)}function ri(n){return null===n}function ui(n){return null==n}function di(n){return"number"==typeof n||oi(n)&&fe(n)==Qn}function ki(n){if(!oi(n)||fe(n)!=Zn)return!1;var s=_r(n);if(null===s)return!0;var a=br.call(s,"constructor")&&s.constructor;return"function"==typeof a&&a instanceof a&&mr.call(a)==yr}function hi(n){return ai(n)&&n>=-Dn&&n<=Dn}function mi(n){return"string"==typeof n||!bd(n)&&oi(n)&&fe(n)==es}function bi(n){return"symbol"==typeof n||oi(n)&&fe(n)==ts}function gi(n){return n===tn}function fi(n){return oi(n)&&Su(n)==ps}function vi(n){return oi(n)&&fe(n)==cs}function yi(n){if(!n)return[];if($c(n))return mi(n)?nn(n):Ot(n);if(Ir&&n[Ir])return J(n[Ir]());var s=Su(n);return(s==Kn?$:s==as?Y:Zi)(n)}function wi(n){if(!n)return 0===n?n:0;if((n=qi(n))===An||n===-An){return(n<0?-1:1)*Nn}return n===n?n:0}function xi(n){var s=wi(n),a=s%1;return s===s?a?s-a:s:0}function ji(n){return n?ae(xi(n),0,On):0}function qi(n){if("number"==typeof n)return n;if(bi(n))return Rn;if(ti(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=ti(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(Ns,"");var a=$s.test(n);return a||Gs.test(n)?Ea(n.slice(2),a?2:8):Js.test(n)?Rn:+n}function Ti(n){return Lt(n,Ui(n))}function Si(n){return n?ae(xi(n),-Dn,Dn):0===n?n:0}function _i(n){return null==n?"":kt(n)}function Ci(n,s){var a=ku(n);return null==s?a:Xa(a,s)}function Pi(n,s){return x(n,xo(s,3),ke)}function Ei(n,s){return x(n,xo(s,3),he)}function Mi(n,s){return null==n?n:bu(n,xo(s,3),Ui)}function Ii(n,s){return null==n?n:gu(n,xo(s,3),Ui)}function Ai(n,s){return n&&ke(n,xo(s,3))}function Di(n,s){return n&&he(n,xo(s,3))}function Ni(n){return null==n?[]:me(n,Wi(n))}function Ri(n){return null==n?[]:me(n,Ui(n))}function Oi(n,s,a){var e=null==n?tn:be(n,s);return e===tn?a:e}function Li(n,s){return null!=n&&Po(n,s,ye)}function zi(n,s){return null!=n&&Po(n,s,we)}function Wi(n){return $c(n)?Ia(n):Le(n)}function Ui(n){return $c(n)?Ia(n,!0):ze(n)}function Bi(n,s){var a={};return s=xo(s,3),ke(n,function(n,e,t){ne(a,s(n,e,t),n)}),a}function Hi(n,s){var a={};return s=xo(s,3),ke(n,function(n,e,t){ne(a,e,s(n,e,t))}),a}function Fi(n,s){return Ji(n,Ic(xo(s)))}function Ji(n,s){if(null==n)return{};var a=m(vo(n),function(n){return[n]});return s=xo(s),Ye(n,a,function(n,a){return s(n,a[0])})}function $i(n,s,a){s=jt(s,n);var e=-1,t=s.length;for(t||(t=1,n=tn);++e<t;){var o=null==n?tn:n[Zo(s[e])];o===tn&&(e=t,o=a),n=si(o)?o.call(n):o}return n}function Vi(n,s,a){return null==n?n:ot(n,s,a)}function Gi(n,s,a,e){return e="function"==typeof e?e:tn,null==n?n:ot(n,s,a,e)}function Yi(n,s,a){var e=bd(n),t=e||fd(n)||jd(n);if(s=xo(s,4),null==a){var o=n&&n.constructor;a=t?e?new o:[]:ti(n)&&si(o)?ku(_r(n)):{}}return(t?l:ke)(n,function(n,e,t){return s(a,n,e,t)}),a}function Ki(n,s){return null==n||mt(n,s)}function Qi(n,s,a){return null==n?n:bt(n,s,xt(a))}function Xi(n,s,a,e){return e="function"==typeof e?e:tn,null==n?n:bt(n,s,xt(a),e)}function Zi(n){return null==n?[]:R(n,Wi(n))}function nl(n){return null==n?[]:R(n,Ui(n))}function sl(n,s,a){return a===tn&&(a=s,s=tn),a!==tn&&(a=qi(a),a=a===a?a:0),s!==tn&&(s=qi(s),s=s===s?s:0),ae(qi(n),s,a)}function al(n,s,a){return s=wi(s),a===tn?(a=s,s=0):a=wi(a),n=qi(n),xe(n,s,a)}function el(n,s,a){if(a&&"boolean"!=typeof a&&Ro(n,s,a)&&(s=a=tn),a===tn&&("boolean"==typeof s?(a=s,s=tn):"boolean"==typeof n&&(a=n,n=tn)),n===tn&&s===tn?(n=0,s=1):(n=wi(n),s===tn?(s=n,n=0):s=wi(s)),n>s){var e=n;n=s,s=e}if(a||n%1||s%1){var t=Yr();return $r(n+t*(s-n+Pa("1e-"+((t+"").length-1))),s)}return Ze(n,s)}function tl(n){return Yd(_i(n).toLowerCase())}function ol(n){return(n=_i(n))&&n.replace(Ks,$a).replace(ba,"")}function pl(n,s,a){n=_i(n),s=kt(s);var e=n.length;a=a===tn?e:ae(xi(a),0,e);var t=a;return(a-=s.length)>=0&&n.slice(a,t)==s}function cl(n){return n=_i(n),n&&Ts.test(n)?n.replace(js,Va):n}function il(n){return n=_i(n),n&&Ds.test(n)?n.replace(As,"\\$&"):n}function ll(n,s,a){n=_i(n),s=xi(s);var e=s?Z(n):0;if(!s||e>=s)return n;var t=(s-e)/2;return ao(zr(t),a)+n+ao(Lr(t),a)}function rl(n,s,a){n=_i(n),s=xi(s);var e=s?Z(n):0;return s&&e<s?n+ao(s-e,a):n}function ul(n,s,a){n=_i(n),s=xi(s);var e=s?Z(n):0;return s&&e<s?ao(s-e,a)+n:n}function dl(n,s,a){return a||null==s?s=0:s&&(s=+s),Gr(_i(n).replace(Rs,""),s||0)}function kl(n,s,a){return s=(a?Ro(n,s,a):s===tn)?1:xi(s),st(_i(n),s)}function hl(){var n=arguments,s=_i(n[0]);return n.length<3?s:s.replace(n[1],n[2])}function ml(n,s,a){return a&&"number"!=typeof a&&Ro(n,s,a)&&(s=a=tn),(a=a===tn?On:a>>>0)?(n=_i(n),n&&("string"==typeof s||null!=s&&!wd(s))&&!(s=kt(s))&&H(n)?qt(nn(n),0,a):n.split(s,a)):[]}function bl(n,s,a){return n=_i(n),a=null==a?0:ae(xi(a),0,n.length),s=kt(s),n.slice(a,a+s.length)==s}function gl(n,s,e){var t=a.templateSettings;e&&Ro(n,s,e)&&(s=tn),n=_i(n),s=Cd({},s,t,ro);var o,p,c=Cd({},s.imports,t.imports,ro),i=Wi(c),l=R(c,i),r=0,u=s.interpolate||Qs,d="__p += '",k=ir((s.escape||Qs).source+"|"+u.source+"|"+(u===Cs?Hs:Qs).source+"|"+(s.evaluate||Qs).source+"|$","g"),h="//# sourceURL="+("sourceURL"in s?s.sourceURL:"lodash.templateSources["+ ++xa+"]")+"\n";n.replace(k,function(s,a,e,t,c,i){return e||(e=t),d+=n.slice(r,i).replace(Xs,U),a&&(o=!0,d+="' +\n__e("+a+") +\n'"),c&&(p=!0,d+="';\n"+c+";\n__p += '"),e&&(d+="' +\n((__t = ("+e+")) == null ? '' : __t) +\n'"),r=i+s.length,s}),d+="';\n";var m=s.variable;m||(d="with (obj) {\n"+d+"\n}\n"),d=(p?d.replace(vs,""):d).replace(ys,"$1").replace(ws,"$1;"),d="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(p?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var b=Kd(function(){return or(i,h+"return "+d).apply(tn,l)});if(b.source=d,Zc(b))throw b;return b}function fl(n){return _i(n).toLowerCase()}function vl(n){return _i(n).toUpperCase()}function yl(n,s,a){if((n=_i(n))&&(a||s===tn))return n.replace(Ns,"");if(!n||!(s=kt(s)))return n;var e=nn(n),t=nn(s);return qt(e,L(e,t),z(e,t)+1).join("")}function wl(n,s,a){if((n=_i(n))&&(a||s===tn))return n.replace(Os,"");if(!n||!(s=kt(s)))return n;var e=nn(n);return qt(e,0,z(e,nn(s))+1).join("")}function xl(n,s,a){if((n=_i(n))&&(a||s===tn))return n.replace(Rs,"");if(!n||!(s=kt(s)))return n;var e=nn(n);return qt(e,L(e,nn(s))).join("")}function jl(n,s){var a=_n,e=Cn;if(ti(s)){var t="separator"in s?s.separator:t;a="length"in s?xi(s.length):a,e="omission"in s?kt(s.omission):e}n=_i(n);var o=n.length;if(H(n)){var p=nn(n);o=p.length}if(a>=o)return n;var c=a-Z(e);if(c<1)return e;var i=p?qt(p,0,c).join(""):n.slice(0,c);if(t===tn)return i+e;if(p&&(c+=i.length-c),wd(t)){if(n.slice(c).search(t)){var l,r=i;for(t.global||(t=ir(t.source,_i(Fs.exec(t))+"g")),t.lastIndex=0;l=t.exec(r);)var u=l.index;i=i.slice(0,u===tn?c:u)}}else if(n.indexOf(kt(t),c)!=c){var d=i.lastIndexOf(t);d>-1&&(i=i.slice(0,d))}return i+e}function ql(n){return n=_i(n),n&&qs.test(n)?n.replace(xs,Ga):n}function Tl(n,s,a){return n=_i(n),s=a?tn:s,s===tn?F(n)?en(n):w(n):n.match(s)||[]}function Sl(n){var s=null==n?0:n.length,a=xo();return n=s?m(n,function(n){if("function"!=typeof n[1])throw new rr(cn);return[a(n[0]),n[1]]}):[],at(function(a){for(var e=-1;++e<s;){var t=n[e];if(c(t[0],this,a))return c(t[1],this,a)}})}function _l(n){return te(ee(n,dn))}function Cl(n){return function(){return n}}function Pl(n,s){return null==n||n!==n?s:n}function El(n){return n}function Ml(n){return Oe("function"==typeof n?n:ee(n,dn))}function Il(n){return Be(ee(n,dn))}function Al(n,s){return He(n,ee(s,dn))}function Dl(n,s,a){var e=Wi(s),t=me(s,e);null!=a||ti(s)&&(t.length||!e.length)||(a=s,s=n,n=this,t=me(s,Wi(s)));var o=!(ti(a)&&"chain"in a&&!a.chain),p=si(n);return l(t,function(a){var e=s[a];n[a]=e,p&&(n.prototype[a]=function(){var s=this.__chain__;if(o||s){var a=n(this.__wrapped__);return(a.__actions__=Ot(this.__actions__)).push({func:e,args:arguments,thisArg:n}),a.__chain__=s,a}return e.apply(n,b([this.value()],arguments))})}),n}function Nl(){return Aa._===this&&(Aa._=wr),this}function Rl(){}function Ol(n){return n=xi(n),at(function(s){return $e(s,n)})}function Ll(n){return Oo(n)?C(Zo(n)):Ke(n)}function zl(n){return function(s){return null==n?tn:be(n,s)}}function Wl(){return[]}function Ul(){return!1}function Bl(){return{}}function Hl(){return""}function Fl(){return!0}function Jl(n,s){if((n=xi(n))<1||n>Dn)return[];var a=On,e=$r(n,On);s=xo(s),n-=On;for(var t=A(e,s);++a<n;)s(a);return t}function $l(n){return bd(n)?m(n,Zo):bi(n)?[n]:Ot(Mu(_i(n)))}function Vl(n){var s=++gr;return _i(n)+s}function Gl(n){return n&&n.length?le(n,El,ve):tn}function Yl(n,s){return n&&n.length?le(n,xo(s,2),ve):tn}function Kl(n){return _(n,El)}function Ql(n,s){return _(n,xo(s,2))}function Xl(n){return n&&n.length?le(n,El,We):tn}function Zl(n,s){return n&&n.length?le(n,xo(s,2),We):tn}function nr(n){return n&&n.length?I(n,El):0}function sr(n,s){return n&&n.length?I(n,xo(s,2)):0}s=null==s?Aa:Ya.defaults(Aa.Object(),s,Ya.pick(Aa,wa));var ar=s.Array,er=s.Date,tr=s.Error,or=s.Function,pr=s.Math,cr=s.Object,ir=s.RegExp,lr=s.String,rr=s.TypeError,ur=ar.prototype,dr=or.prototype,kr=cr.prototype,hr=s["__core-js_shared__"],mr=dr.toString,br=kr.hasOwnProperty,gr=0,fr=function(){var n=/[^.]+$/.exec(hr&&hr.keys&&hr.keys.IE_PROTO||"");return n?"Symbol(src)_1."+n:""}(),vr=kr.toString,yr=mr.call(cr),wr=Aa._,xr=ir("^"+mr.call(br).replace(As,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jr=Ra?s.Buffer:tn,qr=s.Symbol,Tr=s.Uint8Array,Sr=jr?jr.allocUnsafe:tn,_r=V(cr.getPrototypeOf,cr),Cr=cr.create,Pr=kr.propertyIsEnumerable,Er=ur.splice,Mr=qr?qr.isConcatSpreadable:tn,Ir=qr?qr.iterator:tn,Ar=qr?qr.toStringTag:tn,Dr=function(){try{var n=To(cr,"defineProperty");return n({},"",{}),n}catch(n){}}(),Nr=s.clearTimeout!==Aa.clearTimeout&&s.clearTimeout,Rr=er&&er.now!==Aa.Date.now&&er.now,Or=s.setTimeout!==Aa.setTimeout&&s.setTimeout,Lr=pr.ceil,zr=pr.floor,Wr=cr.getOwnPropertySymbols,Ur=jr?jr.isBuffer:tn,Br=s.isFinite,Hr=ur.join,Fr=V(cr.keys,cr),Jr=pr.max,$r=pr.min,Vr=er.now,Gr=s.parseInt,Yr=pr.random,Kr=ur.reverse,Qr=To(s,"DataView"),Xr=To(s,"Map"),Zr=To(s,"Promise"),nu=To(s,"Set"),su=To(s,"WeakMap"),au=To(cr,"create"),eu=su&&new su,tu={},ou=np(Qr),pu=np(Xr),cu=np(Zr),iu=np(nu),lu=np(su),ru=qr?qr.prototype:tn,uu=ru?ru.valueOf:tn,du=ru?ru.toString:tn,ku=function(){function n(){}return function(s){if(!ti(s))return{};if(Cr)return Cr(s);n.prototype=s;var a=new n;return n.prototype=tn,a}}();a.templateSettings={escape:Ss,evaluate:_s,interpolate:Cs,variable:"",imports:{_:a}},a.prototype=e.prototype,a.prototype.constructor=a,t.prototype=ku(e.prototype),t.prototype.constructor=t,y.prototype=ku(e.prototype),y.prototype.constructor=y,an.prototype.clear=Us,an.prototype.delete=Zs,an.prototype.get=na,an.prototype.has=sa,an.prototype.set=aa,ea.prototype.clear=ta,ea.prototype.delete=oa,ea.prototype.get=pa,ea.prototype.has=ca,ea.prototype.set=ia,la.prototype.clear=ra,la.prototype.delete=ua,la.prototype.get=da,la.prototype.has=ka,la.prototype.set=ha,ga.prototype.add=ga.prototype.push=fa,ga.prototype.has=va,ya.prototype.clear=Ta,ya.prototype.delete=Sa,ya.prototype.get=_a,ya.prototype.has=Ca,ya.prototype.set=Ma;var hu=Ht(ke),mu=Ht(he,!0),bu=Ft(),gu=Ft(!0),fu=eu?function(n,s){return eu.set(n,s),n}:El,vu=Dr?function(n,s){return Dr(n,"toString",{configurable:!0,enumerable:!1,value:Cl(s),writable:!0})}:El,yu=at,wu=Nr||function(n){return Aa.clearTimeout(n)},xu=nu&&1/Y(new nu([,-0]))[1]==An?function(n){return new nu(n)}:Rl,ju=eu?function(n){return eu.get(n)}:Rl,qu=Wr?function(n){return null==n?[]:(n=cr(n),d(Wr(n),function(s){return Pr.call(n,s)}))}:Wl,Tu=Wr?function(n){for(var s=[];n;)b(s,qu(n)),n=_r(n);return s}:Wl,Su=fe;(Qr&&Su(new Qr(new ArrayBuffer(1)))!=ls||Xr&&Su(new Xr)!=Kn||Zr&&"[object Promise]"!=Su(Zr.resolve())||nu&&Su(new nu)!=as||su&&Su(new su)!=ps)&&(Su=function(n){var s=fe(n),a=s==Zn?n.constructor:tn,e=a?np(a):"";if(e)switch(e){case ou:return ls;case pu:return Kn;case cu:return"[object Promise]";case iu:return as;case lu:return ps}return s});var _u=hr?si:Ul,Cu=Qo(fu),Pu=Or||function(n,s){return Aa.setTimeout(n,s)},Eu=Qo(vu),Mu=function(n){var s=Mc(n,function(n){return a.size===rn&&a.clear(),n}),a=s.cache;return s}(function(n){var s=[];return Ms.test(n)&&s.push(""),n.replace(Is,function(n,a,e,t){s.push(e?t.replace(Bs,"$1"):a||n)}),s}),Iu=at(function(n,s){return Vc(n)?ce(n,de(s,1,Vc,!0)):[]}),Au=at(function(n,s){var a=wp(s);return Vc(a)&&(a=tn),Vc(n)?ce(n,de(s,1,Vc,!0),xo(a,2)):[]}),Du=at(function(n,s){var a=wp(s);return Vc(a)&&(a=tn),Vc(n)?ce(n,de(s,1,Vc,!0),tn,a):[]}),Nu=at(function(n){var s=m(n,wt);return s.length&&s[0]===n[0]?je(s):[]}),Ru=at(function(n){var s=wp(n),a=m(n,wt);return s===wp(a)?s=tn:a.pop(),a.length&&a[0]===n[0]?je(a,xo(s,2)):[]}),Ou=at(function(n){var s=wp(n),a=m(n,wt);return s="function"==typeof s?s:tn,s&&a.pop(),a.length&&a[0]===n[0]?je(a,tn,s):[]}),Lu=at(qp),zu=go(function(n,s){var a=null==n?0:n.length,e=se(n,s);return Xe(n,m(s,function(n){return No(n,a)?+n:n}).sort(At)),e}),Wu=at(function(n){return ht(de(n,1,Vc,!0))}),Uu=at(function(n){var s=wp(n);return Vc(s)&&(s=tn),ht(de(n,1,Vc,!0),xo(s,2))}),Bu=at(function(n){var s=wp(n);return s="function"==typeof s?s:tn,ht(de(n,1,Vc,!0),tn,s)}),Hu=at(function(n,s){return Vc(n)?ce(n,s):[]}),Fu=at(function(n){return vt(d(n,Vc))}),Ju=at(function(n){var s=wp(n);return Vc(s)&&(s=tn),vt(d(n,Vc),xo(s,2))}),$u=at(function(n){var s=wp(n);return s="function"==typeof s?s:tn,vt(d(n,Vc),tn,s)}),Vu=at($p),Gu=at(function(n){var s=n.length,a=s>1?n[s-1]:tn;return a="function"==typeof a?(n.pop(),a):tn,Vp(n,a)}),Yu=go(function(n){var s=n.length,a=s?n[0]:0,e=this.__wrapped__,o=function(s){return se(s,n)};return!(s>1||this.__actions__.length)&&e instanceof y&&No(a)?(e=e.slice(a,+a+(s?1:0)),e.__actions__.push({func:Xp,args:[o],thisArg:tn}),new t(e,this.__chain__).thru(function(n){return s&&!n.length&&n.push(tn),n})):this.thru(o)}),Ku=Ut(function(n,s,a){br.call(n,a)?++n[a]:ne(n,a,1)}),Qu=Kt(up),Xu=Kt(dp),Zu=Ut(function(n,s,a){br.call(n,a)?n[a].push(s):ne(n,a,[s])}),nd=at(function(n,s,a){var e=-1,t="function"==typeof s,o=$c(n)?ar(n.length):[];return hu(n,function(n){o[++e]=t?c(s,n,a):Te(n,s,a)}),o}),sd=Ut(function(n,s,a){ne(n,a,s)}),ad=Ut(function(n,s,a){n[a?0:1].push(s)},function(){return[[],[]]}),ed=at(function(n,s){if(null==n)return[];var a=s.length;return a>1&&Ro(n,s[0],s[1])?s=[]:a>2&&Ro(s[0],s[1],s[2])&&(s=[s[0]]),Ve(n,de(s,1),[])}),td=Rr||function(){return Aa.Date.now()},od=at(function(n,s,a){var e=gn;if(a.length){var t=G(a,wo(od));e|=xn}return lo(n,e,s,a,t)}),pd=at(function(n,s,a){var e=gn|fn;if(a.length){var t=G(a,wo(pd));e|=xn}return lo(s,e,n,a,t)}),cd=at(function(n,s){return pe(n,1,s)}),id=at(function(n,s,a){return pe(n,qi(s)||0,a)});Mc.Cache=la;var ld=yu(function(n,s){s=1==s.length&&bd(s[0])?m(s[0],N(xo())):m(de(s,1),N(xo()));var a=s.length;return at(function(e){for(var t=-1,o=$r(e.length,a);++t<o;)e[t]=s[t].call(this,e[t]);return c(n,this,e)})}),rd=at(function(n,s){var a=G(s,wo(rd));return lo(n,xn,tn,s,a)}),ud=at(function(n,s){var a=G(s,wo(ud));return lo(n,jn,tn,s,a)}),dd=go(function(n,s){return lo(n,Tn,tn,tn,tn,s)}),kd=oo(ve),hd=oo(function(n,s){return n>=s}),md=Se(function(){return arguments}())?Se:function(n){return oi(n)&&br.call(n,"callee")&&!Pr.call(n,"callee")},bd=ar.isArray,gd=za?N(za):_e,fd=Ur||Ul,vd=Wa?N(Wa):Ce,yd=Ua?N(Ua):Me,wd=Ba?N(Ba):De,xd=Ha?N(Ha):Ne,jd=Fa?N(Fa):Re,qd=oo(We),Td=oo(function(n,s){return n<=s}),Sd=Bt(function(n,s){if(Uo(s)||$c(s))return void Lt(s,Wi(s),n);for(var a in s)br.call(s,a)&&Ja(n,a,s[a])}),_d=Bt(function(n,s){Lt(s,Ui(s),n)}),Cd=Bt(function(n,s,a,e){Lt(s,Ui(s),n,e)}),Pd=Bt(function(n,s,a,e){Lt(s,Wi(s),n,e)}),Ed=go(se),Md=at(function(n){return n.push(tn,ro),c(Cd,tn,n)}),Id=at(function(n){return n.push(tn,uo),c(Od,tn,n)}),Ad=Zt(function(n,s,a){n[s]=a},Cl(El)),Dd=Zt(function(n,s,a){br.call(n,s)?n[s].push(a):n[s]=[a]},xo),Nd=at(Te),Rd=Bt(function(n,s,a){Fe(n,s,a)}),Od=Bt(function(n,s,a,e){Fe(n,s,a,e)}),Ld=go(function(n,s){var a={};if(null==n)return a;var e=!1;s=m(s,function(s){return s=jt(s,n),e||(e=s.length>1),s}),Lt(n,vo(n),a),e&&(a=ee(a,dn|kn|hn,ko));for(var t=s.length;t--;)mt(a,s[t]);return a}),zd=go(function(n,s){return null==n?{}:Ge(n,s)}),Wd=io(Wi),Ud=io(Ui),Bd=Vt(function(n,s,a){return s=s.toLowerCase(),n+(a?tl(s):s)}),Hd=Vt(function(n,s,a){return n+(a?"-":"")+s.toLowerCase()}),Fd=Vt(function(n,s,a){return n+(a?" ":"")+s.toLowerCase()}),Jd=$t("toLowerCase"),$d=Vt(function(n,s,a){return n+(a?"_":"")+s.toLowerCase()}),Vd=Vt(function(n,s,a){return n+(a?" ":"")+Yd(s)}),Gd=Vt(function(n,s,a){return n+(a?" ":"")+s.toUpperCase()}),Yd=$t("toUpperCase"),Kd=at(function(n,s){try{return c(n,tn,s)}catch(n){return Zc(n)?n:new tr(n)}}),Qd=go(function(n,s){return l(s,function(s){s=Zo(s),ne(n,s,od(n[s],n))}),n}),Xd=Qt(),Zd=Qt(!0),nk=at(function(n,s){return function(a){return Te(a,n,s)}}),sk=at(function(n,s){return function(a){return Te(n,a,s)}}),ak=so(m),ek=so(u),tk=so(v),ok=to(),pk=to(!0),ck=no(function(n,s){return n+s},0),ik=co("ceil"),lk=no(function(n,s){return n/s},1),rk=co("floor"),uk=no(function(n,s){return n*s},1),dk=co("round"),kk=no(function(n,s){return n-s},0);return a.after=qc,a.ary=Tc,a.assign=Sd,a.assignIn=_d,a.assignInWith=Cd,a.assignWith=Pd,a.at=Ed,a.before=Sc,a.bind=od,a.bindAll=Qd,a.bindKey=pd,a.castArray=zc,a.chain=Kp,a.chunk=ep,a.compact=tp,a.concat=op,a.cond=Sl,a.conforms=_l,a.constant=Cl,a.countBy=Ku,a.create=Ci,a.curry=_c,a.curryRight=Cc,a.debounce=Pc,a.defaults=Md,a.defaultsDeep=Id,a.defer=cd,a.delay=id,a.difference=Iu,a.differenceBy=Au,a.differenceWith=Du,a.drop=pp,a.dropRight=cp,a.dropRightWhile=ip,a.dropWhile=lp,a.fill=rp,a.filter=cc,a.flatMap=ic,a.flatMapDeep=lc,a.flatMapDepth=rc,a.flatten=kp,a.flattenDeep=hp,a.flattenDepth=mp,a.flip=Ec,a.flow=Xd,a.flowRight=Zd,a.fromPairs=bp,a.functions=Ni,a.functionsIn=Ri,a.groupBy=Zu,a.initial=vp,a.intersection=Nu,a.intersectionBy=Ru,a.intersectionWith=Ou,a.invert=Ad,a.invertBy=Dd,a.invokeMap=nd,a.iteratee=Ml,a.keyBy=sd,a.keys=Wi,a.keysIn=Ui,a.map=hc,a.mapKeys=Bi,a.mapValues=Hi,a.matches=Il,a.matchesProperty=Al,a.memoize=Mc,a.merge=Rd,a.mergeWith=Od,a.method=nk,a.methodOf=sk,a.mixin=Dl,a.negate=Ic,a.nthArg=Ol,a.omit=Ld,a.omitBy=Fi,a.once=Ac,a.orderBy=mc,a.over=ak,a.overArgs=ld,a.overEvery=ek,a.overSome=tk,a.partial=rd,a.partialRight=ud,a.partition=ad,a.pick=zd,a.pickBy=Ji,a.property=Ll,a.propertyOf=zl,a.pull=Lu,a.pullAll=qp,a.pullAllBy=Tp,a.pullAllWith=Sp,a.pullAt=zu,a.range=ok,a.rangeRight=pk,a.rearg=dd,a.reject=fc,a.remove=_p,a.rest=Dc,a.reverse=Cp,a.sampleSize=yc,a.set=Vi,a.setWith=Gi,a.shuffle=wc,a.slice=Pp,a.sortBy=ed,a.sortedUniq=Rp,a.sortedUniqBy=Op,a.split=ml,a.spread=Nc,a.tail=Lp,a.take=zp,a.takeRight=Wp,a.takeRightWhile=Up,a.takeWhile=Bp,a.tap=Qp,a.throttle=Rc,a.thru=Xp,a.toArray=yi,a.toPairs=Wd,a.toPairsIn=Ud,a.toPath=$l,a.toPlainObject=Ti,a.transform=Yi,a.unary=Oc,a.union=Wu,a.unionBy=Uu,a.unionWith=Bu,a.uniq=Hp,a.uniqBy=Fp,a.uniqWith=Jp,a.unset=Ki,a.unzip=$p,a.unzipWith=Vp,a.update=Qi,a.updateWith=Xi,a.values=Zi,a.valuesIn=nl,a.without=Hu,a.words=Tl,a.wrap=Lc,a.xor=Fu,a.xorBy=Ju,a.xorWith=$u,a.zip=Vu,a.zipObject=Gp,a.zipObjectDeep=Yp,a.zipWith=Gu,a.entries=Wd,a.entriesIn=Ud,a.extend=_d,a.extendWith=Cd,Dl(a,a),a.add=ck,a.attempt=Kd,a.camelCase=Bd,a.capitalize=tl,a.ceil=ik,a.clamp=sl,a.clone=Wc,a.cloneDeep=Bc,a.cloneDeepWith=Hc,a.cloneWith=Uc,a.conformsTo=Fc,a.deburr=ol,a.defaultTo=Pl,a.divide=lk,a.endsWith=pl,a.eq=Jc,a.escape=cl,a.escapeRegExp=il,a.every=pc,a.find=Qu,a.findIndex=up,a.findKey=Pi,a.findLast=Xu,a.findLastIndex=dp,a.findLastKey=Ei,a.floor=rk,a.forEach=uc,a.forEachRight=dc,a.forIn=Mi,a.forInRight=Ii,a.forOwn=Ai,a.forOwnRight=Di,a.get=Oi,a.gt=kd,a.gte=hd,a.has=Li,a.hasIn=zi,a.head=gp,a.identity=El,a.includes=kc,a.indexOf=fp,a.inRange=al,a.invoke=Nd,a.isArguments=md,a.isArray=bd,a.isArrayBuffer=gd,a.isArrayLike=$c,a.isArrayLikeObject=Vc,a.isBoolean=Gc,a.isBuffer=fd,a.isDate=vd,a.isElement=Yc,a.isEmpty=Kc,a.isEqual=Qc,a.isEqualWith=Xc,a.isError=Zc,a.isFinite=ni,a.isFunction=si,a.isInteger=ai,a.isLength=ei,a.isMap=yd,a.isMatch=pi,a.isMatchWith=ci,a.isNaN=ii,a.isNative=li,a.isNil=ui,a.isNull=ri,a.isNumber=di,a.isObject=ti,a.isObjectLike=oi,a.isPlainObject=ki,a.isRegExp=wd,a.isSafeInteger=hi,a.isSet=xd,a.isString=mi,a.isSymbol=bi,a.isTypedArray=jd,a.isUndefined=gi,a.isWeakMap=fi,a.isWeakSet=vi,a.join=yp,a.kebabCase=Hd,a.last=wp,a.lastIndexOf=xp,a.lowerCase=Fd,a.lowerFirst=Jd,a.lt=qd,a.lte=Td,a.max=Gl,a.maxBy=Yl,a.mean=Kl,a.meanBy=Ql,a.min=Xl,a.minBy=Zl,a.stubArray=Wl,a.stubFalse=Ul,a.stubObject=Bl,a.stubString=Hl,a.stubTrue=Fl,a.multiply=uk,a.nth=jp,a.noConflict=Nl,a.noop=Rl,a.now=td,a.pad=ll,a.padEnd=rl,a.padStart=ul,a.parseInt=dl,a.random=el,a.reduce=bc,a.reduceRight=gc,a.repeat=kl,a.replace=hl,a.result=$i,a.round=dk,a.runInContext=n,a.sample=vc,a.size=xc,a.snakeCase=$d,a.some=jc,a.sortedIndex=Ep,a.sortedIndexBy=Mp,a.sortedIndexOf=Ip,a.sortedLastIndex=Ap,a.sortedLastIndexBy=Dp,a.sortedLastIndexOf=Np,a.startCase=Vd,a.startsWith=bl,a.subtract=kk,a.sum=nr,a.sumBy=sr,a.template=gl,a.times=Jl,a.toFinite=wi,a.toInteger=xi,a.toLength=ji,a.toLower=fl,a.toNumber=qi,a.toSafeInteger=Si,a.toString=_i,a.toUpper=vl,a.trim=yl,a.trimEnd=wl,a.trimStart=xl,a.truncate=jl,a.unescape=ql,a.uniqueId=Vl,a.upperCase=Gd,a.upperFirst=Yd,a.each=uc,a.eachRight=dc,a.first=gp,Dl(a,function(){var n={};return ke(a,function(s,e){br.call(a.prototype,e)||(n[e]=s)}),n}(),{chain:!1}),a.VERSION="4.17.4",l(["bind","bindKey","curry","curryRight","partial","partialRight"],function(n){a[n].placeholder=a}),l(["drop","take"],function(n,s){y.prototype[n]=function(a){a=a===tn?1:Jr(xi(a),0);var e=this.__filtered__&&!s?new y(this):this.clone();return e.__filtered__?e.__takeCount__=$r(a,e.__takeCount__):e.__views__.push({size:$r(a,On),type:n+(e.__dir__<0?"Right":"")}),e},y.prototype[n+"Right"]=function(s){return this.reverse()[n](s).reverse()}}),l(["filter","map","takeWhile"],function(n,s){var a=s+1,e=a==Mn||3==a;y.prototype[n]=function(n){var s=this.clone();return s.__iteratees__.push({iteratee:xo(n,3),type:a}),s.__filtered__=s.__filtered__||e,s}}),l(["head","last"],function(n,s){var a="take"+(s?"Right":"");y.prototype[n]=function(){return this[a](1).value()[0]}}),l(["initial","tail"],function(n,s){var a="drop"+(s?"":"Right");y.prototype[n]=function(){return this.__filtered__?new y(this):this[a](1)}}),y.prototype.compact=function(){return this.filter(El)},y.prototype.find=function(n){return this.filter(n).head()},y.prototype.findLast=function(n){return this.reverse().find(n)},y.prototype.invokeMap=at(function(n,s){return"function"==typeof n?new y(this):this.map(function(a){return Te(a,n,s)})}),y.prototype.reject=function(n){return this.filter(Ic(xo(n)))},y.prototype.slice=function(n,s){n=xi(n);var a=this;return a.__filtered__&&(n>0||s<0)?new y(a):(n<0?a=a.takeRight(-n):n&&(a=a.drop(n)),s!==tn&&(s=xi(s),a=s<0?a.dropRight(-s):a.take(s-n)),a)},y.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},y.prototype.toArray=function(){return this.take(On)},ke(y.prototype,function(n,s){var e=/^(?:filter|find|map|reject)|While$/.test(s),o=/^(?:head|last)$/.test(s),p=a[o?"take"+("last"==s?"Right":""):s],c=o||/^find/.test(s);p&&(a.prototype[s]=function(){var s=this.__wrapped__,i=o?[1]:arguments,l=s instanceof y,r=i[0],u=l||bd(s),d=function(n){var s=p.apply(a,b([n],i));return o&&k?s[0]:s};u&&e&&"function"==typeof r&&1!=r.length&&(l=u=!1);var k=this.__chain__,h=!!this.__actions__.length,m=c&&!k,g=l&&!h;if(!c&&u){s=g?s:new y(this);var f=n.apply(s,i);return f.__actions__.push({func:Xp,args:[d],thisArg:tn}),new t(f,k)}return m&&g?n.apply(this,i):(f=this.thru(d),m?o?f.value()[0]:f.value():f)})}),l(["pop","push","shift","sort","splice","unshift"],function(n){var s=ur[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",t=/^(?:pop|shift)$/.test(n);a.prototype[n]=function(){var n=arguments;if(t&&!this.__chain__){var a=this.value();return s.apply(bd(a)?a:[],n)}return this[e](function(a){return s.apply(bd(a)?a:[],n)})}}),ke(y.prototype,function(n,s){var e=a[s];if(e){var t=e.name+"";(tu[t]||(tu[t]=[])).push({name:s,func:e})}}),tu[Xt(tn,fn).name]=[{name:"wrapper",func:tn}],y.prototype.clone=P,y.prototype.reverse=Q,y.prototype.value=sn,a.prototype.at=Yu,a.prototype.chain=Zp,a.prototype.commit=nc,a.prototype.next=sc,a.prototype.plant=ec,a.prototype.reverse=tc,a.prototype.toJSON=a.prototype.valueOf=a.prototype.value=oc,a.prototype.first=a.prototype.head,Ir&&(a.prototype[Ir]=ac),a}();Aa._=Ya,(t=function(){return Ya}.call(s,a,s,e))!==tn&&(e.exports=t)}).call(this)}).call(s,a(10),a(46)(n))},function(n,s){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,s,a){"use strict";function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function t(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var p=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),c=a(0),i=function(n){return n&&n.__esModule?n:{default:n}}(c),l=function(n){function s(){var n,a,o,p;e(this,s);for(var c=arguments.length,i=Array(c),l=0;l<c;l++)i[l]=arguments[l];return a=o=t(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(i))),o.state={offset:0},p=a,t(o,p)}return o(s,n),p(s,[{key:"render",value:function(){var n=this.state.offset;return i.default.createElement("span",{className:"gitter"},i.default.createElement("div",{className:"gitter__button js-gitter-toggle-chat-button",style:{marginBottom:n}},i.default.createElement("i",{className:"gitter__icon icon-gitter"})))}},{key:"componentDidMount",value:function(){setTimeout(this._recalculate.bind(this),250),document.addEventListener("scroll",this._recalculate.bind(this))}},{key:"componentWillUnmount",value:function(){document.removeEventListener("scroll",this._recalculate.bind(this))}},{key:"_recalculate",value:function(n){var s=window,a=s.scrollY,e=s.innerHeight,t=document.body.scrollHeight,o=t-a-e,p=document.querySelector("footer").offsetHeight;this.setState({offset:o<p?p-o:0})}}]),s}(i.default.Component);s.default=l},,function(n,s,a){var e=a(0),t=a(0),o=a(12);o.default&&(o=o.default);var p=a(20);p.default&&(p=p.default);var c=a(41);c.default&&(c=c.default);var i=a(42);i.default&&(i=i.default);var l=a(47);l.default&&(l=l.default),t.render(e.createElement(o,{}),document.getElementById("src/components/NotificationBar/NotificationBar.jsx")),t.render(e.createElement(p,{pageUrl:"/plugins/hot-module-replacement-plugin/"}),document.getElementById("src/components/Navigation/Navigation.jsx")),t.render(e.createElement(c,{sections:[{title:"Home",url:"/",pages:[{file:{attributes:{title:"Comparison",sort:1,contributors:["bebraw","chrisVillanueva","pksjce","simon04","tashian"],related:[{title:"JSPM vs. webpack",url:"https://ilikekillnerds.com/2015/07/jspm-vs-webpack/"},{title:"webpack vs. Browserify vs. SystemJS",url:"https://engineering.velocityapp.com/webpack-vs-browersify-vs-systemjs-for-spas-95b349a41fa0"}],group:"-",anchors:[{title:"Bundling vs. Loading",id:"bundling-vs-loading"}]},body:'<p>webpack is not the only module bundler out there. If you are choosing between using webpack or any of the bundlers below, here is a feature-by-feature comparison on how webpack fares against the current competition.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Feature</div><div class="table-th">webpack/webpack</div><div class="table-th">jrburke/requirejs</div><div class="table-th">substack/node-browserify</div><div class="table-th">jspm/jspm-cli</div><div class="table-th">rollup/rollup</div><div class="table-th">brunch/brunch</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Additional chunks are loaded on demand\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/systemjs/systemjs/blob/master/docs/system-api.md#systemimportmodulename--normalizedparentname---promisemodule">System.import</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        AMD <code>define</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/jaredhanson/deamdify">deamdify</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/piuccio/rollup-plugin-amd">rollup-plugin-amd</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        AMD <code>require</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        AMD <code>require</code> loads on demand\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        with manual configuration\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        CommonJS <code>exports</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        only wrapping in <code>define</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        CommonJS <code>require</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        only wrapping in <code>define</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        CommonJS <code>require.resolve</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Concat in require <code>require(&quot;./fi&quot; + &quot;le&quot;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Debugging support\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>SourceUrl, SourceMaps</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        not required\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        SourceMaps\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <strong>SourceUrl, SourceMaps</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <strong>SourceUrl, SourceMaps</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        SourceMaps\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Dependencies\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        19MB / 127 packages\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        11MB / 118 packages\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>1.2MB / 1 package</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        26MB / 131 packages\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        ?MB / 3 packages\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        ES2015 <code>import</code>/<code>export</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong> (webpack 2)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes, via <a href="https://github.com/gcollazo/es6-module-transpiler-brunch">es6 module transpiler</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Expressions in require (guided) <code>require(&quot;./templates/&quot; + template)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes (all files matching included)</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Expressions in require (free) <code>require(moduleName)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        with manual configuration\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Generate a single bundle\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        yes♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Indirect require <code>var r = require; r(&quot;./file&quot;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no♦\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Load each file separate\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Mangle path names\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        partial\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        not required (path names are not included in the bundle)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Minimizing\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        uglify\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        uglify, closure compiler\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/hughsk/uglifyify">uglifyify</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/TrySound/rollup-plugin-uglify">uglify-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/brunch/uglify-js-brunch">UglifyJS-brunch</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Multi pages build with common bundle\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        with manual configuration\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        with manual configuration\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        with bundle arithmetic\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Multiple bundles\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        with manual configuration\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        with manual configuration\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Node.js built-in libs <code>require(&quot;path&quot;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-plugin-node-resolve">node-resolve-plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Other Node.js stuff\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        process, __dir/filename, global\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        process, __dir/filename, global\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        process, __dir/filename, global for cjs\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        global (<a href="https://github.com/rollup/rollup-plugin-commonjs">commonjs-plugin</a>)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Plugins\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <strong>yes</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Preprocessing\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>loaders, <a href="https://github.com/webpack/transform-loader">transforms</a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        loaders\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        transforms\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        plugin translate\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        plugin transforms\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        compilers, optimizers\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Replacement for browser\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <code>web_modules</code>, <code>.web.js</code>, package.json field, alias config option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        alias option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        package.json field, alias option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        package.json, alias option\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Requirable files\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        file system\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        <strong>web</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        file system\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        through plugins\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        file system or through plugins\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        file system\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Runtime overhead\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        <strong>243B + 20B per module + 4B per dependency</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        14.7kB + 0B per module + (3B + X) per dependency\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        415B + 25B per module + (6B + 2X) per dependency\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        5.5kB for self-executing bundles, 38kB for full loader and polyfill, 0 plain modules, 293B CJS, 139B ES2015 System.register before gzip\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <strong>none for ES2015 modules</strong> (other formats may have)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Feature\n    </div>\n    <div class="table-td-content">\n        Watch mode\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        webpack/webpack\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jrburke/requirejs\n    </div>\n    <div class="table-td-content">\n        not required\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        substack/node-browserify\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/substack/watchify">watchify</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        jspm/jspm-cli\n    </div>\n    <div class="table-td-content">\n        not needed in dev\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rollup/rollup\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/rollup/rollup-watch">rollup-watch</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        brunch/brunch\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>♦ in production mode (opposite in development mode)</p>\n<p>X is the length of the path string</p>\n<h2 class="header"><a class="anchor" href="#bundling-vs-loading" id="bundling-vs-loading"></a><span class="text">Bundling vs. Loading</span><a class="icon-link" href="#bundling-vs-loading"></a></h2>\n<p>It&#39;s important to note some key differences between <em>loading</em> and <em>bundling</em> modules. A tool like <a href="https://github.com/systemjs/systemjs">SystemJS</a>, which can be found under the hood of <a href="https://github.com/jspm/jspm-cli">JSPM</a>, is used to load and transpile modules at runtime in the browser. This differs significantly from webpack, where modules are transpiled (through &quot;loaders&quot;) and bundled before hitting the browser.</p>\n<p>Each method has its advantages and disadvantages. Loading and transpiling modules at runtime can add a lot of overhead for larger sites and applications comprised of many modules. For this reason, SystemJS makes more sense for smaller projects where fewer modules are required. However, this may change a bit as <a href="https://http2.github.io/">HTTP/2</a> will improve the speed at which files can be transferred from server to client. Note that HTTP/2 doesn&#39;t change anything about <em>transpiling</em> modules, which will always take longer when done client-side.</p>\n',title:"Comparison"},title:"Comparison",url:"/comparison/"},{file:{attributes:{title:"Branding Guidelines",sort:2,contributors:["jhnns","rouzbeh84","skipjack"],group:"-",anchors:[{title:"The Name",id:"the-name"},{title:"Logo",id:"logo"},{title:"Icon only",id:"icon-only"},{title:"Font",id:"font"},{title:"Color Palette",id:"color-palette"},{title:"License",id:"license"}],related:[]},body:'<p>Here you can find <strong>webpack</strong> project brand guidelines, assets, and license. See our official <a href="https://github.com/webpack/media">media repository</a> for more information and to find the <a href="https://github.com/webpack/media/blob/master/LICENSE">license</a> that governs this work. Click any of the images to download them.</p>\n<h2 class="header"><a class="anchor" href="#the-name" id="the-name"></a><span class="text">The Name</span><a class="icon-link" href="#the-name"></a></h2>\n<p>webpack should <strong>always</strong> be written in lower-case letters, even at the beginning of a sentence.</p>\n<h2 class="header"><a class="anchor" href="#logo" id="logo"></a><span class="text">Logo</span><a class="icon-link" href="#logo"></a></h2>\n<p>The webpack logo should be placed on a white background with enough space around it like this:</p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.png?raw=true" alt="webpack logo default with proper spacing on light background" /></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-white-bg.jpg">jpg</a></p>\n<p>Just double the size of the inner dark blue cube to get an idea how much space the logo should have.</p>\n<p>For dark backgrounds, you can use the negative version of the logo:</p>\n<div style="display: block; background: #111;"><p><img src="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.png?raw=true" alt="webpack logo default with proper spacing on light background" /></p>\n<p></div></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/logo-on-dark-bg.jpg">jpg</a></p>\n<blockquote class="tip"><div class="tip-content"> Please use the <strong>icon + text</strong> whenever possible. </div></blockquote><h2 class="header"><a class="anchor" href="#icon-only" id="icon-only"></a><span class="text">Icon only</span><a class="icon-link" href="#icon-only"></a></h2>\n<p><strong>The icon is designed to be used in layout-constrained areas. As previously stated, please prefer icon + text.</strong></p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/icon.png?raw=true" width="250" alt="icon example"></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/icon.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon.jpg">jpg</a></p>\n<p>Square-sized icon for bigger areas (like avatars or profile pictures):</p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/icon-square-big.png?raw=true" width="250" alt="icon square big example"></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/icon-square-big.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-big.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-big.jpg">jpg</a></p>\n<p>Square-sized icon for smaller areas (like favicons):</p>\n<p><img src="https://github.com/webpack/media/blob/master/logo/icon-square-small.png?raw=true" width="50" alt="icon square small example"></p>\n<p><a href="https://github.com/webpack/media/blob/master/logo/icon-square-small.svg">svg</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-small.png">png</a> | <a href="https://github.com/webpack/media/blob/master/logo/icon-square-small.jpg">jpg</a></p>\n<blockquote class="tip"><div class="tip-content"> For those of you following our guidelines and have gotten this far, we&#39;ve made a special smaller size image used especially for custom emoji (like in a slack or gitter channel ;)) </div></blockquote><p><img src="/assets/icon-square-small-slack.png" width="50" alt="icon square small example"></p>\n<h2 class="header"><a class="anchor" href="#font" id="font"></a><span class="text">Font</span><a class="icon-link" href="#font"></a></h2>\n<p>We use the beautiful <a href="http://geomanist.com/">Geomanist Medium</a> font from the extremely talented folks at the <a href="http://atipofoundry.com/">Atipo Foundry</a> who provide the entire font family at a &#39;pay what you want&#39; model.</p>\n<h2 class="header"><a class="anchor" href="#color-palette" id="color-palette"></a><span class="text">Color Palette</span><a class="icon-link" href="#color-palette"></a></h2>\n<p>The following colors are used throughout the site in various combinations and on our fancy clothing line launched with the help of <a href="http://opencollective.com">Open Collective</a> and <a href="https://medium.com/u/840563ee2a56">Threadless</a> over at the <a href="https://webpack.threadless.com/collections/the-final-release-collection/">official webpack store</a>!</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Color Name</div><div class="table-th">HEX Code</div><div class="table-th">RGB Code</div><div class="table-th">Sample</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Malibu:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#8dd6f9</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 141, 214, 249</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #8dd6f9;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Denim:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#1d78c1</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 29, 120, 193</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #1d78c1;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Fiord:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#465E69</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 70, 94, 105</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #465E69;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Outer Space:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#2B3A42</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 43, 58, 66</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #2B3A42;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        White:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#ffffff</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 255, 255, 255</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #ffffff;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Concrete:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#f2f2f2</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 242, 242, 242</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #f2f2f2;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Alto:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#dedede</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 222, 222, 222</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #dedede;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Dusty Gray:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#999999</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 153, 153, 153</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #999999;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Dove Gray:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#666666</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 102, 102, 102</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #666666;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Emperor:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#535353</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 83, 83, 83</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #535353;">&nbsp;</div>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Color Name\n    </div>\n    <div class="table-td-content">\n        Mine Shaft:\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        HEX Code\n    </div>\n    <div class="table-td-content">\n        HEX <code>#333333</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        RGB Code\n    </div>\n    <div class="table-td-content">\n        <code>rgb: 51, 51, 51</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Sample\n    </div>\n    <div class="table-td-content">\n        <div style="background-color: #333333;">&nbsp;</div>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>In addition, you can grab the following file types directly from these links:</p>\n<p><a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.psd">psd</a> | <a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.png">png</a>\n | <a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.ai">ai</a> | <a href="https://raw.githubusercontent.com/webpack/media/master/design/webpack-palette.svg">svg</a></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>The logo and the brand name are <strong>not MIT licensed</strong>. Please check <a href="https://github.com/webpack/media/blob/master/LICENSE">our LICENSE</a> for usage guidelines.</p>\n',title:"Branding Guidelines"},title:"Branding Guidelines",url:"/branding/"},{file:{attributes:{title:"Glossary",sort:3,contributors:["bebraw","rouzbeh84","skipjack"],group:"-",anchors:[{title:"A",id:"a"},{title:"B",id:"b"},{title:"C",id:"c"},{title:"D",id:"d"},{title:"E",id:"e"},{title:"F",id:"f"},{title:"G",id:"g"},{title:"H",id:"h"},{title:"I",id:"i"},{title:"J",id:"j"},{title:"K",id:"k"},{title:"L",id:"l"},{title:"M",id:"m"},{title:"N",id:"n"},{title:"O",id:"o"},{title:"P",id:"p"},{title:"Q",id:"q"},{title:"R",id:"r"},{title:"S",id:"s"},{title:"T",id:"t"},{title:"U",id:"u"},{title:"V",id:"v"},{title:"W",id:"w"},{title:"X",id:"x"},{title:"Y",id:"y"},{title:"Z",id:"z"}],related:[]},body:'<p>This index lists common terms used throughout the webpack ecosystem.</p>\n<h2 class="header"><a class="anchor" href="#a" id="a"></a><span class="text">A</span><a class="icon-link" href="#a"></a></h2>\n<ul>\n<li><a href="/guides/asset-management/"><strong>Asset</strong></a>: This a general term for the images, fonts, media, and any other kind of files that are typically used in websites and other applications. These typically end up as individual files within the <a href="/glossary#o">output</a> but can also be inlined via things like the <a href="/loaders/style-loader">style-loader</a> or <a href="/loaders/url-loader">url-loader</a>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#b" id="b"></a><span class="text">B</span><a class="icon-link" href="#b"></a></h2>\n<ul>\n<li><a href="/guides/getting-started/#creating-a-bundle"><strong>Bundle</strong></a>: Produced from a number of distinct modules, bundles contain the final versions of source files that have already undergone the loading and compilation process.</li>\n<li><a href="/guides/code-splitting"><strong>Bundle Splitting</strong></a>: This process offers one way of optimizing a build, allowing webpack to generate multiple bundles for a single application. As a result, each bundle can be isolated from changes effecting others, reducing the amount of code that needs to be republished and therefore re-downloaded by the client and taking advantage of browser caching.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#c" id="c"></a><span class="text">C</span><a class="icon-link" href="#c"></a></h2>\n<ul>\n<li><strong>Chunk</strong>: This webpack-specific term is used internally to manage the bundling process. Bundles are composed out of chunks, of which there are several types (e.g. entry and child). Typically, <em>chunks</em> directly correspond with the output <em>bundles</em> however, there are some configurations that don&#39;t yield a one-to-one relationship.</li>\n<li><a href="/guides/code-splitting/"><strong>Code Splitting</strong></a>: Refers to dividing your code into various bundles/chunks which you can then load on demand instead of loading a single bundle containing everything.</li>\n<li><a href="/concepts/configuration/"><strong>Configuration</strong></a>: webpack config file is a plain old JavaScript file that exports an object. This object is then processed by webpack based upon its defined properties.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#d" id="d"></a><span class="text">D</span><a class="icon-link" href="#d"></a></h2>\n<ul>\n<li><a href="/concepts/dependency-graph"><strong>Dependency Graph</strong></a>: Any time one file depends on another, webpack treats this as a <em>dependency</em>. Starting from an entry point(s), webpack recursively builds a dependency graph that includes every module/asset your application needs.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#e" id="e"></a><span class="text">E</span><a class="icon-link" href="#e"></a></h2>\n<ul>\n<li><a href="/concepts/entry-points"><strong>Entry Point</strong></a>: The entry point tells webpack where to start and follows the graph of dependencies to know what to bundle. You can think of your application&#39;s entry point(s) as the <strong>contextual root(s)</strong> of what you want bundled.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#f" id="f"></a><span class="text">F</span><a class="icon-link" href="#f"></a></h2>\n<h2 class="header"><a class="anchor" href="#g" id="g"></a><span class="text">G</span><a class="icon-link" href="#g"></a></h2>\n<h2 class="header"><a class="anchor" href="#h" id="h"></a><span class="text">H</span><a class="icon-link" href="#h"></a></h2>\n<ul>\n<li><a href="/concepts/hot-module-replacement"><strong>Hot Module Replacement (HMR)</strong></a>: A process that exchanges, adds, or removes  <code>modules</code> while an application is running without a full page reload.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#i" id="i"></a><span class="text">I</span><a class="icon-link" href="#i"></a></h2>\n<h2 class="header"><a class="anchor" href="#j" id="j"></a><span class="text">J</span><a class="icon-link" href="#j"></a></h2>\n<h2 class="header"><a class="anchor" href="#k" id="k"></a><span class="text">K</span><a class="icon-link" href="#k"></a></h2>\n<h2 class="header"><a class="anchor" href="#l" id="l"></a><span class="text">L</span><a class="icon-link" href="#l"></a></h2>\n<ul>\n<li><a href="/concepts/loaders"><strong>Loaders</strong></a>: Transformations that are applied on the source code of a module. They allow you to pre-process files as you <code>require()</code> or &quot;load&quot; them. Similar to a &#39;task-runner&#39;.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#m" id="m"></a><span class="text">M</span><a class="icon-link" href="#m"></a></h2>\n<ul>\n<li><a href="/concepts/modules"><strong>Module</strong></a>: Discrete chunks of functionality that provide a smaller surface area than a full program. Well-written modules provide solid abstractions and encapsulation boundaries which make up a coherent design and clear purpose.</li>\n<li><a href="/concepts/module-resolution/"><strong>Module Resolution</strong></a>: A module can be required as a dependency from another module and a resolver is a library which helps in locating a module by its absolute path.. Modules are searched for inside all directories specified in <code>resolve.modules</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#n" id="n"></a><span class="text">N</span><a class="icon-link" href="#n"></a></h2>\n<h2 class="header"><a class="anchor" href="#o" id="o"></a><span class="text">O</span><a class="icon-link" href="#o"></a></h2>\n<ul>\n<li><a href="/concepts/output"><strong>Output</strong></a>: Option(s) specifying where to the output of the compiled files to disk.<blockquote>\n<p><em>Note, that while there can be multiple entry points, only one output configuration is specified.</em></p>\n</blockquote>\n</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#p" id="p"></a><span class="text">P</span><a class="icon-link" href="#p"></a></h2>\n<ul>\n<li><a href="/concepts/plugins"><strong>Plugin</strong></a>: A JavaScript object that has an <code>apply</code> property. This <code>apply</code> property is called by the webpack compiler, giving access to the entire compilation lifecycle. These packages will typically extend compilation functionality in one way or another.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#q" id="q"></a><span class="text">Q</span><a class="icon-link" href="#q"></a></h2>\n<h2 class="header"><a class="anchor" href="#r" id="r"></a><span class="text">R</span><a class="icon-link" href="#r"></a></h2>\n<h2 class="header"><a class="anchor" href="#s" id="s"></a><span class="text">S</span><a class="icon-link" href="#s"></a></h2>\n<h2 class="header"><a class="anchor" href="#t" id="t"></a><span class="text">T</span><a class="icon-link" href="#t"></a></h2>\n<ul>\n<li><a href="/configuration/target/"><strong>Target</strong></a>: User configured deployment target(s) <a href="/configuration/target/">listed here</a> to compile for a specific environment like the browser, NodeJS, or Electron.</li>\n<li><a href="/guides/tree-shaking/"><strong>Tree Shaking</strong></a>: Unused/Excess code elimination, or more precisely, live code importing. Compilers like webpack will accomplish this by analyzing the various kinds <code>import</code> statements and usage of the imported code to determine what parts of dependencies are actually being utilized, dropping parts of the &quot;tree&quot; that are not.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#u" id="u"></a><span class="text">U</span><a class="icon-link" href="#u"></a></h2>\n<h2 class="header"><a class="anchor" href="#v" id="v"></a><span class="text">V</span><a class="icon-link" href="#v"></a></h2>\n<ul>\n<li><a href="/concepts/entry-points/#separate-app-and-vendor-entries"><strong>Vendor Entry Point</strong></a>: Create dependency graphs starting at both <code>app.js</code> and <code>vendors.js</code>. These graphs are completely separate and independent of each other to allow leverage of <code>CommonsChunkPlugin</code> and extract any vendor references from your app bundle into your vendor bundle. Helps achieve a common pattern in webpack known as <a href="/guides/caching/">long-term vendor-caching</a>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#w" id="w"></a><span class="text">W</span><a class="icon-link" href="#w"></a></h2>\n<ul>\n<li><a href="/"><strong>webpack</strong></a>: A highly configurable <a href="/concepts/modules">module</a> bundler for modern JavaScript applications</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#x" id="x"></a><span class="text">X</span><a class="icon-link" href="#x"></a></h2>\n<h2 class="header"><a class="anchor" href="#y" id="y"></a><span class="text">Y</span><a class="icon-link" href="#y"></a></h2>\n<h2 class="header"><a class="anchor" href="#z" id="z"></a><span class="text">Z</span><a class="icon-link" href="#z"></a></h2>\n',title:"Glossary"},title:"Glossary",url:"/glossary/"},{file:{attributes:{title:"License",sort:4,group:"-",anchors:[{title:"webpack",id:"webpack"},{title:"webpack logo and icon",id:"webpack-logo-and-icon"},{title:"webpack documentation",id:"webpack-documentation"},{title:"webpack code samples",id:"webpack-code-samples"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#webpack" id="webpack"></a><span class="text">webpack</span><a class="icon-link" href="#webpack"></a></h2>\n<p>webpack is <a href="https://github.com/webpack/webpack/blob/master/LICENSE">MIT licensed</a>.</p>\n<h2 class="header"><a class="anchor" href="#webpack-logo-and-icon" id="webpack-logo-and-icon"></a><span class="text">webpack logo and icon</span><a class="icon-link" href="#webpack-logo-and-icon"></a></h2>\n<p>The webpack logo and icon are under a different license which can be\nfound <a href="https://github.com/webpack/media">here</a>.</p>\n<h2 class="header"><a class="anchor" href="#webpack-documentation" id="webpack-documentation"></a><span class="text">webpack documentation</span><a class="icon-link" href="#webpack-documentation"></a></h2>\n<p>The content on <a href="https://webpack.js.org/">https://webpack.js.org/</a> is available under <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons BY 4.0</a> license meaning attribution is required should you use the content elsewhere.</p>\n<h2 class="header"><a class="anchor" href="#webpack-code-samples" id="webpack-code-samples"></a><span class="text">webpack code samples</span><a class="icon-link" href="#webpack-code-samples"></a></h2>\n<p>The code samples use <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0 1.0 Universal (CC0 1.0) (Public Domain)</a> and you are free to use them as you like.</p>\n',title:"License"},title:"License",url:"/license/"}]},{title:"Concepts",url:"concepts",pages:[{file:{attributes:{title:"Entry Points",sort:2,contributors:["TheLarkInn","chrisVillanueva"],group:"-",anchors:[{title:"Single Entry (Shorthand) Syntax",id:"single-entry-shorthand-syntax"},{title:"Object Syntax",id:"object-syntax"},{title:"Scenarios",id:"scenarios"},{title:"Separate App and Vendor Entries",id:"separate-app-and-vendor-entries"},{title:"Multi Page Application",id:"multi-page-application"}],related:[]},body:'<p>As mentioned in <a href="/guides/getting-started/#using-a-configuration">Getting Started</a>, there are multiple ways to define the <code>entry</code> property in your webpack configuration. We will show you the ways you <strong>can</strong> configure the <code>entry</code> property, in addition to explaining why it may be useful to you.</p>\n<h2 class="header"><a class="anchor" href="#single-entry-shorthand-syntax" id="single-entry-shorthand-syntax"></a><span class="text">Single Entry (Shorthand) Syntax</span><a class="icon-link" href="#single-entry-shorthand-syntax"></a></h2>\n<p>Usage: <code>entry: string|Array&lt;string&gt;</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>The single entry syntax for the <code>entry</code> property is a shorthand for:</p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <strong>What happens when you pass an array to <code>entry</code>?</strong> Passing an array of file paths to the <code>entry</code> property creates what is known as a <strong>&quot;multi-main entry&quot;</strong>. This is useful when you would like to inject multiple dependent files together and graph their dependencies into one &quot;chunk&quot;. </div></blockquote><p>This is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (IE: a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.</p>\n<h2 class="header"><a class="anchor" href="#object-syntax" id="object-syntax"></a><span class="text">Object Syntax</span><a class="icon-link" href="#object-syntax"></a></h2>\n<p>Usage: <code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    vendors<span class="token punctuation">:</span> <span class="token string">\'./src/vendors.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The object syntax is more verbose. However, this is the most scalable way of defining entry/entries in your application.</p>\n<blockquote class="tip"><div class="tip-content"> <strong>&quot;Scalable webpack configurations&quot;</strong> are ones that can be reused and combined with other partial configurations. This is a popular technique used to separate concerns by environment, build target and runtime. They are then merged using specialized tools like <a href="https://github.com/survivejs/webpack-merge">webpack-merge</a>. </div></blockquote><h2 class="header"><a class="anchor" href="#scenarios" id="scenarios"></a><span class="text">Scenarios</span><a class="icon-link" href="#scenarios"></a></h2>\n<p>Below is a list of entry configurations and their real-world use cases:</p>\n<h3 class="header"><a class="anchor" href="#separate-app-and-vendor-entries" id="separate-app-and-vendor-entries"></a><span class="text">Separate App and Vendor Entries</span><a class="icon-link" href="#separate-app-and-vendor-entries"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    vendors<span class="token punctuation">:</span> <span class="token string">\'./src/vendors.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>What does this do?</strong> At face value this tells webpack to create dependency graphs starting at both <code>app.js</code> and <code>vendors.js</code>. These graphs are completely separate and independent of each other (there will be a webpack bootstrap in each bundle). This is commonly seen with single page applications which have only one entry point (excluding vendors).</p>\n<p><strong>Why?</strong> This setup allows you to leverage <code>CommonsChunkPlugin</code> and extract any vendor references from your app bundle into your vendor bundle, replacing them with <code>__webpack_require__()</code> calls. If there is no vendor code in your application bundle, then you can achieve a common pattern in webpack known as <a href="/guides/caching">long-term vendor-caching</a>.</p>\n<blockquote class="todo"><div class="tip-content"> Consider removing this scenario in favor of the DllPlugin, which provides a better vendor-splitting. </div></blockquote><h3 class="header"><a class="anchor" href="#multi-page-application" id="multi-page-application"></a><span class="text">Multi Page Application</span><a class="icon-link" href="#multi-page-application"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    pageOne<span class="token punctuation">:</span> <span class="token string">\'./src/pageOne/index.js\'</span><span class="token punctuation">,</span>\n    pageTwo<span class="token punctuation">:</span> <span class="token string">\'./src/pageTwo/index.js\'</span><span class="token punctuation">,</span>\n    pageThree<span class="token punctuation">:</span> <span class="token string">\'./src/pageThree/index.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>What does this do?</strong> We are telling webpack that we would like 3 separate dependency graphs (like the above example).</p>\n<p><strong>Why?</strong> In a multi-page application, the server is going to fetch a new HTML document for you. The page reloads this new document and assets are redownloaded. However, this gives us the unique opportunity to do multiple things:</p>\n<ul>\n<li>Use <code>CommonsChunkPlugin</code> to create bundles of shared application code between each page. Multi-page applications that reuse a lot of code/modules between entry points can greatly benefit from these techniques, as the amount of entry points increase.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> As a rule of thumb: for each HTML document use exactly one entry point. </div></blockquote>',title:"Entry Points"},title:"Entry Points",url:"/concepts/entry-points/"},{file:{attributes:{title:"Output",sort:3,contributors:["TheLarkInn","chyipin","rouzbeh84"],group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Multiple Entry Points",id:"multiple-entry-points"},{title:"Advanced",id:"advanced"}],related:[]},body:'<p>Configuring the <code>output</code> configuration options tells webpack how to write the compiled files to disk. Note that, while there can be multiple <code>entry</code> points, only one <code>output</code> configuration is specified.</p>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>The minimum requirements for the <code>output</code> property in your webpack config is to set its value to an object including the following two things:</p>\n<ul>\n<li>A <code>filename</code> to use for the output file(s).</li>\n<li>An absolute <code>path</code> to your preferred output directory.</li>\n</ul>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> <span class="token string">\'/home/proj/public/assets\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>This configuration would output a single <code>bundle.js</code> file into the <code>/home/proj/public/assets</code> directory.</p>\n<h2 class="header"><a class="anchor" href="#multiple-entry-points" id="multiple-entry-points"></a><span class="text">Multiple Entry Points</span><a class="icon-link" href="#multiple-entry-points"></a></h2>\n<p>If your configuration creates more than a single &quot;chunk&quot; (as with multiple entry points or when using plugins like CommonsChunkPlugin), you should use <a href="/configuration/output#output-filename">substitutions</a> to ensure that each file has a unique name.</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    search<span class="token punctuation">:</span> <span class="token string">\'./src/search.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">\'/dist\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// writes to disk: ./dist/app.js, ./dist/search.js</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#advanced" id="advanced"></a><span class="text">Advanced</span><a class="icon-link" href="#advanced"></a></h2>\n<p>Here&#39;s a more complicated example of using a CDN and hashes for assets:</p>\n<p><strong>config.js</strong></p>\n<pre><code class="lang-javascript">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">"/home/proj/cdn/assets/[hash]"</span><span class="token punctuation">,</span>\n  publicPath<span class="token punctuation">:</span> <span class="token string">"http://cdn.example.com/assets/[hash]/"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>In cases when the eventual <code>publicPath</code> of output files isn&#39;t known at compile time, it can be left blank and set dynamically at runtime in the entry point file. If you don&#39;t know the <code>publicPath</code> while compiling, you can omit it and set <code>__webpack_public_path__</code> on your entry point.</p>\n<pre><code class="lang-javascript">__webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath\n\n<span class="token comment">// rest of your application entry</span>\n</code></pre>\n',title:"Output"},title:"Output",url:"/concepts/output/"},{file:{attributes:{title:"Loaders",sort:4,contributors:["SpaceK33z","TheLarkInn","ev1stensberg","gangachris","jhnns","manekinekko","simon04"],group:"-",anchors:[{title:"Example",id:"example"},{title:"Using Loaders",id:"using-loaders"},{title:"Configuration",id:"configuration"},{title:"Inline",id:"inline"},{title:"CLI",id:"cli"},{title:"Loader Features",id:"loader-features"},{title:"Resolving Loaders",id:"resolving-loaders"}],related:[]},body:'<p>Loaders are transformations that are applied on the source code of a module. They allow you to pre-process files as you <code>import</code> or “load” them. Thus, loaders are kind of like “tasks” in other build tools, and provide a powerful way to handle front-end build steps. Loaders can transform files from a different language (like TypeScript) to JavaScript, or inline images as data URLs. Loaders even allow you to do things like <code>import</code> CSS files directly from your JavaScript modules!</p>\n<h2 class="header"><a class="anchor" href="#example" id="example"></a><span class="text">Example</span><a class="icon-link" href="#example"></a></h2>\n<p>For example, you can use loaders to tell webpack to load a CSS file or to convert TypeScript to JavaScript. To do this, you would start by installing the loaders you need:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev css-loader\nnpm <span class="token function">install</span> --save-dev ts-loader\n</code></pre>\n<p>And then instruct webpack to use the <a href="/loaders/css-loader"><code>css-loader</code></a> for every <code>.css</code> file and the <a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a> for all <code>.ts</code> files:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.ts$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#using-loaders" id="using-loaders"></a><span class="text">Using Loaders</span><a class="icon-link" href="#using-loaders"></a></h2>\n<p>There are three ways to use loaders in your application:</p>\n<ul>\n<li><a href="#configuration">Configuration</a> (recommended): Specify them in your <strong>webpack.config.js</strong> file.</li>\n<li><a href="#inline">Inline</a>: Specify them explicitly in each <code>import</code> statement.</li>\n<li><a href="#cli">CLI</a>: Specify them within a shell command.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#configuration" id="configuration"></a><span class="text">Configuration</span><a class="icon-link" href="#configuration"></a></h3>\n<p><a href="/configuration/module/#module-rules"><code>module.rules</code></a> allows you to specify several loaders within your webpack configuration.\nThis is a concise way to display loaders, and helps to maintain clean code. It also offers you a full overview of each respective loader:</p>\n<pre><code class="lang-js">  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <a class="code-link" href="/loaders/style-loader">\'style-loader\'</a> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <a class="code-link" href="/loaders/css-loader">\'css-loader\'</a><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              modules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#inline" id="inline"></a><span class="text">Inline</span><a class="icon-link" href="#inline"></a></h3>\n<p>It&#39;s possible to specify loaders in an <code>import</code> statement, or any <a href="/api/module-methods">equivalent &quot;importing&quot; method</a>. Separate loaders from the resource with <code>!</code>. Each part is resolved relative to the current directory.</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">\'style-loader!css-loader?modules!./styles.css\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>It&#39;s possible to overwrite any loaders in the configuration by prefixing the entire rule with <code>!</code>.</p>\n<p>Options can be passed with a query parameter, e.g. <code>?key=value&amp;foo=bar</code>, or a JSON object, e.g. <code>?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}</code>.</p>\n<blockquote class="tip"><div class="tip-content"> Use <code>module.rules</code> whenever possible, as this will reduce boilerplate in your source code and allow you to debug or locate a loader faster if something goes south. </div></blockquote><h3 class="header"><a class="anchor" href="#cli" id="cli"></a><span class="text">CLI</span><a class="icon-link" href="#cli"></a></h3>\n<p>You can also use loaders through the CLI:</p>\n<pre><code class="lang-sh">webpack --module-bind jade-loader --module-bind <span class="token string">\'css=style-loader!css-loader\'</span>\n</code></pre>\n<p>This uses the <code>jade-loader</code> for <code>.jade</code> files, and the <a href="/loaders/style-loader"><code>style-loader</code></a> and <a href="/loaders/css-loader"><code>css-loader</code></a> for <code>.css</code> files.</p>\n<h2 class="header"><a class="anchor" href="#loader-features" id="loader-features"></a><span class="text">Loader Features</span><a class="icon-link" href="#loader-features"></a></h2>\n<ul>\n<li>Loaders can be chained. They are applied in a pipeline to the resource. A chain of loaders are compiled chronologically. The first loader in a chain of loaders returns a value to the next. At the end loader, webpack expects JavaScript to be returned.</li>\n<li>Loaders can be synchronous or asynchronous.</li>\n<li>Loaders run in Node.js and can do everything that’s possible there.</li>\n<li>Loaders accept query parameters. This can be used to pass configuration to the loader.</li>\n<li>Loaders can also be configured with an <code>options</code> object.</li>\n<li>Normal modules can export a loader in addition to the normal <code>main</code> via <code>package.json</code> with the <code>loader</code> field.</li>\n<li>Plugins can give loaders more features.</li>\n<li>Loaders can emit additional arbitrary files.</li>\n</ul>\n<p>Loaders allow more power in the JavaScript ecosystem through preprocessing\nfunctions (loaders). Users now have more flexibility to include fine-grained logic such as compression, packaging, language translations and <a href="/loaders">more</a>.</p>\n<h2 class="header"><a class="anchor" href="#resolving-loaders" id="resolving-loaders"></a><span class="text">Resolving Loaders</span><a class="icon-link" href="#resolving-loaders"></a></h2>\n<p>Loaders follow the standard <a href="/concepts/module-resolution/">module resolution</a>. In most cases it will be loaders from the <a href="/concepts/module-resolution/#module-paths">module path</a> (think <code>npm install</code>, <code>node_modules</code>).</p>\n<p>A loader module is expected to export a function and be written in Node.js compatible JavaScript. They are most commonly managed with npm, but you can also have custom loaders as files within your application. By convention, loaders are usually named <code>xxx-loader</code> (e.g. <code>json-loader</code>). See <a href="/development/how-to-write-a-loader">&quot;How to Write a Loader?&quot;</a> for more information.</p>\n',title:"Loaders"},title:"Loaders",url:"/concepts/loaders/"},{file:{attributes:{title:"Plugins",sort:5,contributors:["TheLarkInn","jhnns","johnstew","rouzbeh84"],group:"-",anchors:[{title:"Anatomy",id:"anatomy"},{title:"Usage",id:"usage"},{title:"Configuration",id:"configuration"},{title:"Node API",id:"node-api"}],related:[]},body:'<p><strong>Plugins</strong> are the <a href="https://github.com/webpack/tapable">backbone</a> of webpack. webpack itself is built on the <strong>same plugin system</strong> that you use in your webpack configuration!</p>\n<p>They also serve the purpose of doing <strong>anything else</strong> that a <a href="/concepts/loaders">loader</a> cannot do.</p>\n<h2 class="header"><a class="anchor" href="#anatomy" id="anatomy"></a><span class="text">Anatomy</span><a class="icon-link" href="#anatomy"></a></h2>\n<p>A webpack <strong>plugin</strong> is a JavaScript object that has an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply</code></a> property. This <code>apply</code> property is called by the webpack compiler, giving access to the <strong>entire</strong> compilation lifecycle.</p>\n<p><strong>ConsoleLogOnBuildWebpackPlugin.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">ConsoleLogOnBuildWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nConsoleLogOnBuildWebpackPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'run\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The webpack build process is starting!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> As a clever JavaScript developer you may remember the <code>Function.prototype.apply</code> method. Because of this method you can pass any function as plugin (<code>this</code> will point to the <code>compiler</code>). You can use this style to inline custom plugins in your configuration. </div></blockquote><h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Since <strong>plugins</strong> can take arguments/options, you must pass a <code>new</code> instance to the <code>plugins</code> property in your webpack configuration.</p>\n<p>Depending on how you are using webpack, there are multiple ways to use plugins.</p>\n<h3 class="header"><a class="anchor" href="#configuration" id="configuration"></a><span class="text">Configuration</span><a class="icon-link" href="#configuration"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//installed via npm</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//to access built-in plugins</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|jsx)$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">\'./src/index.html\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#node-api" id="node-api"></a><span class="text">Node API</span><a class="icon-link" href="#node-api"></a></h3>\n<blockquote class="todo"><div class="tip-content"> Even when using the Node API, users should pass plugins via the <code>plugins</code> property in the configuration. Using <code>compiler.apply</code> should not be the recommended way. </div></blockquote><p><strong>some-node-script.js</strong></p>\n<pre><code class="lang-javascript">  <span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//to access webpack runtime</span>\n  <span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Did you know: The example seen above is extremely similar to the <a href="https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292">webpack runtime itself!</a> There are lots of great usage examples hiding in the <a href="https://github.com/webpack/webpack">webpack source code</a> that you can apply to your own configurations and scripts! </div></blockquote>',title:"Plugins"},title:"Plugins",url:"/concepts/plugins/"},{file:{attributes:{title:"Configuration",sort:6,contributors:["TheLarkInn","simon04"],group:"-",anchors:[{title:"The Simplest Configuration",id:"the-simplest-configuration"},{title:"Multiple Targets",id:"multiple-targets"},{title:"Using other Configuration Languages",id:"using-other-configuration-languages"}],related:[]},body:'<p>You may have noticed that few webpack configurations look exactly alike. This is because <strong>webpack&#39;s configuration file is a JavaScript file that exports an object.</strong> This object is then processed by webpack based upon its defined properties.</p>\n<p>Because it&#39;s a standard Node.js CommonJS module, you <strong>can do the following</strong>:</p>\n<ul>\n<li>import other files via <code>require(...)</code></li>\n<li>use utilities on npm via <code>require(...)</code></li>\n<li>use JavaScript control flow expressions i. e. the <code>?:</code> operator</li>\n<li>use constants or variables for often used values</li>\n<li>write and execute functions to generate a part of the configuration</li>\n</ul>\n<p>Use these features when appropriate.</p>\n<p>While they are technically feasible, <strong>the following practices should be avoided</strong>:</p>\n<ul>\n<li>Access CLI arguments, when using the webpack CLI (instead write your own CLI, or <a href="/configuration/configuration-types/">use <code>--env</code></a>)</li>\n<li>Export non-deterministic values (calling webpack twice should result in the same output files)</li>\n<li>Write long configurations (instead split the configuration into multiple files)</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> The most important part to take away from this document is that there are many different ways to format and style your webpack configuration. The key is to stick with something consistent that you and your team can understand and maintain. </div></blockquote><p>The following examples below describe how webpack&#39;s configuration object can be both expressive and configurable because <em>it is code</em>:</p>\n<h2 class="header"><a class="anchor" href="#the-simplest-configuration" id="the-simplest-configuration"></a><span class="text">The Simplest Configuration</span><a class="icon-link" href="#the-simplest-configuration"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./foo.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'foo.bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#multiple-targets" id="multiple-targets"></a><span class="text">Multiple Targets</span><a class="icon-link" href="#multiple-targets"></a></h2>\n<p><em>See</em>: <a href="/configuration/configuration-types/#exporting-multiple-configurations">Exporting multiple configurations</a></p>\n<h2 class="header"><a class="anchor" href="#using-other-configuration-languages" id="using-other-configuration-languages"></a><span class="text">Using other Configuration Languages</span><a class="icon-link" href="#using-other-configuration-languages"></a></h2>\n<p>webpack accepts configuration files written in multiple programming and data languages.</p>\n<p><em>See</em>: <a href="/configuration/configuration-languages/">Configuration Languages</a></p>\n',title:"Configuration"},title:"Configuration",url:"/concepts/configuration/"},{file:{attributes:{title:"Modules",sort:7,contributors:["TheLarkInn","rouzbeh84","simon04"],group:"-",anchors:[{title:"What is a webpack Module",id:"what-is-a-webpack-module"},{title:"Supported Module Types",id:"supported-module-types"}],related:[]},body:'<p>In <a href="https://en.wikipedia.org/wiki/Modular_programming">modular programming</a>, developers break programs up into discrete chunks of functionality called a <em>module</em>.</p>\n<p>Each module has a smaller surface area than a full program, making verification, debugging, and testing trivial.\nWell-written <em>modules</em> provide solid abstractions and encapsulation boundaries, so that each module has a coherent design and a clear purpose within the overall application.</p>\n<p>Node.js has supported modular programming almost since its inception.\nOn the web, however, support for <em>modules</em> has been slow to arrive.\nMultiple tools exist that support modular JavaScript on the web, with a variety of benefits and limitations.\nwebpack builds on lessons learned from these systems and applies the concept of <em>modules</em> to any file in your project.</p>\n<h2 class="header"><a class="anchor" href="#what-is-a-webpack-module" id="what-is-a-webpack-module"></a><span class="text">What is a webpack Module</span><a class="icon-link" href="#what-is-a-webpack-module"></a></h2>\n<p>In contrast to <a href="https://nodejs.org/api/modules.html">Node.js modules</a>, webpack <em>modules</em> can express their <em>dependencies</em> in a variety of ways. A few examples are:</p>\n<ul>\n<li>An <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES2015 <code>import</code></a> statement</li>\n<li>A <a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS</a> <code>require()</code> statement</li>\n<li>An <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a> <code>define</code> and <code>require</code> statement</li>\n<li>An <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"><code>@import</code> statement</a> inside of a css/sass/less file.</li>\n<li>An image url in a stylesheet (<code>url(...)</code>) or html (<code>&lt;img src=...&gt;</code>) file.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> webpack 1 requires a specific loader to convert ES2015 <code>import</code>, however this is possible out of the box via webpack 2 </div></blockquote><h2 class="header"><a class="anchor" href="#supported-module-types" id="supported-module-types"></a><span class="text">Supported Module Types</span><a class="icon-link" href="#supported-module-types"></a></h2>\n<p>webpack supports modules written in a variety of languages and preprocessors, via <em>loaders</em>. <em>Loaders</em> describe to webpack <strong>how</strong> to process non-JavaScript <em>modules</em> and include these <em>dependencies</em> into your <em>bundles</em>.\nThe webpack community has built <em>loaders</em> for a wide variety of popular languages and language processors, including:</p>\n<ul>\n<li><a href="http://coffeescript.org">CoffeeScript</a></li>\n<li><a href="https://www.typescriptlang.org">TypeScript</a></li>\n<li><a href="https://babeljs.io">ESNext (Babel)</a></li>\n<li><a href="http://sass-lang.com">Sass</a></li>\n<li><a href="http://lesscss.org">Less</a></li>\n<li><a href="http://stylus-lang.com">Stylus</a></li>\n</ul>\n<p>And many others! Overall, webpack provides a powerful and rich API for customization that allows one to use webpack for <strong>any stack</strong>, while staying <strong>non-opinionated</strong> about your development, testing, and production workflows.</p>\n<p>For a full list, see <a href="/loaders"><strong>the list of loaders</strong></a> or <a href="/api/loaders"><strong>write your own</strong></a>.</p>\n',title:"Modules"},title:"Modules",url:"/concepts/modules/"},{file:{attributes:{title:"Module Resolution",sort:8,contributors:["pastelsky","pksjce"],group:"-",anchors:[{title:"Resolving rules in webpack",id:"resolving-rules-in-webpack"},{title:"Absolute paths",id:"absolute-paths"},{title:"Relative paths",id:"relative-paths"},{title:"Module paths",id:"module-paths"},{title:"Resolving Loaders",id:"resolving-loaders"},{title:"Caching",id:"caching"}],related:[]},body:'<p>A resolver is a library which helps in locating a module by its absolute path.\nA module can be required as a dependency from another module as:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">\'path/to/module\'</span>\n<span class="token comment">// or</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path/to/module\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p>The dependency module can be from the application code or a third party library. The resolver helps\nwebpack find the module code that needs to be included in the bundle for every such <code>require</code>/<code>import</code> statement.\nwebpack uses <a href="https://github.com/webpack/enhanced-resolve">enhanced-resolve</a> to resolve file paths while bundling modules.</p>\n<h2 class="header"><a class="anchor" href="#resolving-rules-in-webpack" id="resolving-rules-in-webpack"></a><span class="text">Resolving rules in webpack</span><a class="icon-link" href="#resolving-rules-in-webpack"></a></h2>\n<p>Using <code>enhanced-resolve</code>, webpack can resolve three kinds of file paths:</p>\n<h3 class="header"><a class="anchor" href="#absolute-paths" id="absolute-paths"></a><span class="text">Absolute paths</span><a class="icon-link" href="#absolute-paths"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">"/home/me/file"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token string">"C:\\\\Users\\\\me\\\\file"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Since we already have the absolute path to the file, no further resolution is required.</p>\n<h3 class="header"><a class="anchor" href="#relative-paths" id="relative-paths"></a><span class="text">Relative paths</span><a class="icon-link" href="#relative-paths"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">"../src/file1"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"./file2"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>In this case, the directory of the resource file where the <code>import</code> or <code>require</code> occurs is taken to be the context directory. The relative path specified in the <code>import/require</code> is joined to this context path to produce the absolute path to the module.</p>\n<h3 class="header"><a class="anchor" href="#module-paths" id="module-paths"></a><span class="text">Module paths</span><a class="icon-link" href="#module-paths"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">"module"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"module/lib/file"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Modules are searched for inside all directories specified in <a href="/configuration/resolve/#resolve-modules"><code>resolve.modules</code></a>.\nYou can replace the original module path by an alternate path by creating an alias for it using <a href="/configuration/resolve/#resolve-alias"><code>resolve.alias</code></a> configuration option.</p>\n<p>Once the path is resolved based on the above rule, the resolver checks to see if the path points to a file or a directory. If the path points to a file:</p>\n<ul>\n<li>If the path has a file extension, then the file is bundled straightaway.</li>\n<li>Otherwise, the file extension is resolved using the <a href="/configuration/resolve/#resolve-extensions"><code>resolve.extensions</code></a> option, which tells the resolver which extensions (eg - <code>.js</code>, <code>.jsx</code>) are acceptable for resolution.</li>\n</ul>\n<p>If the path points to a folder, then the following steps are taken to find the right file with the right extension:</p>\n<ul>\n<li>If the folder contains a <code>package.json</code> file, then fields specified in <a href="/configuration/resolve/#resolve-mainfields"><code>resolve.mainFields</code></a> configuration option are looked up in order, and the first such field in <code>package.json</code> determines the file path. </li>\n<li>If there is no <code>package.json</code> or if the main fields do not return a valid path, file names specified in the <a href="/configuration/resolve/#resolve-mainfiles"><code>resolve.mainFiles</code></a> configuration option are looked for in order, to see if a matching filename exists in the imported/required directory .</li>\n<li>The file extension is then resolved in a similar way using the <code>resolve.extensions</code> option.</li>\n</ul>\n<p>webpack provides reasonable <a href="/configuration/resolve">defaults</a> for these options depending on your build target.</p>\n<h2 class="header"><a class="anchor" href="#resolving-loaders" id="resolving-loaders"></a><span class="text">Resolving Loaders</span><a class="icon-link" href="#resolving-loaders"></a></h2>\n<p>This follows the same rules as those specified for file resolution. But the <a href="/configuration/resolve/#resolveloader"><code>resolveLoader</code></a> configuration option can be used to have separate resolution rules for loaders.</p>\n<h2 class="header"><a class="anchor" href="#caching" id="caching"></a><span class="text">Caching</span><a class="icon-link" href="#caching"></a></h2>\n<p>Every filesystem access is cached, so that multiple parallel or serial requests to the same file occur faster. In <a href="/configuration/watch/#watch">watch mode</a>, only modified files are evicted from the cache. If watch mode is off, then the cache gets purged before every compilation.</p>\n<p>See <a href="/configuration/resolve">Resolve API</a> to learn more on the configuration options mentioned above.</p>\n',title:"Module Resolution"},title:"Module Resolution",url:"/concepts/module-resolution/"},{file:{attributes:{title:"Dependency Graph",sort:9,contributors:["TheLarkInn"],group:"-",anchors:[],related:[]},body:'<p>Any time one file depends on another, webpack treats this as a <em>dependency</em>. This allows webpack to take non-code assets, such as images or web fonts, and also provide them as <em>dependencies</em> for your application.</p>\n<p>When webpack processes your application, it starts from a list of modules defined on the command line or in its config file.\nStarting from these <em>entry points</em>, webpack recursively builds a <em>dependency graph</em> that includes every module your application needs, then packages all of those modules into a small number of <em>bundles</em> - often, just one - to be loaded by the browser.</p>\n<blockquote class="tip"><div class="tip-content"> Bundling your application is especially powerful for <em>HTTP/1.1</em> clients, as it minimizes the number of times your app has to wait while the browser starts a new request. For <em>HTTP/2</em>, you can also use Code Splitting and bundling through webpack for the <a href="https://medium.com/webpack/webpack-http-2-7083ec3f3ce6#.7y5d3hz59">best optimization</a>. </div></blockquote>',title:"Dependency Graph"},title:"Dependency Graph",url:"/concepts/dependency-graph/"},{file:{attributes:{title:"Targets",sort:10,contributors:["TheLarkInn","johnstew","rouzbeh84","srilman"],group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Multiple Targets",id:"multiple-targets"},{title:"Resources",id:"resources"}],related:[]},body:'<p>Because JavaScript can be written for both server and browser, webpack offers multiple deployment <em>targets</em> that you can set in your webpack <a href="/configuration">configuration</a>.</p>\n<blockquote class="warning"><div class="tip-content"> The webpack <code>target</code> property is not to be confused with the <code>output.libraryTarget</code> property. For more information see <a href="/concepts/output">our guide</a> on the <code>output</code> property. </div></blockquote><h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>To set the <code>target</code> property, you simply set the target value in your webpack config:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token string">\'node\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>In the example above, using <code>node</code> webpack will compile for usage in a Node.js-like environment (uses Node.js <code>require</code> to load chunks and not touch any built in modules like <code>fs</code> or <code>path</code>).</p>\n<p>Each <em>target</em> has a variety of deployment/environment specific additions, support to fit its needs. See what <a href="/configuration/target">targets are available</a>.</p>\n<blockquote class="todo"><div class="tip-content"> Further expansion for other popular target values </div></blockquote><h2 class="header"><a class="anchor" href="#multiple-targets" id="multiple-targets"></a><span class="text">Multiple Targets</span><a class="icon-link" href="#multiple-targets"></a></h2>\n<p>Although webpack does <strong>not</strong> support multiple strings being passed into the <code>target</code> property, you can create an isomorphic library by bundling two separate configurations:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> serverConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token string">\'node\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'lib.node.js\'</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> clientConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token comment">// &lt;=== can be omitted as default is \'web\'</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'lib.js\'</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span> serverConfig<span class="token punctuation">,</span> clientConfig <span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The example above will create a <code>lib.js</code> and <code>lib.node.js</code> file in your <code>dist</code> folder.</p>\n<h2 class="header"><a class="anchor" href="#resources" id="resources"></a><span class="text">Resources</span><a class="icon-link" href="#resources"></a></h2>\n<p>As seen from the options above there are multiple different deployment <em>targets</em> that you can choose from. Below is a list of examples, and resources that you can refer to.</p>\n<ul>\n<li><strong><a href="https://github.com/TheLarkInn/compare-webpack-target-bundles">compare-webpack-target-bundles</a></strong>: A great resource for testing and viewing different webpack <em>targets</em>. Also great for bug reporting.</li>\n<li><strong><a href="https://github.com/chentsulin/electron-react-boilerplate">Boilerplate of Electron-React Application</a></strong>: A good example of a build process for electron&#39;s main process and renderer process.</li>\n</ul>\n<blockquote class="todo"><div class="tip-content"> Need to find up to date examples of these webpack targets being used in live code or boilerplates. </div></blockquote>',title:"Targets"},title:"Targets",url:"/concepts/targets/"},{file:{attributes:{title:"The Manifest",sort:10,contributors:["skipjack"],related:[{title:"Separating a Manifest",url:"https://survivejs.com/webpack/optimizing/separating-manifest/"},{title:"Predictable Long Term Caching with Webpack",url:"https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31"},{title:"Caching",url:"/guides/caching"}],group:"-",anchors:[{title:"Runtime",id:"runtime"},{title:"Manifest",id:"manifest"},{title:"The Problem",id:"the-problem"}]},body:'<p>In a typical application or site built with webpack, there are three main types of code:</p>\n<ol>\n<li>The source code you, and maybe your team, have written.</li>\n<li>Any third-party library or &quot;vendor&quot; code your source is dependent on.</li>\n<li>A webpack runtime and <em>manifest</em> that conducts the interaction of all modules.</li>\n</ol>\n<p>This article will focus on the last of these three parts, the runtime and in particular the manifest.</p>\n<h2 class="header"><a class="anchor" href="#runtime" id="runtime"></a><span class="text">Runtime</span><a class="icon-link" href="#runtime"></a></h2>\n<p>As mentioned above, we&#39;ll only briefly touch on this. The runtime, along with the manifest data, is basically all the code webpack needs to connect your modularized application while it&#39;s running in the browser. It contains the loading and resolving logic needed to connect your modules as they interact. This includes connecting modules that have already been loaded into the browser as well as logic to lazy-load the ones that haven&#39;t.</p>\n<h2 class="header"><a class="anchor" href="#manifest" id="manifest"></a><span class="text">Manifest</span><a class="icon-link" href="#manifest"></a></h2>\n<p>So, once your application hits the browser in the form of an <code>index.html</code> file, some bundles, and a variety of other assets, what does it look like? That <code>/src</code> directory you meticulously laid out is now gone, so how does webpack manage the interaction between all of your modules? This is where the manifest data comes in...</p>\n<p>As the compiler enters, resolves, and maps out your application, it keeps detailed notes on all your modules. This collection of data is called the &quot;Manifest&quot; and it&#39;s what the runtime will use to resolve and load modules once they&#39;ve been bundled and shipped to the browser. No matter which <a href="/api/module-methods">module syntax</a> you have chosen, those <code>import</code> or <code>require</code> statements have now become <code>__webpack_require__</code> methods that point to module identifiers. Using the data in the manifest, the runtime will be able to find out where to retrieve the modules behind the identifiers.</p>\n<h2 class="header"><a class="anchor" href="#the-problem" id="the-problem"></a><span class="text">The Problem</span><a class="icon-link" href="#the-problem"></a></h2>\n<p>So now you have a little bit of insight about how webpack works behind the scenes. &quot;But, how does this affect me?&quot;, you might ask. The simple answer is that most of the time it doesn&#39;t. The runtime will do its thing, utilizing the manifest, and everything will appear to just magically work once your application hits the browser. However, if you decide to improve your projects performance by utilizing browser caching, this process will all of a sudden become an important thing to understand.</p>\n<p>By using content hashes within your bundle file names, you can indicate to the browser when the contents of a file has changed thus invalidating the cache. Once you start doing this though, you&#39;ll immediately notice some funny behavior. Certain hashes change even when their contents apparently does not. This is caused by the injection of the runtime and manifest which changes every build.</p>\n<p>See <a href="/guides/output-management#the-manifest">the manifest section</a> of our <em>Managing Built Files</em> guide to learn how to extract the manifest, and read the guides below to learn more about the intricacies of long term caching.</p>\n',title:"The Manifest"},title:"The Manifest",url:"/concepts/manifest/"},{file:{attributes:{title:"Hot Module Replacement",sort:11,contributors:["GRardB","SpaceK33z","rouzbeh84","skipjack","sokra"],group:"-",anchors:[{title:"How It Works",id:"how-it-works"},{title:"In the Application",id:"in-the-application"},{title:"In the Compiler",id:"in-the-compiler"},{title:"In a Module",id:"in-a-module"},{title:"In the Runtime",id:"in-the-runtime"},{title:"Get Started",id:"get-started"}],related:[]},body:'<p>Hot Module Replacement (HMR) exchanges, adds, or removes <a href="/concepts/modules/">modules</a> while an application is running, without a full reload. This can significantly speed up development in a few ways:</p>\n<ul>\n<li>Retain application state which is lost during a full reload.</li>\n<li>Save valuable development time by only updating what&#39;s changed.</li>\n<li>Tweak styling faster -- almost comparable to changing styles in the browser&#39;s debugger.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#how-it-works" id="how-it-works"></a><span class="text">How It Works</span><a class="icon-link" href="#how-it-works"></a></h2>\n<p>Let&#39;s go through some different viewpoints to understand exactly how HMR works...</p>\n<h3 class="header"><a class="anchor" href="#in-the-application" id="in-the-application"></a><span class="text">In the Application</span><a class="icon-link" href="#in-the-application"></a></h3>\n<p>The following steps allow modules to be swapped in and out of an application:</p>\n<ol>\n<li>The application asks the HMR runtime to check for updates.</li>\n<li>The runtime asynchronously downloads the updates and notifies the application.</li>\n<li>The application then asks the runtime to apply the updates.</li>\n<li>The runtime synchronously applies the updates.</li>\n</ol>\n<p>You can set up HMR so that this process happens automatically, or you can choose to require user interaction for updates to occur.</p>\n<h3 class="header"><a class="anchor" href="#in-the-compiler" id="in-the-compiler"></a><span class="text">In the Compiler</span><a class="icon-link" href="#in-the-compiler"></a></h3>\n<p>In addition to normal assets, the compiler needs to emit an &quot;update&quot; to allow updating from previous version to the new version. The &quot;update&quot; consists of two parts:</p>\n<ol>\n<li>The updated <a href="/concepts/manifest">manifest</a> (JSON)</li>\n<li>One or more updated chunks (JavaScript)</li>\n</ol>\n<p>The manifest contains the new compilation hash and a list of all updated chunks. Each of these chunks contains the new code for all updated modules (or a flag indicating that the module was removed).</p>\n<p>The compiler ensures that module IDs and chunk IDs are consistent between these builds. It typically stores these IDs in memory (e.g. with <a href="/configuration/dev-server/">webpack-dev-server</a>), but it&#39;s also possible to store them in a JSON file.</p>\n<h3 class="header"><a class="anchor" href="#in-a-module" id="in-a-module"></a><span class="text">In a Module</span><a class="icon-link" href="#in-a-module"></a></h3>\n<p>HMR is an opt-in feature that only affects modules containing HMR code. One example would be patching styling through the <a href="https://github.com/webpack/style-loader"><code>style-loader</code></a>. In order for patching to work, the <code>style-loader</code> implements the HMR interface; when it receives an update through HMR, it replaces the old styles with the new ones.</p>\n<p>Similarly, when implementing the HMR interface in a module, you can describe what should happen when the module is updated. However, in most cases, it&#39;s not mandatory to write HMR code in every module. If a module has no HMR handlers, the update bubbles up. This means that a single handler can update a complete module tree. If a single module from the tree is updated, the entire set of dependencies is reloaded.</p>\n<p>See the <a href="/api/hot-module-replacement">HMR API page</a> for details on the <code>module.hot</code> interface.</p>\n<h3 class="header"><a class="anchor" href="#in-the-runtime" id="in-the-runtime"></a><span class="text">In the Runtime</span><a class="icon-link" href="#in-the-runtime"></a></h3>\n<p>Here things get a bit more technical... if you&#39;re not interested in the internals, feel free to jump to the <a href="/api/hot-module-replacement">HMR API page</a> or <a href="/guides/hot-module-replacement">HMR guide</a>.</p>\n<p>For the module system runtime, additional code is emitted to track module <code>parents</code> and <code>children</code>. On the management side, the runtime supports two methods: <code>check</code> and <code>apply</code>.</p>\n<p>A <code>check</code> makes an HTTP request to the update manifest. If this request fails, there is no update available. If it succeeds, the list of updated chunks is compared to the list of currently loaded chunks. For each loaded chunk, the corresponding update chunk is downloaded. All module updates are stored in the runtime. When all update chunks have been downloaded and are ready to be applied, the runtime switches into the <code>ready</code> state.</p>\n<p>The <code>apply</code> method flags all updated modules as invalid. For each invalid module, there needs to be an update handler in the module or in its parent(s). Otherwise, the invalid flag bubbles up and invalidates parent(s) as well. Each bubble continues until the app&#39;s entry point or a module with an update handler is reached (whichever comes first). If it bubbles up from an entry point, the process fails.</p>\n<p>Afterwards, all invalid modules are disposed (via the dispose handler) and unloaded. The current hash is then updated and all <code>accept</code> handlers are called. The runtime switches back to the <code>idle</code> state and everything continues as normal.</p>\n<h2 class="header"><a class="anchor" href="#get-started" id="get-started"></a><span class="text">Get Started</span><a class="icon-link" href="#get-started"></a></h2>\n<p>HMR can be used in development as a LiveReload replacement. <a href="/configuration/dev-server/">webpack-dev-server</a> supports a <code>hot</code> mode in which it tries to update with HMR before trying to reload the whole page. See the <a href="/guides/hot-module-replacement">Hot Module Replacement guide</a> for details.</p>\n<blockquote class="tip"><div class="tip-content"> As with many other features, webpack&#39;s power lies in its customizability. There are <em>many</em> ways of configuring HMR depending on the needs of a particular project. However, for most purposes, <code>webpack-dev-server</code> is a good fit and will allow you to get started with HMR quickly. </div></blockquote>',title:"Hot Module Replacement"},title:"Hot Module Replacement",url:"/concepts/hot-module-replacement/"}]},{title:"Configuration",url:"configuration",pages:[{file:{attributes:{title:"Configuration Languages",sort:2,contributors:["peterblazejewicz","simon04","skipjack","sokra","tarang9211","youta1119"],group:"-",anchors:[{title:"TypeScript",id:"typescript"},{title:"CoffeeScript",id:"coffeescript"},{title:"Babel and JSX",id:"babel-and-jsx"}],related:[]},body:'<p>webpack accepts configuration files written in multiple programming and data languages. The list of supported file extensions can be found at the <a href="https://github.com/js-cli/js-interpret">node-interpret</a> package. Using <a href="https://github.com/js-cli/js-interpret">node-interpret</a>, webpack can handle many different types of configuration files.</p>\n<h2 class="header"><a class="anchor" href="#typescript" id="typescript"></a><span class="text">TypeScript</span><a class="icon-link" href="#typescript"></a></h2>\n<p>To write the webpack configuration in <a href="http://www.typescriptlang.org/">TypeScript</a>, you would first install the necessary dependencies:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev typescript ts-node @types/node @types/webpack\n</code></pre>\n<p>and then proceed to write your configuration:</p>\n<p><strong>webpack.config.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> as webpack from <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> as path from <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config<span class="token punctuation">:</span> webpack<span class="token punctuation">.</span>Configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./foo.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'foo.bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>Not that you&#39;ll also need to check your <code>tsconfig.json</code> file. If the module in <code>compilerOptions</code> in <code>tsconfig.json</code> is <code>commonjs</code>, the setting is complete, else webpack will fail with an error. This occurs because <code>ts-node</code> does not support any module syntax other than <code>commonjs</code>.</p>\n<p>There are two solutions to this issue:</p>\n<ul>\n<li>Modify <code>tsconfig.json</code>.</li>\n<li>Install <code>tsconfig-paths</code>.</li>\n</ul>\n<p>The <strong>first option</strong> is to open your <code>tsconfig.json</code> file and look for <code>compilerOptions</code>. Set <code>target</code> to <code>&quot;ES5&quot;</code> and <code>module</code> to <code>&quot;CommonJS&quot;</code> (or completely remove the <code>module</code> option).</p>\n<p>The <strong>second option</strong> is to install the <code>tsconfig-paths</code> package:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev tsconfig-paths\n</code></pre>\n<p>And create a separate TypeScript configuration specifically for your webpack configs:</p>\n<p><strong>tsconfig-for-webpack-config.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <code>ts-node</code> can resolve a <code>tsconfig.json</code> file using the environment variable provided by <code>tsconfig-path</code>. </div></blockquote><p>Then set the environment variable <code>process.env.TS_NODE_PROJECT</code> provided by <code>tsconfig-path</code> like so:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"TS_NODE_PROJECT=\\"</span>tsconfig-for-webpack-config.json\\<span class="token string">" webpack"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#coffeescript" id="coffeescript"></a><span class="text">CoffeeScript</span><a class="icon-link" href="#coffeescript"></a></h2>\n<p>Similarly, to use <a href="http://coffeescript.org/">CoffeeScript</a>, you would first install the necessary dependencies:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev coffee-script\n</code></pre>\n<p>and then proceed to write your configuration:</p>\n<p><strong>webpack.config.coffee</strong></p>\n<pre><code class="lang-javascript">HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\nwebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\npath <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n\nconfig <span class="token operator">=</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span>\n  output<span class="token punctuation">:</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'my-first-webpack.bundle.js\'</span>\n  module<span class="token punctuation">:</span> rules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|jsx)$/</span>\n    use<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">]</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin<span class="token punctuation">)</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>template<span class="token punctuation">:</span> <span class="token string">\'./src/index.html\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config\n</code></pre>\n<h2 class="header"><a class="anchor" href="#babel-and-jsx" id="babel-and-jsx"></a><span class="text">Babel and JSX</span><a class="icon-link" href="#babel-and-jsx"></a></h2>\n<p>In the example below JSX (React JavaScript Markup) and Babel are used to create a JSON Configuration that webpack can understand.</p>\n<blockquote>\n<p>Courtesy of <a href="https://twitter.com/_developit/status/769583291666169862">Jason Miller</a></p>\n</blockquote>\n<p>First install the necessary dependencies:</p>\n<pre><code class="lang-js">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>register jsxobj babel<span class="token operator">-</span>preset<span class="token operator">-</span>es2015\n</code></pre>\n<p><strong>.babelrc</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"es2015"</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>webpack.config.babel.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> jsxobj <span class="token keyword">from</span> <span class="token string">\'jsxobj\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// example of an imported plugin</span>\n<span class="token keyword">const</span> CustomPlugin <span class="token operator">=</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>config<span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'custom-plugin\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>webpack target<span class="token operator">=</span><span class="token string">"web"</span> watch<span class="token operator">></span>\n    <span class="token operator">&lt;</span>entry path<span class="token operator">=</span><span class="token string">"src/index.js"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>resolve<span class="token operator">></span>\n      <span class="token operator">&lt;</span>alias <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>\n        react<span class="token punctuation">:</span> <span class="token string">\'preact-compat\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'react-dom\'</span><span class="token punctuation">:</span> <span class="token string">\'preact-compat\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>resolve<span class="token operator">></span>\n    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>\n      <span class="token operator">&lt;</span>uglify<span class="token operator">-</span>js opts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        compression<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        mangle<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>CustomPlugin foo<span class="token operator">=</span><span class="token string">"bar"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>webpack<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> If you are using Babel elsewhere and have <code>modules</code> set to <code>false</code>, you will have to either maintain two separate <code>.babelrc</code> files or use <code>const jsxobj = require(&#39;jsxobj&#39;);</code> and <code>module.exports</code> instead of the new <code>import</code> and <code>export</code> syntax. This is because while Node does support many new ES6 features, they don&#39;t yet support ES6 module syntax. </div></blockquote>',title:"Configuration Languages"},title:"Configuration Languages",url:"/configuration/configuration-languages/"},{file:{attributes:{title:"Configuration Types",sort:3,contributors:["kbariotis","simon04","skipjack","sokra"],group:"-",anchors:[{title:"Exporting a Function",id:"exporting-a-function"},{title:"Exporting a Promise",id:"exporting-a-promise"},{title:"Exporting multiple configurations",id:"exporting-multiple-configurations"}],related:[]},body:'<p>Besides exporting a single config object, there are a few more ways that cover other needs as well.</p>\n<h2 class="header"><a class="anchor" href="#exporting-a-function" id="exporting-a-function"></a><span class="text">Exporting a Function</span><a class="icon-link" href="#exporting-a-function"></a></h2>\n<p>Eventually you will find the need to disambiguate in your <code>webpack.config.js</code> between <a href="/guides/development">development</a> and <a href="/guides/production">production builds</a>. You have (at least) two options:</p>\n<p>One option is to export a function from your webpack config instead of exporting an object. The function will be invoked with two arguments:</p>\n<ul>\n<li>An environment as the first parameter. See the <a href="/api/cli#environment-options">environment options CLI documentation</a> for syntax examples.</li>\n<li>An options map (<code>argv</code>) as the second parameter. This describes the options passed to webpack, with keys such as <a href="/api/cli/#output-options"><code>output-filename</code></a> and <a href="/api/cli/#optimize-options"><code>optimize-minimize</code></a>.</li>\n</ul>\n<pre><code class="lang-diff"><span class="token deleted">-module.exports = {</span>\n<span class="token inserted">+module.exports = function(env, argv) {</span>\n<span class="token inserted">+  return {</span>\n<span class="token inserted">+    devtool: env.production ? \'source-maps\' : \'eval\',</span>\n     plugins: [\n       new webpack.optimize.UglifyJsPlugin({\n<span class="token inserted">+        compress: argv[\'optimize-minimize\'] // only if -p or --optimize-minimize were passed</span>\n       })\n     ]\n<span class="token inserted">+  };</span>\n};\n</code></pre>\n<h2 class="header"><a class="anchor" href="#exporting-a-promise" id="exporting-a-promise"></a><span class="text">Exporting a Promise</span><a class="icon-link" href="#exporting-a-promise"></a></h2>\n<p>webpack will run the function exported by the configuration file and wait for a Promise to be returned. Handy when you need to asynchronously load configuration variables.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n        <span class="token comment">/* ... */</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#exporting-multiple-configurations" id="exporting-multiple-configurations"></a><span class="text">Exporting multiple configurations</span><a class="icon-link" href="#exporting-multiple-configurations"></a></h2>\n<p>Instead of exporting a single configuration object/function, you may export multiple configurations (multiple functions are supported since webpack 3.1.0). When running webpack, all configurations are built. For instance, this is useful for <a href="/guides/author-libraries">bundling a library</a> for multiple <a href="/configuration/output#output-librarytarget">targets</a> such as AMD and CommonJS:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'./dist-amd.js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token punctuation">:</span> <span class="token string">\'amd\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'./dist-commonjs.js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token punctuation">:</span> <span class="token string">\'commonjs\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n',title:"Configuration Types"},title:"Configuration Types",url:"/configuration/configuration-types/"},{file:{attributes:{title:"Entry and Context",sort:4,contributors:["skipjack","sokra","tarang9211"],group:"-",anchors:[{title:"context",id:"context"},{title:"entry",id:"entry"},{title:"Naming",id:"naming"},{title:"Dynamic entry",id:"dynamic-entry"}],related:[]},body:'<p>The entry object is where webpack looks to start building the bundle. The context is an absolute string to the directory that contains the entry files.</p>\n<h2 class="header"><a class="anchor" href="#context" id="context"></a><span class="text"><code>context</code></span><a class="icon-link" href="#context"></a></h2>\n<p><code>string</code></p>\n<p>The base directory, an <strong>absolute path</strong>, for resolving entry points and loaders from configuration.</p>\n<pre><code class="lang-js">context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>By default the current directory is used, but it&#39;s recommended to pass a value in your configuration. This makes your configuration independent from CWD (current working directory).</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#entry" id="entry"></a><span class="text"><code>entry</code></span><a class="icon-link" href="#entry"></a></h2>\n<p><code>string | [string] | object { &lt;key&gt;: string | [string] } | (function: () =&gt; string | [string] | object { &lt;key&gt;: string | [string] })</code></p>\n<p>The point or points to enter the application. At this point the application starts executing. If an array is passed all items will be executed.</p>\n<p>A dynamically loaded module is <strong>not</strong> an entry point.</p>\n<p>Simple rule: one entry point per HTML page. SPA: one entry point, MPA: multiple entry points.</p>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  home<span class="token punctuation">:</span> <span class="token string">"./home.js"</span><span class="token punctuation">,</span>\n  about<span class="token punctuation">:</span> <span class="token string">"./about.js"</span><span class="token punctuation">,</span>\n  contact<span class="token punctuation">:</span> <span class="token string">"./contact.js"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#naming" id="naming"></a><span class="text">Naming</span><a class="icon-link" href="#naming"></a></h3>\n<p>If a string or array of strings is passed, the chunk is named <code>main</code>. If an object is passed, each key is the name of a chunk, and the value describes the entrypoint for the chunk.</p>\n<h3 class="header"><a class="anchor" href="#dynamic-entry" id="dynamic-entry"></a><span class="text">Dynamic entry</span><a class="icon-link" href="#dynamic-entry"></a></h3>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'./demo\'</span>\n</code></pre>\n<p>or</p>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./demo\'</span><span class="token punctuation">,</span> <span class="token string">\'./demo2\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>When combining with the <a href="/configuration/output#output-library"><code>output.library</code></a> option: If an array is passed only the last item is exported.</p>\n',title:"Entry and Context"},title:"Entry and Context",url:"/configuration/entry-context/"},{file:{attributes:{title:"Output",sort:5,contributors:["dhurlburtusa","fvgs","irth","mattce","skipjack","sokra","tomasAlabes"],group:"-",anchors:[{title:"output.auxiliaryComment",id:"output-auxiliarycomment"},{title:"output.chunkFilename",id:"output-chunkfilename"},{title:"output.chunkLoadTimeout",id:"output-chunkloadtimeout"},{title:"output.crossOriginLoading",id:"output-crossoriginloading"},{title:"output.devtoolFallbackModuleFilenameTemplate",id:"output-devtoolfallbackmodulefilenametemplate"},{title:"output.devtoolLineToLine",id:"output-devtoollinetoline"},{title:"output.devtoolModuleFilenameTemplate",id:"output-devtoolmodulefilenametemplate"},{title:"output.filename",id:"output-filename"},{title:"output.hashDigest",id:"output-hashdigest"},{title:"output.hashDigestLength",id:"output-hashdigestlength"},{title:"output.hashFunction",id:"output-hashfunction"},{title:"output.hashSalt",id:"output-hashsalt"},{title:"output.hotUpdateChunkFilename",id:"output-hotupdatechunkfilename"},{title:"output.hotUpdateFunction",id:"output-hotupdatefunction"},{title:"output.hotUpdateMainFilename",id:"output-hotupdatemainfilename"},{title:"output.jsonpFunction",id:"output-jsonpfunction"},{title:"output.library",id:"output-library"},{title:"output.libraryExport",id:"output-libraryexport"},{title:"output.libraryTarget",id:"output-librarytarget"},{title:"Expose a Variable",id:"expose-a-variable"},{title:"Expose Via Object Assignment",id:"expose-via-object-assignment"},{title:"Module Definition Systems",id:"module-definition-systems"},{title:"Other Targets",id:"other-targets"},{title:"output.path",id:"output-path"},{title:"output.pathinfo",id:"output-pathinfo"},{title:"output.publicPath",id:"output-publicpath"},{title:"output.sourceMapFilename",id:"output-sourcemapfilename"},{title:"output.sourcePrefix",id:"output-sourceprefix"},{title:"output.strictModuleExceptionHandling",id:"output-strictmoduleexceptionhandling"},{title:"output.umdNamedDefine",id:"output-umdnameddefine"}],related:[]},body:'<p>The top-level <code>output</code> key contains set of options instructing webpack on how and where it should output your bundles, assets and anything else you bundle or load with webpack.</p>\n<h2 class="header"><a class="anchor" href="#output-auxiliarycomment" id="output-auxiliarycomment"></a><span class="text"><code>output.auxiliaryComment</code></span><a class="icon-link" href="#output-auxiliarycomment"></a></h2>\n<p><code>string</code> <code>object</code></p>\n<p>When used in tandem with <a href="#output-library"><code>output.library</code></a> and <a href="#output-librarytarget"><code>output.libraryTarget</code></a>, this option allows users to insert comments within the export wrapper. To insert the same comment for each <code>libraryTarget</code> type, set <code>auxiliaryComment</code> to a string:</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"someLibName"</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span>\n  filename<span class="token punctuation">:</span> <span class="token string">"someLibName.js"</span><span class="token punctuation">,</span>\n  auxiliaryComment<span class="token punctuation">:</span> <span class="token string">"Test Comment"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>which will yield the following:</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"lodash"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">"someLibName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">"someLibName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>__WEBPACK_EXTERNAL_MODULE_1__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>For fine-grained control over each <code>libraryTarget</code> comment, pass an object:</p>\n<pre><code class="lang-js">auxiliaryComment<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  root<span class="token punctuation">:</span> <span class="token string">"Root Comment"</span><span class="token punctuation">,</span>\n  commonjs<span class="token punctuation">:</span> <span class="token string">"CommonJS Comment"</span><span class="token punctuation">,</span>\n  commonjs2<span class="token punctuation">:</span> <span class="token string">"CommonJS2 Comment"</span><span class="token punctuation">,</span>\n  amd<span class="token punctuation">:</span> <span class="token string">"AMD Comment"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-chunkfilename" id="output-chunkfilename"></a><span class="text"><code>output.chunkFilename</code></span><a class="icon-link" href="#output-chunkfilename"></a></h2>\n<p><code>string</code></p>\n<p>This option determines the name of non-entry chunk files. See <a href="#output-filename"><code>output.filename</code></a> option for details on the possible values.</p>\n<p>Note that these filenames need to be generated at runtime to send the requests for chunks. Because of this, placeholders like <code>[name]</code> and <code>[chunkhash]</code> need to add a mapping from chunk id to placeholder value to the output bundle with the webpack runtime. This increases the size and may invalidate the bundle when placeholder value for any chunk changes.</p>\n<p>By default <code>[id].js</code> is used or a value inferred from <a href="#output-filename"><code>output.filename</code></a> (<code>[name]</code> is replaced with <code>[id]</code> or <code>[id].</code> is prepended).</p>\n<h2 class="header"><a class="anchor" href="#output-chunkloadtimeout" id="output-chunkloadtimeout"></a><span class="text"><code>output.chunkLoadTimeout</code></span><a class="icon-link" href="#output-chunkloadtimeout"></a></h2>\n<p><code>integer</code></p>\n<p>Number of milliseconds before chunk request expires, defaults to 120 000. This option is supported since webpack 2.6.0.</p>\n<h2 class="header"><a class="anchor" href="#output-crossoriginloading" id="output-crossoriginloading"></a><span class="text"><code>output.crossOriginLoading</code></span><a class="icon-link" href="#output-crossoriginloading"></a></h2>\n<p><code>boolean</code> <code>string</code></p>\n<p>Only used when <a href="/configuration/target"><code>target</code></a> is web, which uses JSONP for loading on-demand chunks, by adding script tags.</p>\n<p>Enable <a href="https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin">cross-origin</a> loading of chunks. The following values are accepted...</p>\n<p><code>crossOriginLoading: false</code> - Disable cross-origin loading (default)</p>\n<p><code>crossOriginLoading: &quot;anonymous&quot;</code> - Enable cross-origin loading <strong>without credentials</strong></p>\n<p><code>crossOriginLoading: &quot;use-credentials&quot;</code> - Enable cross-origin loading <strong>with credentials</strong></p>\n<h2 class="header"><a class="anchor" href="#output-devtoolfallbackmodulefilenametemplate" id="output-devtoolfallbackmodulefilenametemplate"></a><span class="text"><code>output.devtoolFallbackModuleFilenameTemplate</code></span><a class="icon-link" href="#output-devtoolfallbackmodulefilenametemplate"></a></h2>\n<p><code>string | function(info)</code></p>\n<p>A fallback used when the template string or function above yields duplicates.</p>\n<p>See <a href="#output-devtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>.</p>\n<h2 class="header"><a class="anchor" href="#output-devtoollinetoline" id="output-devtoollinetoline"></a><span class="text"><code>output.devtoolLineToLine</code></span><a class="icon-link" href="#output-devtoollinetoline"></a></h2>\n<p><code>boolean | object</code></p>\n<blockquote>\n<p>Avoid using this option as it is <strong>deprecated</strong> and will soon be removed.</p>\n</blockquote>\n<p>Enables line to line mapping for all or some modules. This produces a simple source map where each line of the generated source is mapped to the same line of the original source. This is a performance optimization and should only be used if all input lines match generated lines.</p>\n<p>Pass a boolean to enable or disable this feature for all modules (defaults to <code>false</code>). An object with <code>test</code>, <code>include</code>, <code>exclude</code> is also allowed. For example, to enable this feature for all javascript files within a certain directory:</p>\n<pre><code class="lang-js">devtoolLineToLine<span class="token punctuation">:</span> <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">\'src/utilities\'</span> <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-devtoolmodulefilenametemplate" id="output-devtoolmodulefilenametemplate"></a><span class="text"><code>output.devtoolModuleFilenameTemplate</code></span><a class="icon-link" href="#output-devtoolmodulefilenametemplate"></a></h2>\n<p><code>string | function(info)</code></p>\n<p>This option is only used when <a href="/configuration/devtool"><code>devtool</code></a> uses an options which requires module names.</p>\n<p>Customize the names used in each source map&#39;s <code>sources</code> array. This can be done by passing a template string or function. For example, when using <code>devtool: &#39;eval&#39;</code>, this is the default:</p>\n<pre><code class="lang-js">devtoolModuleFilenameTemplate<span class="token punctuation">:</span> "webpack<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//[resource-path]?[loaders]"</span>\n</code></pre>\n<p>The following substitutions are available in template strings (via webpack&#39;s internal <a href="https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js"><code>ModuleFilenameHelpers</code></a>):</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Template</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [absolute-resource-path]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The absolute filename\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [all-loaders]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Automatic and explicit loaders and params up to the name of the first loader\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [hash]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The hash of the module identifier\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [id]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The module identifier\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [loaders]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Explicit loaders and params up to the name of the first loader\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [resource]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The path used to resolve the file and any query params used on the first loader\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [resource-path]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The path used to resolve the file without any query params\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>When using a function, the same options are available camel-cased via the <code>info</code> parameter:</p>\n<pre><code class="lang-js">devtoolModuleFilenameTemplate<span class="token punctuation">:</span> info <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> `webpack<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//${info.resourcePath}?${info.loaders}`</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>If multiple modules would result in the same name, <a href="#output-devtoolfallbackmodulefilenametemplate"><code>output.devtoolFallbackModuleFilenameTemplate</code></a> is used instead for these modules.</p>\n<h2 class="header"><a class="anchor" href="#output-filename" id="output-filename"></a><span class="text"><code>output.filename</code></span><a class="icon-link" href="#output-filename"></a></h2>\n<p><code>string</code></p>\n<p>This option determines the name of each output bundle. The bundle is written to the directory specified by the <a href="#output-path"><code>output.path</code></a> option.</p>\n<p>For a single <a href="/configuration/entry-context#entry"><code>entry</code></a> point, this can be a static name.</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n</code></pre>\n<p>However, when creating multiple bundles via more than one entry point, code splitting, or various plugins, you should use one of the following substitutions to give each bundle a unique name...</p>\n<p>Using entry name:</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[name].bundle.js"</span>\n</code></pre>\n<p>Using internal chunk id:</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[id].bundle.js"</span>\n</code></pre>\n<p>Using the unique hash generated for every build:</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[name].[hash].bundle.js"</span>\n</code></pre>\n<p>Using hashes based on each chunks&#39; content:</p>\n<pre><code class="lang-js">filename<span class="token punctuation">:</span> <span class="token string">"[chunkhash].bundle.js"</span>\n</code></pre>\n<p>Make sure to read the <a href="/guides/caching">Caching guide</a> for details. There are more steps involved than just setting this option.</p>\n<p>Note this option is called filename but you are still allowed to use something like <code>&quot;js/[name]/bundle.js&quot;</code> to create a folder structure.</p>\n<p>Note this options does not affect output files for on-demand-loaded chunks. For these files the <a href="#output-chunkfilename"><code>output.chunkFilename</code></a> option is used. It also doesn&#39;t affect files created by loaders. For these files see loader options.</p>\n<p>The following substitutions are available in template strings (via webpack&#39;s internal <a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js"><code>TemplatedPathPlugin</code></a>):</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Template</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [hash]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The hash of the module identifier\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [chunkhash]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The hash of the chunk content\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [name]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The module name\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [id]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The module identifier\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [query]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The module query, i.e., the string following <code>?</code> in the filename\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>The lengths of <code>[hash]</code> and <code>[chunkhash]</code> can be specified using <code>[hash:16]</code> (defaults to 20). Alternatively, specify <a href="#output-hashdigestlength"><code>output.hashDigestLength</code></a> to configure the length globally.</p>\n<blockquote class="tip"><div class="tip-content"> When using the <a href="/plugins/extract-text-webpack-plugin"><code>ExtractTextWebpackPlugin</code></a>, use <code>[contenthash]</code> to obtain a hash of the extracted file (neither <code>[hash]</code> nor <code>[chunkhash]</code> work). </div></blockquote><h2 class="header"><a class="anchor" href="#output-hashdigest" id="output-hashdigest"></a><span class="text"><code>output.hashDigest</code></span><a class="icon-link" href="#output-hashdigest"></a></h2>\n<p>The encoding to use when generating the hash, defaults to <code>&#39;hex&#39;</code>. All encodings from Node.JS&#39; <a href="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding"><code>hash.digest</code></a> are supported.</p>\n<h2 class="header"><a class="anchor" href="#output-hashdigestlength" id="output-hashdigestlength"></a><span class="text"><code>output.hashDigestLength</code></span><a class="icon-link" href="#output-hashdigestlength"></a></h2>\n<p>The prefix length of the hash digest to use, defaults to <code>20</code>.</p>\n<h2 class="header"><a class="anchor" href="#output-hashfunction" id="output-hashfunction"></a><span class="text"><code>output.hashFunction</code></span><a class="icon-link" href="#output-hashfunction"></a></h2>\n<p>The hashing algorithm to use, defaults to <code>&#39;md5&#39;</code>. All functions from Node.JS&#39; <a href="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm"><code>crypto.createHash</code></a> are supported.</p>\n<h2 class="header"><a class="anchor" href="#output-hashsalt" id="output-hashsalt"></a><span class="text"><code>output.hashSalt</code></span><a class="icon-link" href="#output-hashsalt"></a></h2>\n<p>An optional salt to update the hash via Node.JS&#39; <a href="https://nodejs.org/api/crypto.html#crypto_hash_update_data_input_encoding"><code>hash.update</code></a>.</p>\n<h2 class="header"><a class="anchor" href="#output-hotupdatechunkfilename" id="output-hotupdatechunkfilename"></a><span class="text"><code>output.hotUpdateChunkFilename</code></span><a class="icon-link" href="#output-hotupdatechunkfilename"></a></h2>\n<p><code>string</code></p>\n<p>Customize the filenames of hot update chunks. See <a href="#output-filename"><code>output.filename</code></a> option for details on the possible values.</p>\n<p>The only placeholders allowed here are <code>[id]</code> and <code>[hash]</code>, the default being:</p>\n<pre><code class="lang-js">hotUpdateChunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].[hash].hot-update.js"</span>\n</code></pre>\n<p>Here is no need to change it.</p>\n<h2 class="header"><a class="anchor" href="#output-hotupdatefunction" id="output-hotupdatefunction"></a><span class="text"><code>output.hotUpdateFunction</code></span><a class="icon-link" href="#output-hotupdatefunction"></a></h2>\n<p><code>function</code></p>\n<p>Only used when <a href="/configuration/target"><code>target</code></a> is web, which uses JSONP for loading hot updates.</p>\n<p>A JSONP function used to asynchronously load hot-update chunks.</p>\n<p>For details see <a href="#output-jsonpfunction"><code>output.jsonpFunction</code></a>.</p>\n<h2 class="header"><a class="anchor" href="#output-hotupdatemainfilename" id="output-hotupdatemainfilename"></a><span class="text"><code>output.hotUpdateMainFilename</code></span><a class="icon-link" href="#output-hotupdatemainfilename"></a></h2>\n<p><code>string</code></p>\n<p>Customize the main hot update filename. See <a href="#output-filename"><code>output.filename</code></a> option for details on the possible values.</p>\n<p><code>[hash]</code> is the only available placeholder, the default being:</p>\n<pre><code class="lang-js">hotUpdateMainFilename<span class="token punctuation">:</span> <span class="token string">"[hash].hot-update.json"</span>\n</code></pre>\n<p>Here is no need to change it.</p>\n<h2 class="header"><a class="anchor" href="#output-jsonpfunction" id="output-jsonpfunction"></a><span class="text"><code>output.jsonpFunction</code></span><a class="icon-link" href="#output-jsonpfunction"></a></h2>\n<p><code>string</code></p>\n<p>Only used when <a href="/configuration/target"><code>target</code></a> is web, which uses JSONP for loading on-demand chunks.</p>\n<p>A JSONP function name used to asynchronously load chunks or join multiple initial chunks (CommonsChunkPlugin, AggressiveSplittingPlugin).</p>\n<p>This needs to be changed if multiple webpack runtimes (from different compilation) are used on the same webpage.</p>\n<p>If using the <a href="#output-library"><code>output.library</code></a> option, the library name is automatically appended.</p>\n<h2 class="header"><a class="anchor" href="#output-library" id="output-library"></a><span class="text"><code>output.library</code></span><a class="icon-link" href="#output-library"></a></h2>\n<p><code>string</code></p>\n<p><code>string</code> or <code>object</code> (since webpack 3.1.0; for <code>libraryTarget: &quot;umd&quot;</code>)</p>\n<p>How the value of the <code>output.library</code> is used depends on the value of the <a href="#output-librarytarget"><code>output.libraryTarget</code></a> option; please refer to that section for the complete details. Note that the default option for <code>output.libraryTarget</code> is <code>var</code>, so if the following configuration option is used:</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The variable <code>MyLibrary</code> will be bound with the return value of your entry file, if the resulting output is included as a script tag in an HTML page.</p>\n<blockquote class="warning"><div class="tip-content"> Note that if an <code>array</code> is provided as an <code>entry</code> point, only the last module in the array will be exposed. If an <code>object</code> is provided, it can exposed using an <code>array</code> syntax (see <a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">this example</a> for details). </div></blockquote><blockquote class="tip"><div class="tip-content"> Read the <a href="/guides/author-libraries">authoring libraries guide</a> guide for more information on <code>output.library</code> as well as <code>output.libraryTarget</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#output-libraryexport" id="output-libraryexport"></a><span class="text"><code>output.libraryExport</code></span><a class="icon-link" href="#output-libraryexport"></a></h2>\n<p><code>string</code> or <code>string[]</code> (since webpack 3.0.0)</p>\n<blockquote>\n<p>Default: <code>_entry_return_</code></p>\n</blockquote>\n<p>Configure which module or modules will be exposed via the <code>libraryTarget</code>. The default <code>_entry_return_</code> value is the namespace or default module returned by your entry file. The examples below demonstrate the effect of this config when using <code>libraryTarget: &quot;var&quot;</code>, but any target may be used.</p>\n<p>The following configurations are supported:</p>\n<p><code>libraryExport: &quot;default&quot;</code> - The <strong>default export of your entry point</strong> will be assigned to the library target:</p>\n<pre><code class="lang-js"><span class="token comment">// if your entry has a default export of `MyDefaultModule`</span>\n<span class="token keyword">var</span> MyDefaultModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryExport: &quot;MyModule&quot;</code> - The <strong>specified module</strong> will be assigned to the library target:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> MyModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryExport: [&quot;MyModule&quot;, &quot;MySubModule&quot;]</code> - The array is interpreted as a <strong>path to a module</strong> to be assigned to the library target:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> MySubModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">.</span>MySubModule<span class="token punctuation">;</span>\n</code></pre>\n<p>With the <code>libraryExport</code> configurations specified above, the resulting libraries could be utilized as such:</p>\n<pre><code class="lang-js">MyDefaultModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMySubModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-librarytarget" id="output-librarytarget"></a><span class="text"><code>output.libraryTarget</code></span><a class="icon-link" href="#output-librarytarget"></a></h2>\n<p><code>string</code></p>\n<blockquote>\n<p>Default: <code>&quot;var&quot;</code></p>\n</blockquote>\n<p>Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to <a href="#output-library"><code>output.library</code></a>. For the following examples, it is assumed that this value is configured as <code>MyLibrary</code>.</p>\n<blockquote class="tip"><div class="tip-content"> Note that <code>_entry_return_</code> in the example code below is the value returned by the entry point. In the bundle itself, it is the output of the function that is generated by webpack from the entry point. </div></blockquote><h3 class="header"><a class="anchor" href="#expose-a-variable" id="expose-a-variable"></a><span class="text">Expose a Variable</span><a class="icon-link" href="#expose-a-variable"></a></h3>\n<p>These options assign the return value of the entry point (e.g. whatever the entry point exported) to the name provided by <code>output.library</code> at whatever scope the bundle was included at.</p>\n<p><code>libraryTarget: &quot;var&quot;</code> - (default) When your library is loaded, the <strong>return value of your entry point</strong> will be assigned to a variable:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// In a separate script...</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> When using this option, an empty <code>output.library</code> will result in no assignment. </div></blockquote><p><code>libraryTarget: &quot;assign&quot;</code> - This will generate an implied global which has the potential to reassign an existing value (use with caution).</p>\n<pre><code class="lang-js">MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n</code></pre>\n<p>Be aware that if <code>MyLibrary</code> isn&#39;t defined earlier your library will be set in global scope.</p>\n<blockquote class="warning"><div class="tip-content"> When using this option, an empty <code>output.library</code> will result in a broken output bundle. </div></blockquote><h3 class="header"><a class="anchor" href="#expose-via-object-assignment" id="expose-via-object-assignment"></a><span class="text">Expose Via Object Assignment</span><a class="icon-link" href="#expose-via-object-assignment"></a></h3>\n<p>These options assign the return value of the entry point (e.g. whatever the entry point exported) to a specific object under the name defined by <code>output.library</code>.</p>\n<p>If <code>output.library</code> is not assigned a non-empty string, the default behavior is that all properties returned by the entry point will be assigned to the object as defined for the particular <code>output.libraryTarget</code>, via the following code fragment:</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>output<span class="token punctuation">.</span>libraryTarget<span class="token punctuation">}</span><span class="token punctuation">,</span> _entry_return_<span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Note that not setting a <code>output.library</code> will cause all properties returned by the entry point to be assigned to the given object; there are no checks against existing property names. </div></blockquote><p><code>libraryTarget: &quot;this&quot;</code> - The <strong>return value of your entry point</strong> will be assigned to this under the property named by <code>output.library</code>. The meaning of <code>this</code> is up to you:</p>\n<pre><code class="lang-js"><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// In a separate script...</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// if this is window</span>\n</code></pre>\n<p><code>libraryTarget: &quot;window&quot;</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>window</code> object using the <code>output.library</code> value.</p>\n<pre><code class="lang-js">window<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryTarget: &quot;global&quot;</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>global</code> object using the <code>output.library</code> value.</p>\n<pre><code class="lang-js">global<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nglobal<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>libraryTarget: &quot;commonjs&quot;</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>exports</code> object using the <code>output.library</code> value. As the name implies, this is used in CommonJS environments.</p>\n<pre><code class="lang-js">exports<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyLibrary"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#module-definition-systems" id="module-definition-systems"></a><span class="text">Module Definition Systems</span><a class="icon-link" href="#module-definition-systems"></a></h3>\n<p>These options will result in a bundle that comes with a more complete header to ensure compatibility with various module systems. The <code>output.library</code> option will take on a different meaning under the following <code>output.libraryTarget</code> options.</p>\n<p><code>libraryTarget: &quot;commonjs2&quot;</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>module.exports</code>. As the name implies, this is used in CommonJS environments:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyLibrary"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Note that <code>output.library</code> is omitted, thus it is not required for this particular <code>output.libraryTarget</code>.</p>\n<blockquote class="tip"><div class="tip-content"> Wondering the difference between CommonJS and CommonJS2 is? While they are similar, there are some subtle differences between them that are not usually relevant in the context of webpack. (For further details, please <a href="https://github.com/webpack/webpack/issues/1114">read this issue</a>.) </div></blockquote><p><code>libraryTarget: &quot;amd&quot;</code> - This will expose your library as an AMD module.</p>\n<p>AMD modules require that the entry chunk (e.g. the first script loaded by the <code>&lt;script&gt;</code> tag) be defined with specific properties, such as <code>define</code> and <code>require</code> which is typically provided by RequireJS or any compatible loaders (such as almond). Otherwise, loading the resulting AMD bundle directly will result in an error like <code>define is not defined</code>.</p>\n<p>So, with the following configuration...</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"amd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The generated output will be defined with the name &quot;MyLibrary&quot;, i.e.</p>\n<pre><code class="lang-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"MyLibrary"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// This module return value is what your entry chunk returns</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The bundle can be included as part of a script tag, and the bundle can be invoked like so:</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>MyLibrary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with the library...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>If <code>output.library</code> is undefined, the following is generated instead.</p>\n<pre><code class="lang-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// This module returns is what your entry chunk returns</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This bundle will not work as expected, or not work at all (in the case of the almond loader) if loaded directly with a <code>&lt;script&gt;</code> tag. It will only work through a RequireJS compatible asynchronous module loader through the actual path to that file, so in this case, the <code>output.path</code> and <code>output.filename</code> may become important for this particular setup if these are exposed directly on the server.</p>\n<p><code>libraryTarget: &quot;umd&quot;</code> - This exposes your library under all the module definitions, allowing it to work with CommonJS, AMD and as global variable. Take a look at the <a href="https://github.com/umdjs/umd">UMD Repository</a> to learn more.</p>\n<p>In this case, you need the <code>library</code> property to name your module:</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>And finally the output is:</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">"MyLibrary"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//what this module returns is what your entry chunk returns</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Note that omitting <code>library</code> will result in the assignment of all properties returned by the entry point be assigned directly to the root object, as documented under the <a href="#exposing-the-library-via-object-assignment">object assignment section</a>. Example:</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The output will be:</p>\n<pre><code class="lang-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> exports <span class="token punctuation">:</span> root<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//what this module returns is what your entry chunk returns</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Since webpack 3.1.0, you may specify an object for <code>library</code> for differing names per targets:</p>\n<pre><code class="lang-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  library<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>\n    amd<span class="token punctuation">:</span> <span class="token string">"my-library"</span><span class="token punctuation">,</span>\n    commonjs<span class="token punctuation">:</span> <span class="token string">"my-common-library"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Module proof library.</p>\n<h3 class="header"><a class="anchor" href="#other-targets" id="other-targets"></a><span class="text">Other Targets</span><a class="icon-link" href="#other-targets"></a></h3>\n<p><code>libraryTarget: &quot;jsonp&quot;</code> - This will wrap the return value of your entry point into a jsonp wrapper.</p>\n<pre><code class="lang-javascript"><span class="token function">MyLibrary</span><span class="token punctuation">(</span>_entry_return_<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The dependencies for your library will be defined by the <a href="/configuration/externals/"><code>externals</code></a> config.</p>\n<h2 class="header"><a class="anchor" href="#output-path" id="output-path"></a><span class="text"><code>output.path</code></span><a class="icon-link" href="#output-path"></a></h2>\n<p><code>string</code></p>\n<p>The output directory as an <strong>absolute</strong> path.</p>\n<pre><code class="lang-js">path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist/assets\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Note that <code>[hash]</code> in this parameter will be replaced with an hash of the compilation. See the <a href="/guides/caching">Caching guide</a> for details.</p>\n<h2 class="header"><a class="anchor" href="#output-pathinfo" id="output-pathinfo"></a><span class="text"><code>output.pathinfo</code></span><a class="icon-link" href="#output-pathinfo"></a></h2>\n<p><code>boolean</code></p>\n<p>Tell webpack to include comments in bundles with information about the contained modules. This option defaults to <code>false</code> and <strong>should not</strong> be used in production, but it&#39;s very useful in development when reading the generated code.</p>\n<pre><code class="lang-js">pathinfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Note it also adds some info about tree shaking to the generated bundle.</p>\n<h2 class="header"><a class="anchor" href="#output-publicpath" id="output-publicpath"></a><span class="text"><code>output.publicPath</code></span><a class="icon-link" href="#output-publicpath"></a></h2>\n<p><code>string</code></p>\n<p>This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you&#39;ll receive 404 errors while loading these resources.</p>\n<p>This option specifies the <strong>public URL</strong> of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or <code>&lt;base&gt;</code> tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.</p>\n<p>The value of the option is prefixed to every URL created by the runtime or loaders. Because of this <strong>the value of this option ends with <code>/</code></strong> in most cases.</p>\n<p>The default value is an empty string <code>&quot;&quot;</code>.</p>\n<p>Simple rule: The URL of your <a href="#output-path"><code>output.path</code></a> from the view of the HTML page.</p>\n<pre><code class="lang-js">path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public/assets"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"https://cdn.example.com/assets/"</span>\n</code></pre>\n<p>For this configuration:</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span>\nchunkFilename<span class="token punctuation">:</span> <span class="token string">"[id].chunk.js"</span>\n</code></pre>\n<p>A request to a chunk will look like <code>/assets/4.chunk.js</code>.</p>\n<p>A loader outputting HTML might emit something like this:</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/spinner.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n</code></pre>\n<p>or when loading an image in CSS:</p>\n<pre><code class="lang-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(/assets/spinner.gif)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The webpack-dev-server also takes a hint from <code>publicPath</code>, using it to determine where to serve the output files from.</p>\n<p>Note that <code>[hash]</code> in this parameter will be replaced with an hash of the compilation. See the <a href="/guides/caching">Caching guide</a> for details.</p>\n<p>Examples:</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"https://cdn.example.com/assets/"</span><span class="token punctuation">,</span> <span class="token comment">// CDN (always HTTPS)</span>\npublicPath<span class="token punctuation">:</span> "<span class="token comment">//cdn.example.com/assets/", // CDN (same protocol)</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span><span class="token punctuation">,</span> <span class="token comment">// server-relative</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"assets/"</span><span class="token punctuation">,</span> <span class="token comment">// relative to HTML page</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">"../assets/"</span><span class="token punctuation">,</span> <span class="token comment">// relative to HTML page</span>\npublicPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// relative to HTML page (same directory)</span>\n</code></pre>\n<p>In cases where the <code>publicPath</code> of output files can&#39;t be known at compile time, it can be left blank and set dynamically at runtime in the entry file using the <a href="http://stackoverflow.com/questions/12934929/what-are-free-variables">free variable</a> <code>__webpack_public_path__</code>.</p>\n<pre><code class="lang-js"> __webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath\n\n<span class="token comment">// rest of your application entry</span>\n</code></pre>\n<p>See <a href="https://github.com/webpack/webpack/issues/2776#issuecomment-233208623">this discussion</a> for more information on <code>__webpack_public_path__</code>.</p>\n<h2 class="header"><a class="anchor" href="#output-sourcemapfilename" id="output-sourcemapfilename"></a><span class="text"><code>output.sourceMapFilename</code></span><a class="icon-link" href="#output-sourcemapfilename"></a></h2>\n<p><code>string</code></p>\n<p>This option is only used when <a href="/configuration/devtool"><code>devtool</code></a> uses a SourceMap option which writes an output file.</p>\n<p>Configure how source maps are named. By default <code>&quot;[file].map&quot;</code> is used.</p>\n<p>The <code>[name]</code>, <code>[id]</code>, <code>[hash]</code> and <code>[chunkhash]</code> substitutions from <a href="#output-filename">#output-filename</a> can be used. In addition to those, you can use substitutions listed below. The <code>[file]</code> placeholder is replaced with the filename of the original file. We recommend <strong>only using the <code>[file]</code> placeholder</strong>, as the other placeholders won&#39;t work when generating SourceMaps for non-chunk files.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Template</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [file]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The module filename\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Template\n    </div>\n    <div class="table-td-content">\n        [filebase]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The module <a href="https://nodejs.org/api/path.html#path_path_basename_path_ext">basename</a>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#output-sourceprefix" id="output-sourceprefix"></a><span class="text"><code>output.sourcePrefix</code></span><a class="icon-link" href="#output-sourceprefix"></a></h2>\n<p><code>string</code></p>\n<p>Change the prefix for each line in the output bundles.</p>\n<pre><code class="lang-js">sourcePrefix<span class="token punctuation">:</span> <span class="token string">"\\t"</span>\n</code></pre>\n<p>Note by default an empty string is used. Using some kind of indentation makes bundles look more pretty, but will cause issues with multi-line strings.</p>\n<p>There is no need to change it.</p>\n<h2 class="header"><a class="anchor" href="#output-strictmoduleexceptionhandling" id="output-strictmoduleexceptionhandling"></a><span class="text"><code>output.strictModuleExceptionHandling</code></span><a class="icon-link" href="#output-strictmoduleexceptionhandling"></a></h2>\n<p><code>boolean</code></p>\n<p>Tell webpack to remove a module from the module instance cache (<code>require.cache</code>) if it throws an exception when it is <code>require</code>d.</p>\n<p>It defaults to <code>false</code> for performance reasons.</p>\n<p>When set to <code>false</code>, the module is not removed from cache, which results in the exception getting thrown only on the first <code>require</code> call (making it incompatible with node.js).</p>\n<p>For instance, consider <code>module.js</code>:</p>\n<pre><code class="lang-js"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>With <code>strictModuleExceptionHandling</code> set to <code>false</code>, only the first <code>require</code> throws an exception:</p>\n<pre><code class="lang-js"><span class="token comment">// with strictModuleExceptionHandling = false</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- throws</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- doesn\'t throw</span>\n</code></pre>\n<p>Instead, with <code>strictModuleExceptionHandling</code> set to <code>true</code>, all <code>require</code>s of this module throw an exception:</p>\n<pre><code class="lang-js"><span class="token comment">// with strictModuleExceptionHandling = true</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- throws</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- also throw</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#output-umdnameddefine" id="output-umdnameddefine"></a><span class="text"><code>output.umdNamedDefine</code></span><a class="icon-link" href="#output-umdnameddefine"></a></h2>\n<p><code>boolean</code></p>\n<p>When using <code>libraryTarget: &quot;umd&quot;</code>, setting:</p>\n<pre><code class="lang-js">umdNamedDefine<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>will name the AMD module of the UMD build. Otherwise an anonymous <code>define</code> is used.</p>\n',title:"Output"},title:"Output",url:"/configuration/output/"},{file:{attributes:{title:"Module",sort:6,contributors:["dylanonelson","jhnns","jouni-kantola","skipjack","sokra"],group:"-",anchors:[{title:"module.noParse",id:"module-noparse"},{title:"module.rules",id:"module-rules"},{title:"Rule",id:"rule"},{title:"Rule Conditions",id:"rule-conditions"},{title:"Rule results",id:"rule-results"},{title:"Nested rules",id:"nested-rules"},{title:"Rule.enforce",id:"rule-enforce"},{title:"Rule.exclude",id:"rule-exclude"},{title:"Rule.include",id:"rule-include"},{title:"Rule.issuer",id:"rule-issuer"},{title:"Rule.loader",id:"rule-loader"},{title:"Rule.loaders",id:"rule-loaders"},{title:"Rule.oneOf",id:"rule-oneof"},{title:"Rule.options / Rule.query",id:"rule-options-rule-query"},{title:"Rule.parser",id:"rule-parser"},{title:"Rule.resource",id:"rule-resource"},{title:"Rule.resourceQuery",id:"rule-resourcequery"},{title:"Rule.rules",id:"rule-rules"},{title:"Rule.test",id:"rule-test"},{title:"Rule.use",id:"rule-use"},{title:"Condition",id:"condition"},{title:"UseEntry",id:"useentry"},{title:"Module Contexts",id:"module-contexts"}],related:[]},body:'<p>These options determine how the <a href="/concepts/modules">different types of modules</a> within a project will be treated.</p>\n<h2 class="header"><a class="anchor" href="#module-noparse" id="module-noparse"></a><span class="text"><code>module.noParse</code></span><a class="icon-link" href="#module-noparse"></a></h2>\n<p><code>RegExp | [RegExp]</code></p>\n<p><code>RegExp | [RegExp] | function</code> (since webpack 3.0.0)</p>\n<p>Prevent webpack from parsing any files matching the given regular expression(s). Ignored files <strong>should not</strong> have calls to <code>import</code>, <code>require</code>, <code>define</code> or any other importing mechanism. This can boost build performance when ignoring large libraries.</p>\n<pre><code class="lang-js">noParse<span class="token punctuation">:</span> <span class="token regex">/jquery|lodash/</span>\n\n<span class="token comment">// since webpack 3.0.0</span>\nnoParse<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token regex">/jquery|lodash/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#module-rules" id="module-rules"></a><span class="text"><code>module.rules</code></span><a class="icon-link" href="#module-rules"></a></h2>\n<p><code>array</code></p>\n<p>An array of <a href="#rule">Rules</a> which are matched to requests when modules are created. These rules can modify how the module is created. They can apply loaders to the module, or modify the parser.</p>\n<h2 class="header"><a class="anchor" href="#rule" id="rule"></a><span class="text">Rule</span><a class="icon-link" href="#rule"></a></h2>\n<p>A Rule can be separated into three parts — Conditions, Results and nested Rules.</p>\n<h3 class="header"><a class="anchor" href="#rule-conditions" id="rule-conditions"></a><span class="text">Rule Conditions</span><a class="icon-link" href="#rule-conditions"></a></h3>\n<p>There are two input values for the conditions:</p>\n<ol>\n<li><p>The resource: An absolute path to the file requested. It&#39;s already resolved according to the <a href="/configuration/resolve"><code>resolve</code> rules</a>.</p>\n</li>\n<li><p>The issuer: An absolute path to the file of the module which requested the resource. It&#39;s the location of the import.</p>\n</li>\n</ol>\n<p><strong>Example:</strong> When we <code>import &#39;./style.css&#39;</code> within <code>app.js</code>, the resource is <code>/path/to/style.css</code> and the issuer is <code>/path/to/app.js</code>.</p>\n<p>In a Rule the properties <a href="#rule-test"><code>test</code></a>, <a href="#rule-include"><code>include</code></a>, <a href="#rule-exclude"><code>exclude</code></a> and <a href="#rule-resource"><code>resource</code></a> are matched with the resource and the property <a href="#rule-issuer"><code>issuer</code></a> is matched with the issuer.</p>\n<p>When using multiple conditions, all conditions must match.</p>\n<blockquote class="warning"><div class="tip-content"> Be careful! The resource is the <em>resolved</em> path of the file, which means symlinked resources are the real path <em>not</em> the symlink location. This is good to remember when using tools that symlink packages (like <code>npm link</code>), common conditions like <code>/node_modules/</code> may inadvertently miss symlinked files. </div></blockquote><h3 class="header"><a class="anchor" href="#rule-results" id="rule-results"></a><span class="text">Rule results</span><a class="icon-link" href="#rule-results"></a></h3>\n<p>Rule results are used only when the Rule condition matches.</p>\n<p>There are two output values of a Rule:</p>\n<ol>\n<li>Applied loaders: An array of loaders applied to the resource.</li>\n<li>Parser options: An options object which should be used to create the parser for this module.</li>\n</ol>\n<p>These properties affect the loaders: <a href="#rule-loader"><code>loader</code></a>, <a href="#rule-options-rule-query"><code>options</code></a>, <a href="#rule-use"><code>use</code></a>.</p>\n<p>For compatibility also these properties: <a href="#rule-options-rule-query"><code>query</code></a>, <a href="#rule-loaders"><code>loaders</code></a>.</p>\n<p>The <a href="#rule-enforce"><code>enforce</code></a> property affects the loader category. Whether it&#39;s a normal, pre- or post- loader.</p>\n<p>The <a href="#rule-parser"><code>parser</code></a> property affects the parser options.</p>\n<h2 class="header"><a class="anchor" href="#nested-rules" id="nested-rules"></a><span class="text">Nested rules</span><a class="icon-link" href="#nested-rules"></a></h2>\n<p>Nested rules can be specified under the properties <a href="#rule-rules"><code>rules</code></a> and <a href="#rule-oneof"><code>oneOf</code></a>.</p>\n<p>These rules are evaluated when the Rule condition matches.</p>\n<h2 class="header"><a class="anchor" href="#rule-enforce" id="rule-enforce"></a><span class="text"><code>Rule.enforce</code></span><a class="icon-link" href="#rule-enforce"></a></h2>\n<p>Possible values: <code>&quot;pre&quot; | &quot;post&quot;</code></p>\n<p>Specifies the category of the loader. No value means normal loader.</p>\n<p>There is also an additional category &quot;inlined loader&quot; which are loaders applied inline of the import/require.</p>\n<p>All loaders are sorted in the order <code>pre, inline, normal, post</code> and used in this order.</p>\n<p>All normal loaders can be omitted (overridden) by prefixing <code>!</code> in the request.</p>\n<p>All normal and pre loaders can be omitted (overridden) by prefixing <code>-!</code> in the request.</p>\n<p>All normal, post and pre loaders can be omitted (overridden) by prefixing <code>!!</code> in the request.</p>\n<p>Inline loaders and <code>!</code> prefixes should not be used as they are non-standard. They may be use by loader generated code.</p>\n<h2 class="header"><a class="anchor" href="#rule-exclude" id="rule-exclude"></a><span class="text"><code>Rule.exclude</code></span><a class="icon-link" href="#rule-exclude"></a></h2>\n<p><code>Rule.exclude</code> is a shortcut to <code>Rule.resource.exclude</code>. If you supply a <code>Rule.exclude</code> option, you cannot also supply a <code>Rule.resource</code>. See <a href="#rule-resource"><code>Rule.resource</code></a> and <a href="#condition"><code>Condition.exclude</code></a> for details.</p>\n<h2 class="header"><a class="anchor" href="#rule-include" id="rule-include"></a><span class="text"><code>Rule.include</code></span><a class="icon-link" href="#rule-include"></a></h2>\n<p><code>Rule.include</code> is a shortcut to <code>Rule.resource.include</code>. If you supply a <code>Rule.include</code> option, you cannot also supply a <code>Rule.resource</code>. See <a href="#rule-resource"><code>Rule.resource</code></a> and <a href="#condition"><code>Condition.include</code></a> for details.</p>\n<h2 class="header"><a class="anchor" href="#rule-issuer" id="rule-issuer"></a><span class="text"><code>Rule.issuer</code></span><a class="icon-link" href="#rule-issuer"></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> to match against the module that issued the request. In the following example, the <code>issuer</code> for the <code>a.js</code> request would be the path to the <code>index.js</code> file.</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> A <span class="token keyword">from</span> <span class="token string">\'./a.js\'</span>\n</code></pre>\n<p>This option can be used to apply loaders to the dependencies of a specific module or set of modules.</p>\n<h2 class="header"><a class="anchor" href="#rule-loader" id="rule-loader"></a><span class="text"><code>Rule.loader</code></span><a class="icon-link" href="#rule-loader"></a></h2>\n<p><code>Rule.loader</code> is a shortcut to <code>Rule.use: [ { loader } ]</code>. See <a href="#rule-use"><code>Rule.use</code></a> and <a href="#useentry"><code>UseEntry.loader</code></a> for details.</p>\n<h2 class="header"><a class="anchor" href="#rule-loaders" id="rule-loaders"></a><span class="text"><code>Rule.loaders</code></span><a class="icon-link" href="#rule-loaders"></a></h2>\n<blockquote class="warning"><div class="tip-content"> This option is <strong>deprecated</strong> in favor of <code>Rule.use</code>. </div></blockquote><p><code>Rule.loaders</code> is an alias to <code>Rule.use</code>. See <a href="#rule-use"><code>Rule.use</code></a> for details.</p>\n<h2 class="header"><a class="anchor" href="#rule-oneof" id="rule-oneof"></a><span class="text"><code>Rule.oneOf</code></span><a class="icon-link" href="#rule-oneof"></a></h2>\n<p>An array of <a href="#rule"><code>Rules</code></a> from which only the first matching Rule is used when the Rule matches.</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>\n  oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resourceQuery<span class="token punctuation">:</span> <span class="token regex">/inline/</span><span class="token punctuation">,</span> <span class="token comment">// foo.css?inline</span>\n      use<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      resourceQuery<span class="token punctuation">:</span> <span class="token regex">/external/</span><span class="token punctuation">,</span> <span class="token comment">// foo.css?external</span>\n      use<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#rule-options-rule-query" id="rule-options-rule-query"></a><span class="text"><code>Rule.options</code> / <code>Rule.query</code></span><a class="icon-link" href="#rule-options-rule-query"></a></h2>\n<p><code>Rule.options</code> and <code>Rule.query</code> are shortcuts to <code>Rule.use: [ { options } ]</code>. See <a href="#rule-use"><code>Rule.use</code></a> and <a href="#useentry"><code>UseEntry.options</code></a> for details.</p>\n<blockquote class="warning"><div class="tip-content"> <code>Rule.query</code> is deprecated in favor of <code>Rule.options</code> and <code>UseEntry.options</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#rule-parser" id="rule-parser"></a><span class="text"><code>Rule.parser</code></span><a class="icon-link" href="#rule-parser"></a></h2>\n<p>An object with parser options. All applied parser options are merged.</p>\n<p>Parsers may inspect these options and disable or reconfigure themselves accordingly. Most of the default plugins interpret the values as follows:</p>\n<ul>\n<li>Setting the option to <code>false</code> disables the parser.</li>\n<li>Setting the option to <code>true</code> or leaving it <code>undefined</code> enables the parser.</li>\n</ul>\n<p>However, parser plugins may accept more than just a boolean. For example, the internal <code>NodeStuffPlugin</code> can accept an object instead of <code>true</code> to add additional options for a particular Rule.</p>\n<p><strong>Examples</strong> (parser options by the default plugins):</p>\n<pre><code class="lang-js">parser<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  amd<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable AMD</span>\n  commonjs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable CommonJS</span>\n  system<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable SystemJS</span>\n  harmony<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable ES2015 Harmony import/export</span>\n  requireInclude<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable require.include</span>\n  requireEnsure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable require.ensure</span>\n  requireContext<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable require.context</span>\n  browserify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable special handling of Browserify bundles</span>\n  requireJs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable requirejs.*</span>\n  node<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// disable __dirname, __filename, module, require.extensions, require.main, etc.</span>\n  node<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment">// reconfigure <a class="code-link" href="/configuration/node">node</a> layer on module level</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#rule-resource" id="rule-resource"></a><span class="text"><code>Rule.resource</code></span><a class="icon-link" href="#rule-resource"></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> matched with the resource. You can either supply a <code>Rule.resource</code> option or use the shortcut options <code>Rule.test</code>, <code>Rule.exclude</code>, and <code>Rule.include</code>. See details in <a href="#rule-conditions"><code>Rule</code> conditions</a>.</p>\n<h2 class="header"><a class="anchor" href="#rule-resourcequery" id="rule-resourcequery"></a><span class="text"><code>Rule.resourceQuery</code></span><a class="icon-link" href="#rule-resourcequery"></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> matched with the resource query. This option is used to test against the query section of a request string (i.e. from the question mark onwards). If you were to <code>import Foo from &#39;./foo.css?inline&#39;</code>, the following condition would match:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>\n  resourceQuery<span class="token punctuation">:</span> <span class="token regex">/inline/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#rule-rules" id="rule-rules"></a><span class="text"><code>Rule.rules</code></span><a class="icon-link" href="#rule-rules"></a></h2>\n<p>An array of <a href="#rule"><code>Rules</code></a> that is also used when the Rule matches.</p>\n<h2 class="header"><a class="anchor" href="#rule-test" id="rule-test"></a><span class="text"><code>Rule.test</code></span><a class="icon-link" href="#rule-test"></a></h2>\n<p><code>Rule.test</code> is a shortcut to <code>Rule.resource.test</code>. If you supply a <code>Rule.test</code> option, you cannot also supply a <code>Rule.resource</code>. See <a href="#rule-resource"><code>Rule.resource</code></a> and <a href="#condition"><code>Condition.test</code></a> for details.</p>\n<h2 class="header"><a class="anchor" href="#rule-use" id="rule-use"></a><span class="text"><code>Rule.use</code></span><a class="icon-link" href="#rule-use"></a></h2>\n<p>A list of <a href="#useentry">UseEntries</a> which are applied to modules. Each entry specifies a loader to be used.</p>\n<p>Passing a string (i.e. <code>use: [ &quot;style-loader&quot; ]</code>) is a shortcut to the loader property (i.e. <code>use: [ { loader: &quot;style-loader &quot;} ]</code>).</p>\n<p>Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).</p>\n<pre><code class="lang-javascript">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      importLoaders<span class="token punctuation">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'less-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>See <a href="#useentry">UseEntry</a> for details.</p>\n<h2 class="header"><a class="anchor" href="#condition" id="condition"></a><span class="text"><code>Condition</code></span><a class="icon-link" href="#condition"></a></h2>\n<p>Conditions can be one of these:</p>\n<ul>\n<li>A string: To match the input must start with the provided string. I. e. an absolute directory path, or absolute path to the file.</li>\n<li>A RegExp: It&#39;s tested with the input.</li>\n<li>A function: It&#39;s called with the input and must return a truthy value to match.</li>\n<li>An array of Conditions: At least one of the Conditions must match.</li>\n<li>An object: All properties must match. Each property has a defined behavior.</li>\n</ul>\n<p><code>{ test: Condition }</code>: The Condition must match. The convention is to provide a RegExp or array of RegExps here, but it&#39;s not enforced.</p>\n<p><code>{ include: Condition }</code>: The Condition must match. The convention is to provide a string or array of strings here, but it&#39;s not enforced.</p>\n<p><code>{ exclude: Condition }</code>: The Condition must NOT match. The convention is to provide a string or array of strings here, but it&#39;s not enforced.</p>\n<p><code>{ and: [Condition] }</code>: All Conditions must match.</p>\n<p><code>{ or: [Condition] }</code>: Any Condition must match.</p>\n<p><code>{ not: [Condition] }</code>: All Conditions must NOT match.</p>\n<p><strong>Example:</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app/styles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"vendor/styles"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#useentry" id="useentry"></a><span class="text"><code>UseEntry</code></span><a class="icon-link" href="#useentry"></a></h2>\n<p><code>object</code></p>\n<p>It must have a <code>loader</code> property being a string. It is resolved relative to the configuration <a href="/configuration/entry-context#context"><code>context</code></a> with the loader resolving options (<a href="/configuration/resolve#resolveloader">resolveLoader</a>).</p>\n<p>It can have a <code>options</code> property being a string or object. This value is passed to the loader, which should interpret it as loader options.</p>\n<p>For compatibility a <code>query</code> property is also possible, which is an alias for the <code>options</code> property. Use the <code>options</code> property instead.</p>\n<p><strong>Example:</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    modules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Note that webpack needs to generate a unique module identifier from the resource and all loaders including options. It tries to do this with a <code>JSON.stringify</code> of the options object. This is fine in 99.9% of cases, but may be not unique if you apply the same loaders with different options to the resource and the options have some stringified values.</p>\n<p>It also breaks if the options object cannot be stringified (i.e. circular JSON). Because of this you can have a <code>ident</code> property in the options object which is used as unique identifier.</p>\n<h2 class="header"><a class="anchor" href="#module-contexts" id="module-contexts"></a><span class="text">Module Contexts</span><a class="icon-link" href="#module-contexts"></a></h2>\n<blockquote>\n<p>Avoid using these options as they are <strong>deprecated</strong> and will soon be removed.</p>\n</blockquote>\n<p>These options describe the default settings for the context created when a dynamic dependency is encountered.</p>\n<p>Example for an <code>unknown</code> dynamic dependency: <code>require</code>.</p>\n<p>Example for an <code>expr</code> dynamic dependency: <code>require(expr)</code>.</p>\n<p>Example for an <code>wrapped</code> dynamic dependency: <code>require(&quot;./templates/&quot; + expr)</code>.</p>\n<p>Here are the available options with their <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js">defaults</a>:</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  exprContextCritical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  exprContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  exprContextRegExp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  exprContextRequest<span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>\n  unknownContextCritical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  unknownContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  unknownContextRegExp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  unknownContextRequest<span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>\n  wrappedContextCritical<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  wrappedContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  wrappedContextRegExp<span class="token punctuation">:</span> <span class="token regex">/.*/</span><span class="token punctuation">,</span>\n  strictExportPresence<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment">// since webpack 2.3.0</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> You can use the <code>ContextReplacementPlugin</code> to modify these values for individual dependencies. This also removes the warning. </div></blockquote><p>A few use cases:</p>\n<ul>\n<li>Warn for dynamic dependencies: <code>wrappedContextCritical: true</code>.</li>\n<li><code>require(expr)</code> should include the whole directory: <code>exprContextRegExp: /^\\.\\//</code></li>\n<li><code>require(&quot;./templates/&quot; + expr)</code> should not include subdirectories by default: <code>wrappedContextRecursive: false</code></li>\n<li><code>strictExportPresence</code> makes missing exports an error instead of warning</li>\n</ul>\n',title:"Module"},title:"Module",url:"/configuration/module/"},{file:{attributes:{title:"Resolve",sort:7,contributors:["SpaceK33z","pksjce","sebastiandeutsch","skipjack","sokra","tbroadley"],group:"-",anchors:[{title:"resolve",id:"resolve"},{title:"resolve.alias",id:"resolve-alias"},{title:"resolve.aliasFields",id:"resolve-aliasfields"},{title:"resolve.cacheWithContext",id:"resolve-cachewithcontext"},{title:"resolve.descriptionFiles",id:"resolve-descriptionfiles"},{title:"resolve.enforceExtension",id:"resolve-enforceextension"},{title:"resolve.enforceModuleExtension",id:"resolve-enforcemoduleextension"},{title:"resolve.extensions",id:"resolve-extensions"},{title:"resolve.mainFields",id:"resolve-mainfields"},{title:"resolve.mainFiles",id:"resolve-mainfiles"},{title:"resolve.modules",id:"resolve-modules"},{title:"resolve.unsafeCache",id:"resolve-unsafecache"},{title:"resolve.plugins",id:"resolve-plugins"},{title:"resolve.symlinks",id:"resolve-symlinks"},{title:"resolve.cachePredicate",id:"resolve-cachepredicate"},{title:"resolveLoader",id:"resolveloader"},{title:"resolveLoader.moduleExtensions",id:"resolveloader-moduleextensions"}],related:[]},body:'<p>These options change how modules are resolved. webpack provides reasonable defaults, but it is possible to change the resolving in detail. Have a look at <a href="/concepts/module-resolution">Module Resolution</a> for more explanation of how the resolver works.</p>\n<h2 class="header"><a class="anchor" href="#resolve" id="resolve"></a><span class="text"><code>resolve</code></span><a class="icon-link" href="#resolve"></a></h2>\n<p><code>object</code></p>\n<p>Configure how modules are resolved. For example, when calling <code>import &quot;lodash&quot;</code> in ES2015, the <code>resolve</code> options can change where webpack goes to look for <code>&quot;lodash&quot;</code> (see <a href="#resolve-modules"><code>modules</code></a>).</p>\n<h3 class="header"><a class="anchor" href="#resolve-alias" id="resolve-alias"></a><span class="text"><code>resolve.alias</code></span><a class="icon-link" href="#resolve-alias"></a></h3>\n<p><code>object</code></p>\n<p>Create aliases to <code>import</code> or <code>require</code> certain modules more easily. For example, to alias a bunch of commonly used <code>src/</code> folders:</p>\n<pre><code class="lang-js">alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  Utilities<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/utilities/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  Templates<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/templates/\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Now, instead of using relative paths when importing like so:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">\'../../utilities/utility\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>you can use the alias:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">\'Utilities/utility\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>A trailing <code>$</code> can also be added to the given object&#39;s keys to signify an exact match:</p>\n<pre><code class="lang-js">alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  xyz$<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'path/to/file.js\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>which would yield these results:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Test1 <span class="token keyword">from</span> <span class="token string">\'xyz\'</span><span class="token punctuation">;</span> <span class="token comment">// Exact match, so path/to/file.js is resolved and imported</span>\n<span class="token keyword">import</span> Test2 <span class="token keyword">from</span> <span class="token string">\'xyz/file.js\'</span><span class="token punctuation">;</span> <span class="token comment">// Not an exact match, normal resolution takes place</span>\n</code></pre>\n<p>The following table explains other cases:</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th"><code>alias:</code></div><div class="table-th"><code>import &quot;xyz&quot;</code></div><div class="table-th"><code>import &quot;xyz/file.js&quot;</code></div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;/abs/path/to/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abs/path/to/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        error\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;/abs/path/to/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abs/path/to/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;./dir/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        error\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;./dir/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;/some/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/some/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/some/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;/some/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/some/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;./dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;modu&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;modu&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;modu/some/file.js&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/some/file.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        error\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;modu/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/modu/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz: &quot;xyz/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/dir/file.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>alias:</code>\n    </div>\n    <div class="table-td-content">\n        <code>{ xyz$: &quot;xyz/dir&quot; }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/dir/index.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import &quot;xyz/file.js&quot;</code>\n    </div>\n    <div class="table-td-content">\n        <code>/abc/node_modules/xyz/file.js</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><code>index.js</code> may resolve to another file if defined in the <code>package.json</code>.</p>\n<p><code>/abc/node_modules</code> may resolve in <code>/node_modules</code> too.</p>\n<h3 class="header"><a class="anchor" href="#resolve-aliasfields" id="resolve-aliasfields"></a><span class="text"><code>resolve.aliasFields</code></span><a class="icon-link" href="#resolve-aliasfields"></a></h3>\n<p><code>string</code></p>\n<p>Specify a field, such as <code>browser</code>, to be parsed according to <a href="https://github.com/defunctzombie/package-browser-field-spec">this specification</a>. Default:</p>\n<pre><code class="lang-js">aliasFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"browser"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-cachewithcontext" id="resolve-cachewithcontext"></a><span class="text"><code>resolve.cacheWithContext</code></span><a class="icon-link" href="#resolve-cachewithcontext"></a></h3>\n<p><code>boolean</code> (since webpack 3.1.0)</p>\n<p>If unsafe cache is enabled, includes <code>request.context</code> in the cache key. This option is taken into account by the <a href="https://github.com/webpack/enhanced-resolve/"><code>enhanced-resolve</code></a> module. Since webpack 3.1.0 context in resolve caching is ignored when resolve or resolveLoader plugins are provided. This addresses a performance regression.</p>\n<h3 class="header"><a class="anchor" href="#resolve-descriptionfiles" id="resolve-descriptionfiles"></a><span class="text"><code>resolve.descriptionFiles</code></span><a class="icon-link" href="#resolve-descriptionfiles"></a></h3>\n<p><code>array</code></p>\n<p>The JSON files to use for descriptions. Default:</p>\n<pre><code class="lang-js">descriptionFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"package.json"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-enforceextension" id="resolve-enforceextension"></a><span class="text"><code>resolve.enforceExtension</code></span><a class="icon-link" href="#resolve-enforceextension"></a></h3>\n<p><code>boolean</code></p>\n<p>If <code>true</code>, it will not allow extension-less files. So by default <code>require(&#39;./foo&#39;)</code> works if <code>./foo</code> has a <code>.js</code> extension, but with this enabled only <code>require(&#39;./foo.js&#39;)</code> will work. Default:</p>\n<pre><code class="lang-js">enforceExtension<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-enforcemoduleextension" id="resolve-enforcemoduleextension"></a><span class="text"><code>resolve.enforceModuleExtension</code></span><a class="icon-link" href="#resolve-enforcemoduleextension"></a></h3>\n<p><code>boolean</code></p>\n<p>Whether to require to use an extension for modules (e.g. loaders). Default:</p>\n<pre><code class="lang-js">enforceModuleExtension<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-extensions" id="resolve-extensions"></a><span class="text"><code>resolve.extensions</code></span><a class="icon-link" href="#resolve-extensions"></a></h3>\n<p><code>array</code></p>\n<p>Automatically resolve certain extensions. This defaults to:</p>\n<pre><code class="lang-js">extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>which is what enables users to leave off the extension when importing:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> File <span class="token keyword">from</span> <span class="token string">\'../path/to/file\'</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Using this will <strong>override the default array</strong>, meaning that webpack will no longer try to resolve modules using the default extensions. For modules that are imported with their extension, e.g. <code>import SomeFile from &quot;./somefile.ext&quot;</code>, to be properly resolved, a string containing &quot;*&quot; must be included in the array. </div></blockquote><h3 class="header"><a class="anchor" href="#resolve-mainfields" id="resolve-mainfields"></a><span class="text"><code>resolve.mainFields</code></span><a class="icon-link" href="#resolve-mainfields"></a></h3>\n<p><code>array</code></p>\n<p>When importing from an npm package, e.g. <code>import * as D3 from &quot;d3&quot;</code>, this option will determine which fields in its <code>package.json</code> are checked. The default values will vary based upon the <a href="/concepts/targets"><code>target</code></a> specified in your webpack configuration.</p>\n<p>When the <code>target</code> property is set to <code>webworker</code>, <code>web</code>, or left unspecified:</p>\n<pre><code class="lang-js">mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"browser"</span><span class="token punctuation">,</span> <span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>For any other target (including <code>node</code>):</p>\n<pre><code class="lang-js">mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>For example, the <code>package.json</code> of <a href="https://d3js.org/">D3</a> contains these fields:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  main<span class="token punctuation">:</span> <span class="token string">\'build/d3.Node.js\'</span><span class="token punctuation">,</span>\n  browser<span class="token punctuation">:</span> <span class="token string">\'build/d3.js\'</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token string">\'index\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This means that when we <code>import * as D3 from &quot;d3&quot;</code> this will really resolve to the file in the <code>browser</code> property. The <code>browser</code> property takes precedence here because it&#39;s the first item in <code>mainFields</code>. Meanwhile, a Node.js application bundled by webpack will resolve by default to the file in the <code>module</code> field.</p>\n<h3 class="header"><a class="anchor" href="#resolve-mainfiles" id="resolve-mainfiles"></a><span class="text"><code>resolve.mainFiles</code></span><a class="icon-link" href="#resolve-mainfiles"></a></h3>\n<p><code>array</code></p>\n<p>The filename to be used while resolving directories. Default:</p>\n<pre><code class="lang-js">mainFiles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"index"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-modules" id="resolve-modules"></a><span class="text"><code>resolve.modules</code></span><a class="icon-link" href="#resolve-modules"></a></h3>\n<p><code>array</code></p>\n<p>Tell webpack what directories should be searched when resolving modules.</p>\n<p>Absolute and relative paths can both be used, but be aware that they will behave a bit differently.</p>\n<p>A relative path will be scanned similarly to how Node scans for <code>node_modules</code>, by looking through the current directory as well as it&#39;s ancestors (i.e. <code>./node_modules</code>, <code>../node_modules</code>, and on).</p>\n<p>With an absolute path, it will only search in the given directory.</p>\n<p><code>resolve.modules</code> defaults to:</p>\n<pre><code class="lang-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>If you want to add a directory to search in that takes precedence over <code>node_modules/</code>:</p>\n<pre><code class="lang-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#resolve-unsafecache" id="resolve-unsafecache"></a><span class="text"><code>resolve.unsafeCache</code></span><a class="icon-link" href="#resolve-unsafecache"></a></h3>\n<p><code>regex</code> <code>array</code> <code>boolean</code></p>\n<p>Enable aggressive, but <strong>unsafe</strong>, caching of modules. Passing <code>true</code> will cache everything. Default:</p>\n<pre><code class="lang-js">unsafeCache<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>A regular expression, or an array of regular expressions, can be used to test file paths and only cache certain modules. For example, to only cache utilities:</p>\n<pre><code class="lang-js">unsafeCache<span class="token punctuation">:</span> <span class="token regex">/src\\/utilities/</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Changes to cached paths may cause failure in rare cases. </div></blockquote><h2 class="header"><a class="anchor" href="#resolve-plugins" id="resolve-plugins"></a><span class="text"><code>resolve.plugins</code></span><a class="icon-link" href="#resolve-plugins"></a></h2>\n<p>A list of additional resolve plugins which should be applied. It allows plugins such as <a href="https://www.npmjs.com/package/directory-named-webpack-plugin"><code>DirectoryNamedWebpackPlugin</code></a>.</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">DirectoryNamedWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-symlinks" id="resolve-symlinks"></a><span class="text"><code>resolve.symlinks</code></span><a class="icon-link" href="#resolve-symlinks"></a></h2>\n<p><code>boolean</code></p>\n<p>Whether to resolve symlinks to their symlinked location. Default:</p>\n<pre><code class="lang-js">symlinks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-cachepredicate" id="resolve-cachepredicate"></a><span class="text"><code>resolve.cachePredicate</code></span><a class="icon-link" href="#resolve-cachepredicate"></a></h2>\n<p><code>function</code></p>\n<p>A function which decides whether a request should be cached or not. An object is passed to the function with <code>path</code> and <code>request</code> properties. Default:</p>\n<pre><code class="lang-js">cachePredicate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolveloader" id="resolveloader"></a><span class="text"><code>resolveLoader</code></span><a class="icon-link" href="#resolveloader"></a></h2>\n<p><code>object</code></p>\n<p>This set of options is identical to the <code>resolve</code> property set above, but is used only to resolve webpack&#39;s <a href="/concepts/loaders">loader</a> packages. Default:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'node_modules\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.json\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'loader\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that you can use alias here and other features familiar from resolve. For example <code>{ txt: &#39;raw-loader&#39; }</code> would shim <code>txt!templates/demo.txt</code> to use <code>raw-loader</code>. </div></blockquote><h3 class="header"><a class="anchor" href="#resolveloader-moduleextensions" id="resolveloader-moduleextensions"></a><span class="text"><code>resolveLoader.moduleExtensions</code></span><a class="icon-link" href="#resolveloader-moduleextensions"></a></h3>\n<p><code>array</code></p>\n<p>The extensions/suffixes which that are used when resolving loaders. Since version two, we <a href="/guides/migrating#automatic-loader-module-name-extension-removed">strongly recommend</a> using the full name, e.g. <code>example-loader</code>, as much as possible for clarity. However, if you really wanted to exclude the <code>-loader</code> bit, i.e. just use <code>example</code>, you can use this option to do so:</p>\n<pre><code class="lang-js">moduleExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'-loader\'</span> <span class="token punctuation">]</span>\n</code></pre>\n',title:"Resolve"},title:"Resolve",url:"/configuration/resolve/"},{file:{attributes:{title:"Plugins",sort:8,contributors:["skipjack","sokra","yatharthk"],group:"-",anchors:[{title:"plugins",id:"plugins"}],related:[]},body:'<p>The <code>plugins</code> option is used to customize the webpack build process in a variety of ways. webpack comes with a variety built-in plugins available under <code>webpack.[plugin-name]</code>. See <a href="/plugins">this page</a> for a list of plugins and documentation but note that there are a lot more out in the community.</p>\n<blockquote class="tip"><div class="tip-content"> Note: This page only discusses using plugins, however if you are interested in writing your own please visit <a href="/development/how-to-write-a-plugin/">Writing a Plugin</a>. </div></blockquote><h2 class="header"><a class="anchor" href="#plugins" id="plugins"></a><span class="text"><code>plugins</code></span><a class="icon-link" href="#plugins"></a></h2>\n<p><code>array</code></p>\n<p>A list of webpack plugins. For example, when multiple bundles share some of the same dependencies, the <code>CommonsChunkPlugin</code> could be useful to extract those dependencies into a shared bundle to avoid duplication. This could be added like so:</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>A more complex example, using multiple plugins, might look something like this:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// importing plugins that do not come by default in webpack</span>\n<span class="token keyword">var</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> DashboardPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dashboard/plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// adding plugins to your configuration</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token comment">// build optimization plugins</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'vendor\'</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'vendor-[hash].min.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      drop_console<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'build.min.css\'</span><span class="token punctuation">,</span>\n    allChunks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/^\\.\\/locale$/</span><span class="token punctuation">,</span> <span class="token regex">/moment$/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// compile time plugins</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">\'process.env.NODE_ENV\'</span><span class="token punctuation">:</span> <span class="token string">\'"production"\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// webpack-dev-server enhancement plugins</span>\n  <span class="token keyword">new</span> <span class="token class-name">DashboardPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre>\n',title:"Plugins"},title:"Plugins",url:"/configuration/plugins/"},{file:{attributes:{title:"DevServer",sort:9,contributors:["charlespwd","orteth01","skipjack","sokra","spacek33z"],group:"-",anchors:[{title:"devServer",id:"devserver"},{title:"devServer.after",id:"devserver-after"},{title:"devServer.allowedHosts",id:"devserver-allowedhosts"},{title:"devServer.before",id:"devserver-before"},{title:"devServer.bonjour",id:"devserver-bonjour"},{title:"devServer.clientLogLevel",id:"devserver-clientloglevel"},{title:"devServer.color - CLI only",id:"devserver-color-cli-only"},{title:"devServer.compress",id:"devserver-compress"},{title:"devServer.contentBase",id:"devserver-contentbase"},{title:"devServer.disableHostCheck",id:"devserver-disablehostcheck"},{title:"devServer.filename 🔑",id:"devserver-filename-"},{title:"devServer.headers 🔑",id:"devserver-headers-"},{title:"devServer.historyApiFallback",id:"devserver-historyapifallback"},{title:"devServer.host",id:"devserver-host"},{title:"devServer.hot",id:"devserver-hot"},{title:"devServer.hotOnly",id:"devserver-hotonly"},{title:"devServer.https",id:"devserver-https"},{title:"devServer.index",id:"devserver-index"},{title:"devServer.info - CLI only",id:"devserver-info-cli-only"},{title:"devServer.inline",id:"devserver-inline"},{title:"devServer.lazy 🔑",id:"devserver-lazy-"},{title:"devServer.noInfo 🔑",id:"devserver-noinfo-"},{title:"devServer.open",id:"devserver-open"},{title:"devServer.openPage",id:"devserver-openpage"},{title:"devServer.overlay",id:"devserver-overlay"},{title:"devServer.pfx",id:"devserver-pfx"},{title:"devServer.pfxPassphrase",id:"devserver-pfxpassphrase"},{title:"devServer.port",id:"devserver-port"},{title:"devServer.proxy",id:"devserver-proxy"},{title:"devServer.progress - CLI only",id:"devserver-progress-cli-only"},{title:"devServer.public",id:"devserver-public"},{title:"devServer.publicPath 🔑",id:"devserver-publicpath-"},{title:"devServer.quiet 🔑",id:"devserver-quiet-"},{title:"devServer.setup",id:"devserver-setup"},{title:"devServer.socket",id:"devserver-socket"},{title:"devServer.staticOptions",id:"devserver-staticoptions"},{title:"devServer.stats 🔑",id:"devserver-stats-"},{title:"devServer.stdin - CLI only",id:"devserver-stdin-cli-only"},{title:"devServer.useLocalIp",id:"devserver-uselocalip"},{title:"devServer.watchContentBase",id:"devserver-watchcontentbase"},{title:"devServer.watchOptions 🔑",id:"devserver-watchoptions-"}],related:[]},body:'<p>webpack-dev-server can be used to quickly develop an application. See the <a href="/guides/development">&quot;How to Develop?&quot;</a> to get started.</p>\n<p>This page describes the options that affect the behavior of webpack-dev-server (short: dev-server).</p>\n<blockquote class="tip"><div class="tip-content"> Options that are compatible with <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a> have 🔑 next to them. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver" id="devserver"></a><span class="text"><code>devServer</code></span><a class="icon-link" href="#devserver"></a></h2>\n<p><code>object</code></p>\n<p>This set of options is picked up by <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> and can be used to change its behavior in various ways. Here&#39;s a simple example that gzips and serves everything from our <code>dist/</code> directory:</p>\n<pre><code class="lang-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  port<span class="token punctuation">:</span> <span class="token number">9000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>When the server is started, there will be a message prior to the list of resolved modules:</p>\n<pre><code class="lang-bash">http://localhost:9000/\nwebpack output is served from /build/\nContent not from webpack is served from /path/to/dist/\n</code></pre>\n<p>that will give some background on where the server is located and what it&#39;s serving.</p>\n<p>If you&#39;re using dev-server through the Node.js API, the options in <code>devServer</code> will be ignored. Pass the options as a second parameter instead: <code>new WebpackDevServer(compiler, {...})</code>. <a href="https://github.com/webpack/webpack-dev-server/tree/master/examples/api/simple">See here</a> for an example of how to use webpack-dev-server through the Node.js API.</p>\n<blockquote class="warning"><div class="tip-content"> Be aware that when <a href="/configuration/configuration-types/#exporting-multiple-configurations">exporting multiple configurations</a> only the <code>devServer</code> options for the first configuration will be taken into account and used for all the configurations in the array. </div></blockquote><blockquote class="tip"><div class="tip-content"> If you&#39;re having trouble, navigating to the <code>/webpack-dev-server</code> route will show where files are served. For example, <code>http://localhost:9000/webpack-dev-server</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-after" id="devserver-after"></a><span class="text"><code>devServer.after</code></span><a class="icon-link" href="#devserver-after"></a></h2>\n<p><code>function</code></p>\n<p>Provides the ability to execute custom middleware after all other middleware\ninternally within the server.</p>\n<pre><code class="lang-js"><span class="token function">after</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// do fancy stuff</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-allowedhosts" id="devserver-allowedhosts"></a><span class="text"><code>devServer.allowedHosts</code></span><a class="icon-link" href="#devserver-allowedhosts"></a></h2>\n<p><code>array</code></p>\n<p>This option allows you to whitelist services that are allowed to access the dev server.</p>\n<pre><code class="lang-js">allowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'host.com\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'subdomain.host.com\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'subdomain2.host.com\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'host2.com\'</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Mimicking django&#39;s <code>ALLOWED_HOSTS</code>, a value beginning with <code>.</code> can be used as a subdomain wildcard. <code>.host.com</code> will match <code>host.com</code>, <code>www.host.com</code>, and any other subdomain of <code>host.com</code>.</p>\n<pre><code class="lang-js"><span class="token comment">// this achieves the same effect as the first example</span>\n<span class="token comment">// with the bonus of not having to update your config</span>\n<span class="token comment">// if new subdomains need to access the dev server</span>\nallowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'.host.com\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'host2.com\'</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>To use this option with the CLI pass the <code>--allowed-hosts</code> option a comma-delimited string.</p>\n<pre><code class="lang-bash">webpack-dev-server --entry /entry/file --output-path /output/path --allowed-hosts .host.com,host2.com\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-before" id="devserver-before"></a><span class="text"><code>devServer.before</code></span><a class="icon-link" href="#devserver-before"></a></h2>\n<p><code>function</code></p>\n<p>Provides the ability to execute custom middleware prior to all other middleware\ninternally within the server. This could be used to define custom handlers, for\nexample:</p>\n<pre><code class="lang-js"><span class="token function">before</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token punctuation">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-bonjour" id="devserver-bonjour"></a><span class="text"><code>devServer.bonjour</code></span><a class="icon-link" href="#devserver-bonjour"></a></h2>\n<p>This option broadcasts the server via ZeroConf networking on start</p>\n<pre><code class="lang-js">bonjour<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --bonjour\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-clientloglevel" id="devserver-clientloglevel"></a><span class="text"><code>devServer.clientLogLevel</code></span><a class="icon-link" href="#devserver-clientloglevel"></a></h2>\n<p><code>string</code></p>\n<p>When using <em>inline mode</em>, the console in your DevTools will show you messages e.g. before reloading, before an error or when Hot Module Replacement is enabled. This may be too verbose.</p>\n<p>You can prevent all these messages from showing, by using this option:</p>\n<pre><code class="lang-js">clientLogLevel<span class="token punctuation">:</span> <span class="token string">"none"</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --client-log-level none\n</code></pre>\n<p>Possible values are <code>none</code>, <code>error</code>, <code>warning</code> or <code>info</code> (default).</p>\n<h2 class="header"><a class="anchor" href="#devserver-color-cli-only" id="devserver-color-cli-only"></a><span class="text"><code>devServer.color</code> - CLI only</span><a class="icon-link" href="#devserver-color-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>Enables/Disables colors on the console.</p>\n<pre><code class="lang-bash">webpack-dev-server --color\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-compress" id="devserver-compress"></a><span class="text"><code>devServer.compress</code></span><a class="icon-link" href="#devserver-compress"></a></h2>\n<p><code>boolean</code></p>\n<p>Enable <a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">gzip compression</a> for everything served:</p>\n<pre><code class="lang-js">compress<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --compress\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-contentbase" id="devserver-contentbase"></a><span class="text"><code>devServer.contentBase</code></span><a class="icon-link" href="#devserver-contentbase"></a></h2>\n<p><code>boolean</code> <code>string</code> <code>array</code></p>\n<p>Tell the server where to serve content from. This is only necessary if you want to serve static files. <a href="#devserver-publicpath-"><code>devServer.publicPath</code></a> will be used to determine where the bundles should be served from, and takes precedence.</p>\n<p>By default it will use your current working directory to serve content, but you can modify this to another directory:</p>\n<pre><code class="lang-js">contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Note that it is recommended to use an absolute path.</p>\n<p>It is also possible to serve from multiple directories:</p>\n<pre><code class="lang-js">contentBase<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"assets"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre>\n<p>To disable <code>contentBase</code>:</p>\n<pre><code class="lang-js">contentBase<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --content-base /path/to/content/dir\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-disablehostcheck" id="devserver-disablehostcheck"></a><span class="text"><code>devServer.disableHostCheck</code></span><a class="icon-link" href="#devserver-disablehostcheck"></a></h2>\n<p><code>boolean</code></p>\n<p>When set to true this option bypasses host checking. THIS IS NOT RECOMMENDED as apps that do not check the host are vulnerable to DNS rebinding attacks.</p>\n<pre><code class="lang-js">disableHostCheck<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --disable-host-check\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-filename-" id="devserver-filename-"></a><span class="text"><code>devServer.filename</code> 🔑</span><a class="icon-link" href="#devserver-filename-"></a></h2>\n<p><code>string</code></p>\n<p>This option lets you reduce the compilations in <strong>lazy mode</strong>.\nBy default in <strong>lazy mode</strong>, every request results in a new compilation. With <code>filename</code>, it&#39;s possible to only compile when a certain file is requested.</p>\n<p>If <code>output.filename</code> is set to <code>bundle.js</code> and <code>filename</code> is used like this:</p>\n<pre><code class="lang-js">lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\nfilename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n</code></pre>\n<p>It will now only compile the bundle when <code>/bundle.js</code> is requested.</p>\n<blockquote class="tip"><div class="tip-content"> <code>filename</code> has no effect when used without <strong>lazy mode</strong>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-headers-" id="devserver-headers-"></a><span class="text"><code>devServer.headers</code> 🔑</span><a class="icon-link" href="#devserver-headers-"></a></h2>\n<p><code>object</code></p>\n<p>Adds headers to all responses:</p>\n<pre><code class="lang-js">headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"X-Custom-Foo"</span><span class="token punctuation">:</span> <span class="token string">"bar"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-historyapifallback" id="devserver-historyapifallback"></a><span class="text"><code>devServer.historyApiFallback</code></span><a class="icon-link" href="#devserver-historyapifallback"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>When using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">HTML5 History API</a>, the <code>index.html</code> page will likely have to be served in place of any <code>404</code> responses. Enable this by passing:</p>\n<pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>By passing an object this behavior can be controlled further using options like <code>rewrites</code>:</p>\n<pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\\/$/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/landing.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\\/subpage/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/subpage.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/./</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/404.html\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>When using dots in your path (common with Angular), you may need to use the <code>disableDotRule</code>:</p>\n<pre><code class="lang-js">historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  disableDotRule<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --history-api-fallback\n</code></pre>\n<p>For more options and information, see the <a href="https://github.com/bripkens/connect-history-api-fallback">connect-history-api-fallback</a> documentation.</p>\n<h2 class="header"><a class="anchor" href="#devserver-host" id="devserver-host"></a><span class="text"><code>devServer.host</code></span><a class="icon-link" href="#devserver-host"></a></h2>\n<p><code>string</code></p>\n<p>Specify a host to use. By default this is <code>localhost</code>. If you want your server to be accessible externally, specify it like this:</p>\n<pre><code class="lang-js">host<span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --host 0.0.0.0\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-hot" id="devserver-hot"></a><span class="text"><code>devServer.hot</code></span><a class="icon-link" href="#devserver-hot"></a></h2>\n<p><code>boolean</code></p>\n<p>Enable webpack&#39;s Hot Module Replacement feature:</p>\n<pre><code class="lang-js">hot<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that <code>webpack.HotModuleReplacementPlugin</code> is required to fully enable HMR. If <code>webpack</code> or <code>webpack-dev-server</code> are launched with the <code>--hot</code> option, this plugin will be added automatically, so you may not need to add this to your <code>webpack.config.js</code>. See the <a href="/concepts/hot-module-replacement">HMR concepts page</a> for more information. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-hotonly" id="devserver-hotonly"></a><span class="text"><code>devServer.hotOnly</code></span><a class="icon-link" href="#devserver-hotonly"></a></h2>\n<p><code>boolean</code></p>\n<p>Enables Hot Module Replacement (see <a href="#devserver-hot"><code>devServer.hot</code></a>) without page refresh as fallback in case of build failures.</p>\n<pre><code class="lang-js">hotOnly<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --hot-only\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-https" id="devserver-https"></a><span class="text"><code>devServer.https</code></span><a class="icon-link" href="#devserver-https"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>By default dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</p>\n<pre><code class="lang-js">https<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>With the above setting a self-signed certificate is used, but you can provide your own:</p>\n<pre><code class="lang-js">https<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/server.key"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  cert<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/server.crt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  ca<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/path/to/ca.pem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This object is passed straight to Node.js HTTPS module, so see the <a href="https://nodejs.org/api/https.html">HTTPS documentation</a> for more information.</p>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --https\n</code></pre>\n<p>To pass your own certificate via the CLI use the following options</p>\n<pre><code class="lang-bash">webpack-dev-server --https --key /path/to/server.key --cert /path/to/server.crt --cacert /path/to/ca.pem\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-index" id="devserver-index"></a><span class="text"><code>devServer.index</code></span><a class="icon-link" href="#devserver-index"></a></h2>\n<p><code>string</code></p>\n<p>The filename that is considered the index file.</p>\n<pre><code class="lang-javascript">index<span class="token punctuation">:</span> <span class="token string">\'index.htm\'</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-info-cli-only" id="devserver-info-cli-only"></a><span class="text"><code>devServer.info</code> - CLI only</span><a class="icon-link" href="#devserver-info-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>Output cli information. It is enabled by default.</p>\n<pre><code class="lang-bash">webpack-dev-server --info<span class="token operator">=</span>false\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-inline" id="devserver-inline"></a><span class="text"><code>devServer.inline</code></span><a class="icon-link" href="#devserver-inline"></a></h2>\n<p><code>boolean</code></p>\n<p>Toggle between the dev-server&#39;s two different modes. By default the application will be served with <em>inline mode</em> enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</p>\n<p>It is also possible to use <strong>iframe mode</strong>, which uses an <code>&lt;iframe&gt;</code> under a notification bar with messages about the build. To switch to <strong>iframe mode</strong>:</p>\n<pre><code class="lang-js">inline<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --inline<span class="token operator">=</span>false\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Inline mode is recommended for Hot Module Replacement as it includes an HMR trigger from the websocket. Polling mode can be used as an alternative, but requires an additional entry point, <code>&#39;webpack/hot/poll?1000&#39;</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-lazy-" id="devserver-lazy-"></a><span class="text"><code>devServer.lazy</code> 🔑</span><a class="icon-link" href="#devserver-lazy-"></a></h2>\n<p><code>boolean</code></p>\n<p>When <code>lazy</code> is enabled, the dev-server will only compile the bundle when it gets requested. This means that webpack will not watch any file changes. We call this <strong>lazy mode</strong>.</p>\n<pre><code class="lang-js">lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --lazy\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <code>watchOptions</code> will have no effect when used with <strong>lazy mode</strong>. </div></blockquote><blockquote class="tip"><div class="tip-content"> If you use the CLI, make sure <strong>inline mode</strong> is disabled. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-noinfo-" id="devserver-noinfo-"></a><span class="text"><code>devServer.noInfo</code> 🔑</span><a class="icon-link" href="#devserver-noinfo-"></a></h2>\n<p><code>boolean</code></p>\n<p>With <code>noInfo</code> enabled, messages like the webpack bundle information that is shown when starting up and after each save, will be hidden. Errors and warnings will still be shown.</p>\n<pre><code class="lang-js">noInfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-open" id="devserver-open"></a><span class="text"><code>devServer.open</code></span><a class="icon-link" href="#devserver-open"></a></h2>\n<p><code>boolean</code></p>\n<p>When <code>open</code> is enabled, the dev server will open the browser.</p>\n<pre><code class="lang-js">open<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --open\n</code></pre>\n<p>If no browser is provided (as shown above), your default browser will be used. To specify a different browser, just pass its name:</p>\n<pre><code class="lang-bash">webpack-dev-server --open <span class="token string">\'Google Chrome\'</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-openpage" id="devserver-openpage"></a><span class="text"><code>devServer.openPage</code></span><a class="icon-link" href="#devserver-openpage"></a></h2>\n<p><code>string</code></p>\n<p>Specify a page to navigate to when opening the browser.</p>\n<pre><code class="lang-js">openPage<span class="token punctuation">:</span> <span class="token string">\'/different/page\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --open-page <span class="token string">"/different/page"</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-overlay" id="devserver-overlay"></a><span class="text"><code>devServer.overlay</code></span><a class="icon-link" href="#devserver-overlay"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors:</p>\n<pre><code class="lang-js">overlay<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>If you want to show warnings as well as errors:</p>\n<pre><code class="lang-js">overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  errors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-pfx" id="devserver-pfx"></a><span class="text"><code>devServer.pfx</code></span><a class="icon-link" href="#devserver-pfx"></a></h2>\n<p><code>string</code></p>\n<p>When used via the CLI, a path to an SSL .pfx file. If used in options, it should be the bytestream of the .pfx file.</p>\n<pre><code class="lang-js">pfx<span class="token punctuation">:</span> <span class="token string">\'/path/to/file.pfx\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --pfx /path/to/file.pfx\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-pfxpassphrase" id="devserver-pfxpassphrase"></a><span class="text"><code>devServer.pfxPassphrase</code></span><a class="icon-link" href="#devserver-pfxpassphrase"></a></h2>\n<p><code>string</code></p>\n<p>The passphrase to a SSL PFX file.</p>\n<pre><code class="lang-js">pfxPassphrase<span class="token punctuation">:</span> <span class="token string">\'passphrase\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --pfx-passphrase passphrase\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-port" id="devserver-port"></a><span class="text"><code>devServer.port</code></span><a class="icon-link" href="#devserver-port"></a></h2>\n<p><code>number</code></p>\n<p>Specify a port number to listen for requests on:</p>\n<pre><code class="lang-js">port<span class="token punctuation">:</span> <span class="token number">8080</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --port 8080\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-proxy" id="devserver-proxy"></a><span class="text"><code>devServer.proxy</code></span><a class="icon-link" href="#devserver-proxy"></a></h2>\n<p><code>object</code></p>\n<p>Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain.</p>\n<p>The dev-server makes use of the powerful <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> package. Checkout its <a href="https://github.com/chimurai/http-proxy-middleware#options">documentation</a> for more advanced usages.</p>\n<p>With a backend on <code>localhost:3000</code>, you can use this to enable proxying:</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>A request to <code>/api/users</code> will now proxy the request to <code>http://localhost:3000/api/users</code>.</p>\n<p>If you don&#39;t want <code>/api</code> to be passed along, we need to rewrite the path:</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n    pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"^/api"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>A backend server running on HTTPS with an invalid certificate will not be accepted by default. If you want to, modify your config like this:</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"https://other-server.example.com"</span><span class="token punctuation">,</span>\n    secure<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Sometimes you don&#39;t want to proxy everything. It is possible to bypass the proxy based on the return value of a function.</p>\n<p>In the function you get access to the request, response and proxy options. It must return either <code>false</code> or a path that will be served instead of continuing to proxy the request.</p>\n<p>E.g. for a browser request, you want to serve a HTML page, but for an API request you want to proxy it. You could do something like this:</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n    bypass<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Skipping proxy for browser request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">"/index.html"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>If you want to proxy multiple, specific paths to the same target, you can use an array of one or more objects with a <code>context</code> property:</p>\n<pre><code class="lang-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/auth"</span><span class="token punctuation">,</span> <span class="token string">"/api"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-progress-cli-only" id="devserver-progress-cli-only"></a><span class="text"><code>devServer.progress</code> - CLI only</span><a class="icon-link" href="#devserver-progress-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>Output running progress to console.</p>\n<pre><code class="lang-bash">webpack-dev-server --progress\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-public" id="devserver-public"></a><span class="text"><code>devServer.public</code></span><a class="icon-link" href="#devserver-public"></a></h2>\n<p><code>string</code></p>\n<p>When using <em>inline mode</em> and you&#39;re proxying dev-server, the inline client script does not always know where to connect to. It will try to guess the URL of the server based on <code>window.location</code>, but if that fails you&#39;ll need to use this.</p>\n<p>For example, the dev-server is proxied by nginx, and available on <code>myapp.test</code>:</p>\n<pre><code class="lang-js"><span class="token keyword">public</span><span class="token punctuation">:</span> <span class="token string">"myapp.test:80"</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --public myapp.test:80\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-publicpath-" id="devserver-publicpath-"></a><span class="text"><code>devServer.publicPath</code> 🔑</span><a class="icon-link" href="#devserver-publicpath-"></a></h2>\n<p><code>string</code></p>\n<p>The bundled files will be available in the browser under this path.</p>\n<p>Imagine that the server is running under <code>http://localhost:8080</code> and <code>output.filename</code> is set to <code>bundle.js</code>. By default the <code>publicPath</code> is <code>&quot;/&quot;</code>, so your bundle is available as <code>http://localhost:8080/bundle.js</code>.</p>\n<p>The <code>publicPath</code> can be changed so the bundle is put in a directory:</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"/assets/"</span>\n</code></pre>\n<p>The bundle will now be available as <code>http://localhost:8080/assets/bundle.js</code>.</p>\n<blockquote class="tip"><div class="tip-content"> Make sure <code>publicPath</code> always starts and ends with a forward slash. </div></blockquote><p>It is also possible to use a full URL. This is necessary for Hot Module Replacement.</p>\n<pre><code class="lang-js">publicPath<span class="token punctuation">:</span> <span class="token string">"http://localhost:8080/assets/"</span>\n</code></pre>\n<p>The bundle will also be available as <code>http://localhost:8080/assets/bundle.js</code>.</p>\n<blockquote class="tip"><div class="tip-content"> It is recommended that <code>devServer.publicPath</code> is the same as <code>output.publicPath</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-quiet-" id="devserver-quiet-"></a><span class="text"><code>devServer.quiet</code> 🔑</span><a class="icon-link" href="#devserver-quiet-"></a></h2>\n<p><code>boolean</code></p>\n<p>With <code>quiet</code> enabled, nothing except the initial startup information will be written to the console. This also means that errors or warnings from webpack are not visible.</p>\n<pre><code class="lang-js">quiet<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --quiet\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-setup" id="devserver-setup"></a><span class="text"><code>devServer.setup</code></span><a class="icon-link" href="#devserver-setup"></a></h2>\n<p><code>function</code></p>\n<blockquote class="warning"><div class="tip-content"> This option is <strong>deprecated</strong> in favor of <code>before</code> and will be removed in v3.0.0. </div></blockquote><p>Here you can access the Express app object and add your own custom middleware to it.\nFor example, to define custom handlers for some paths:</p>\n<pre><code class="lang-js"><span class="token function">setup</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token punctuation">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-socket" id="devserver-socket"></a><span class="text"><code>devServer.socket</code></span><a class="icon-link" href="#devserver-socket"></a></h2>\n<p><code>string</code></p>\n<p>The Unix socket to listen to (instead of a host).</p>\n<pre><code class="lang-js">socket<span class="token punctuation">:</span> <span class="token string">\'socket\'</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --socket socket\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-staticoptions" id="devserver-staticoptions"></a><span class="text"><code>devServer.staticOptions</code></span><a class="icon-link" href="#devserver-staticoptions"></a></h2>\n<p>It is possible to configure advanced options for serving static files from <code>contentBase</code>. See the <a href="http://expressjs.com/en/4x/api.html#express.static">Express documentation</a> for the possible options. An example:</p>\n<pre><code class="lang-js">staticOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  redirect<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> This only works when using <code>contentBase</code> as a <code>string</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-stats-" id="devserver-stats-"></a><span class="text"><code>devServer.stats</code> 🔑</span><a class="icon-link" href="#devserver-stats-"></a></h2>\n<p><code>string</code> <code>object</code></p>\n<p>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</p>\n<p>To show only errors in your bundle:</p>\n<pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token string">"errors-only"</span>\n</code></pre>\n<p>For more information, see the <a href="/configuration/stats"><strong>stats documentation</strong></a>.</p>\n<blockquote class="tip"><div class="tip-content"> This option has no effect when used with <code>quiet</code> or <code>noInfo</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#devserver-stdin-cli-only" id="devserver-stdin-cli-only"></a><span class="text"><code>devServer.stdin</code> - CLI only</span><a class="icon-link" href="#devserver-stdin-cli-only"></a></h2>\n<p><code>boolean</code></p>\n<p>This option closes the server when stdin ends.</p>\n<pre><code class="lang-bash">webpack-dev-server --stdin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-uselocalip" id="devserver-uselocalip"></a><span class="text"><code>devServer.useLocalIp</code></span><a class="icon-link" href="#devserver-uselocalip"></a></h2>\n<p><code>boolean</code></p>\n<p>This option lets the browser open with your local IP.</p>\n<pre><code class="lang-js">useLocalIp<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --useLocalIp\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-watchcontentbase" id="devserver-watchcontentbase"></a><span class="text"><code>devServer.watchContentBase</code></span><a class="icon-link" href="#devserver-watchcontentbase"></a></h2>\n<p><code>boolean</code></p>\n<p>Tell the server to watch the files served by the <code>devServer.contentBase</code> option. File changes will trigger a full page reload.</p>\n<pre><code class="lang-js">watchContentBase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>It is disabled by default.</p>\n<p>Usage via the CLI</p>\n<pre><code class="lang-bash">webpack-dev-server --watch-content-base\n</code></pre>\n<h2 class="header"><a class="anchor" href="#devserver-watchoptions-" id="devserver-watchoptions-"></a><span class="text"><code>devServer.watchOptions</code> 🔑</span><a class="icon-link" href="#devserver-watchoptions-"></a></h2>\n<p><code>object</code></p>\n<p>Control options related to watching the files.</p>\n<p>webpack uses the file system to get notified of file changes. In some cases this does not work. For example, when using Network File System (NFS). <a href="https://www.vagrantup.com/">Vagrant</a> also has a lot of problems with this. In these cases, use polling:</p>\n<pre><code class="lang-js">watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  poll<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>If this is too heavy on the file system, you can change this to an integer to set the interval in milliseconds.</p>\n<p>See <a href="/configuration/watch">WatchOptions</a> for more options.</p>\n',title:"DevServer"},title:"DevServer",url:"/configuration/dev-server/"},{file:{attributes:{title:"Devtool",sort:10,contributors:["SpaceK33z","lricoy","skipjack","sokra"],related:[{title:"Enabling Sourcemaps",url:"http://survivejs.com/webpack/developing-with-webpack/enabling-sourcemaps/"},{title:"Webpack's Devtool Source Map",url:"http://cheng.logdown.com/posts/2016/03/25/679045"}],group:"-",anchors:[{title:"devtool",id:"devtool"},{title:"Qualities",id:"qualities"},{title:"Development",id:"development"},{title:"Special cases",id:"special-cases"},{title:"Production",id:"production"}]},body:'<p>This option controls if and how source maps are generated.</p>\n<p>Use the <a href="/plugins/source-map-dev-tool-plugin"><code>SourceMapDevToolPlugin</code></a> for a more fine grained configuration. See the <a href="/loaders/source-map-loader"><code>source-map-loader</code></a> to deal with existing source maps.</p>\n<h2 class="header"><a class="anchor" href="#devtool" id="devtool"></a><span class="text"><code>devtool</code></span><a class="icon-link" href="#devtool"></a></h2>\n<p><code>string</code> <code>false</code></p>\n<p>Choose a style of <a href="http://blog.teamtreehouse.com/introduction-source-maps">source mapping</a> to enhance the debugging process. These values can affect build and rebuild speed dramatically.</p>\n<blockquote class="tip"><div class="tip-content"> The webpack repository contains an <a href="https://github.com/webpack/webpack/tree/master/examples/source-map">example showing the effect of all <code>devtool</code> variants</a>. Those examples will likely help you to understand the differences. </div></blockquote><blockquote class="tip"><div class="tip-content"> Instead of using the <code>devtool</code> option you can also use <code>SourceMapDevToolPlugin</code>/<code>EvalSourceMapDevToolPlugin</code> directly as it has more options. Never use both the <code>devtool</code> option and plugin together. The <code>devtool</code> option adds the plugin internally so you would end up with the plugin applied twice. </div></blockquote>\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">devtool</div><div class="table-th">build</div><div class="table-th">rebuild</div><div class="table-th">production</div><div class="table-th">quality</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        (none)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        bundled code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        eval\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        +++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        generated code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-eval-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        ++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        transformed code (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-module-eval-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        ++\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        eval-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        transformed code (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        cheap-module-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        inline-cheap-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        +\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        transformed code (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        inline-cheap-module-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        o\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source (lines only)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        inline-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        no\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        hidden-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        original source\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        devtool\n    </div>\n    <div class="table-td-content">\n        nosources-source-map\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        build\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        rebuild\n    </div>\n    <div class="table-td-content">\n        --\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        production\n    </div>\n    <div class="table-td-content">\n        yes\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        quality\n    </div>\n    <div class="table-td-content">\n        without source content\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><blockquote class="tip"><div class="tip-content"> <code>+++</code> super fast, <code>++</code> fast, <code>+</code> pretty fast, <code>o</code> medium, <code>-</code> pretty slow, <code>--</code> slow </div></blockquote><p>Some of these values are suited for development and some for production. For development you typically want fast Source Maps at the cost of bundle size, but for production you want separate Source Maps that are accurate and support minimizing.</p>\n<blockquote class="warning"><div class="tip-content"> There are some issues with Source Maps in Chrome. <a href="https://github.com/webpack/webpack/issues/3165">We need your help!</a>. </div></blockquote><blockquote class="tip"><div class="tip-content"> See <a href="/configuration/output#output-sourcemapfilename"><code>output.sourceMapFilename</code></a> to customize the filenames of generated Source Maps. </div></blockquote><h3 class="header"><a class="anchor" href="#qualities" id="qualities"></a><span class="text">Qualities</span><a class="icon-link" href="#qualities"></a></h3>\n<p><code>bundled code</code> - You see all generated code as a big blob of code. You don&#39;t see modules separated from each other.</p>\n<p><code>generated code</code> - You see each module separated from each other, annotated with module names. You see the code generated by webpack. Example: Instead of <code>import {test} from &quot;module&quot;; test();</code> you see something like <code>var module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42); module__WEBPACK_IMPORTED_MODULE_1__.a();</code>.</p>\n<p><code>transformed code</code> - You see each module separated from each other, annotated with module names. You see the code before webpack transforms it, but after Loaders transpile it. Example: Instead of <code>import {test} from &quot;module&quot;; class A extends test {}</code> you see something like <code>import {test} from &quot;module&quot;; var A = function(_test) { ... }(test);</code></p>\n<p><code>original source</code> - You see each module separated from each other, annotated with module names. You see the code before transpilation, as you authored it. This depends on Loader support.</p>\n<p><code>without source content</code> - Contents for the sources are not included in the Source Maps. Browsers usually try to load the source from the webserver or filesystem. You have to make sure to set <a href="/configuration/output/#output-devtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a> correctly to match source urls.</p>\n<p><code>(lines only)</code> - Source Maps are simplified to a single mapping per line. This usually means a single mapping per statement (assuming you author is this way). This prevents you from debugging execution on statement level and from settings breakpoints on columns of a line. Combining with minimizing is not possible as minimizers usually only emit a single line.</p>\n<h3 class="header"><a class="anchor" href="#development" id="development"></a><span class="text">Development</span><a class="icon-link" href="#development"></a></h3>\n<p>The following options are ideal for development:</p>\n<p><code>eval</code> - Each module is executed with <code>eval()</code> and <code>//@ sourceURL</code>. This is pretty fast. The main disadvantage is that it doesn&#39;t display line numbers correctly since it gets mapped to transpiled code instead of the original code (No Source Maps from Loaders).</p>\n<p><code>eval-source-map</code> - Each module is executed with <code>eval()</code> and a SourceMap is added as a DataUrl to the <code>eval()</code>. Initially it is slow, but it provides fast rebuild speed and yields real files. Line numbers are correctly mapped since it gets mapped to the original code. It yields the best quality SourceMaps for development.</p>\n<p><code>cheap-eval-source-map</code> - Similar to <code>eval-source-map</code>, each module is executed with <code>eval()</code>. It is &quot;cheap&quot; because it doesn&#39;t have column mappings, it only maps line numbers. It ignores SourceMaps from Loaders and only display transpiled code similar to the <code>eval</code> devtool.</p>\n<p><code>cheap-module-eval-source-map</code> - Similar to <code>cheap-eval-source-map</code>, however, in this case Source Maps from Loaders are processed for better results. However Loader Source Maps are simplified to a single mapping per line.</p>\n<h3 class="header"><a class="anchor" href="#special-cases" id="special-cases"></a><span class="text">Special cases</span><a class="icon-link" href="#special-cases"></a></h3>\n<p>The following options are not ideal for development nor production. They are needed for some special cases, i. e. for some 3rd party tools.</p>\n<p><code>inline-source-map</code> - A SourceMap is added as a DataUrl to the bundle.</p>\n<p><code>cheap-source-map</code> - A SourceMap without column-mappings ignoring loader Source Maps.</p>\n<p><code>inline-cheap-source-map</code> - Similar to <code>cheap-source-map</code> but SourceMap is added as a DataUrl to the bundle.</p>\n<p><code>cheap-module-source-map</code> - A SourceMap without column-mappings that simplifies loader Source Maps to a single mapping per line.</p>\n<p><code>inline-cheap-module-source-map</code> - Similar to <code>cheap-module-source-map</code> but SourceMap is added as a DataUrl to the bundle.</p>\n<h3 class="header"><a class="anchor" href="#production" id="production"></a><span class="text">Production</span><a class="icon-link" href="#production"></a></h3>\n<p>These options are typically used in production:</p>\n<p><code>(none)</code> (Omit the <code>devtool</code> option) - No SourceMap is emitted. This is a good option to start with.</p>\n<p><code>source-map</code> - A full SourceMap is emitted as a separate file. It adds a reference comment to the bundle so development tools know where to find it.</p>\n<blockquote class="warning"><div class="tip-content"> You should configure your server to disallow access to the Source Map file for normal users! </div></blockquote><p><code>hidden-source-map</code> - Same as <code>source-map</code>, but doesn&#39;t add a reference comment to the bundle. Useful if you only want SourceMaps to map error stack traces from error reports, but don&#39;t want to expose your SourceMap for the browser development tools.</p>\n<blockquote class="warning"><div class="tip-content"> You should not deploy the Source Map file to the webserver. Instead only use it for error report tooling. </div></blockquote><p><code>nosources-source-map</code> - A SourceMap is created without the <code>sourcesContent</code> in it. It can be used to map stack traces on the client without exposing all of the source code. You can deploy the Source Map file to the webserver.</p>\n<blockquote class="warning"><div class="tip-content"> It still exposes filenames and structure for decompiling, but it doesn&#39;t expose the original code. </div></blockquote><blockquote class="tip"><div class="tip-content"> When using the <code>uglifyjs-webpack-plugin</code> you must provide the <code>sourceMap: true</code> option to enable SourceMap support. </div></blockquote>',title:"Devtool"},title:"Devtool",url:"/configuration/devtool/"},{file:{attributes:{title:"Target",sort:11,contributors:["SpaceK33z","juangl","pastelsky","skipjack","sokra","tbroadley"],group:"-",anchors:[{title:"target",id:"target"},{title:"string",id:"string"},{title:"function",id:"function"}],related:[]},body:'<p>webpack can compile for multiple environments or <em>targets</em>. To understand what a <code>target</code> is in detail, read through <a href="/concepts/targets">the targets concept page</a>.</p>\n<h2 class="header"><a class="anchor" href="#target" id="target"></a><span class="text"><code>target</code></span><a class="icon-link" href="#target"></a></h2>\n<p><code>string | function(compiler)</code></p>\n<p>Instructs webpack to target a specific environment.</p>\n<h3 class="header"><a class="anchor" href="#string" id="string"></a><span class="text"><code>string</code></span><a class="icon-link" href="#string"></a></h3>\n<p>The following string values are supported via <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a>:</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Option</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>async-node</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile for usage in a Node.js-like environment (uses <code>fs</code> and <code>vm</code> to load chunks asynchronously)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <del><code>atom</code></del>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Alias for <code>electron-main</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <del><code>electron</code></del>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Alias for <code>electron-main</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>electron-main</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile for <a href="http://electron.atom.io/">Electron</a> for main process.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>electron-renderer</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile for <a href="http://electron.atom.io/">Electron</a> for renderer process, providing a target using <code>JsonpTemplatePlugin</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>node</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile for usage in a Node.js-like environment (uses Node.js <code>require</code> to load chunks)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>node-webkit</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a> (experimental)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>web</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile for usage in a browser-like environment <strong>(default)</strong>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Option\n    </div>\n    <div class="table-td-content">\n        <code>webworker</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Compile as WebWorker\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>For example, when the <code>target</code> is set to <code>&quot;electron&quot;</code>, webpack includes multiple electron specific variables. For more information on which templates and externals are used, you can refer to webpack&#39;s <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L70-L185">source code</a>.</p>\n<h3 class="header"><a class="anchor" href="#function" id="function"></a><span class="text"><code>function</code></span><a class="icon-link" href="#function"></a></h3>\n<p>If a function is passed, then it will be called with the compiler as a parameter. Set it to a function if none of the predefined targets from the list above meet your needs.</p>\n<p>For example, if you don&#39;t want any of the plugins they applied:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> undefined\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Or you can apply specific plugins you want:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">"web"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n',title:"Target"},title:"Target",url:"/configuration/target/"},{file:{attributes:{title:"Watch and WatchOptions",sort:12,contributors:["SpaceK33z","skipjack","sokra"],group:"-",anchors:[{title:"watch",id:"watch"},{title:"watchOptions",id:"watchoptions"},{title:"watchOptions.aggregateTimeout",id:"watchoptions-aggregatetimeout"},{title:"watchOptions.ignored",id:"watchoptions-ignored"},{title:"watchOptions.poll",id:"watchoptions-poll"}],related:[]},body:'<p>webpack can watch files and recompile whenever they change. This page explains how to enable this and a couple of tweaks you can make if watching does not work properly for you.</p>\n<h2 class="header"><a class="anchor" href="#watch" id="watch"></a><span class="text"><code>watch</code></span><a class="icon-link" href="#watch"></a></h2>\n<p><code>boolean</code></p>\n<p>Turn on watch mode. This means that after the initial build, webpack will continue to watch for changes in any of the resolved files. Watch mode is turned off by default:</p>\n<pre><code class="lang-js">watch<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> In webpack-dev-server and webpack-dev-middleware watch mode is enabled by default. </div></blockquote><h2 class="header"><a class="anchor" href="#watchoptions" id="watchoptions"></a><span class="text"><code>watchOptions</code></span><a class="icon-link" href="#watchoptions"></a></h2>\n<p><code>object</code></p>\n<p>A set of options used to customize watch mode:</p>\n<pre><code class="lang-js">watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  poll<span class="token punctuation">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watchoptions-aggregatetimeout" id="watchoptions-aggregatetimeout"></a><span class="text"><code>watchOptions.aggregateTimeout</code></span><a class="icon-link" href="#watchoptions-aggregatetimeout"></a></h2>\n<p><code>number</code></p>\n<p>Add a delay before rebuilding once the first file changed. This allows webpack to aggregate any other changes made during this time period into one rebuild. Pass a value in milliseconds:</p>\n<pre><code class="lang-js">aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment">// The default</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watchoptions-ignored" id="watchoptions-ignored"></a><span class="text"><code>watchOptions.ignored</code></span><a class="icon-link" href="#watchoptions-ignored"></a></h2>\n<p>For some systems, watching many file systems can result in a lot of CPU or memory usage. It is possible to exclude a huge folder like <code>node_modules</code>:</p>\n<pre><code class="lang-js">ignored<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>\n</code></pre>\n<p>It is also possible to use <a href="https://github.com/es128/anymatch">anymatch</a> patterns:</p>\n<pre><code class="lang-js">ignored<span class="token punctuation">:</span> "files<span class="token comment">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js"\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watchoptions-poll" id="watchoptions-poll"></a><span class="text"><code>watchOptions.poll</code></span><a class="icon-link" href="#watchoptions-poll"></a></h2>\n<p><code>boolean</code> <code>number</code></p>\n<p>Turn on <a href="http://whatis.techtarget.com/definition/polling">polling</a> by passing <code>true</code>, or specifying a poll interval in milliseconds:</p>\n<pre><code class="lang-js">poll<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment">// Check for changes every second</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> If watching does not work for you, try out this option. Watching does not work with NFS and machines in VirtualBox. </div></blockquote>',title:"Watch and WatchOptions"},title:"Watch and WatchOptions",url:"/configuration/watch/"},{file:{attributes:{title:"Externals",sort:13,contributors:["pksjce","skipjack","sokra"],group:"-",anchors:[{title:"externals",id:"externals"},{title:"string",id:"string"},{title:"array",id:"array"},{title:"object",id:"object"},{title:"function",id:"function"},{title:"regex",id:"regex"}],related:[]},body:'<p>The <code>externals</code> configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer&#39;s environment. This feature is typically most useful to <strong>library developers</strong>, however there are a variety of applications for it.</p>\n<blockquote class="tip"><div class="tip-content"> <strong>consumer</strong> here is any end user application that includes the library that you have bundled using webpack. </div></blockquote><h2 class="header"><a class="anchor" href="#externals" id="externals"></a><span class="text"><code>externals</code></span><a class="icon-link" href="#externals"></a></h2>\n<p><code>string</code> <code>array</code> <code>object</code> <code>function</code>  <code>regex</code></p>\n<p><strong>Prevent bundling</strong> of certain <code>import</code>ed packages and instead retrieve these <em>external dependencies</em> at runtime.</p>\n<p>For example, to include <a href="https://jquery.com/">jQuery</a> from a CDN instead of bundling it:</p>\n<p><strong>index.html</strong></p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>\n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.0.js<span class="token punctuation">"</span></span>\n  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk<span class="token punctuation">=</span><span class="token punctuation">"</span></span>\n  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  jquery<span class="token punctuation">:</span> <span class="token string">\'jQuery\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This leaves any dependent modules unchanged, i.e. the code shown below will still work:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.my-element\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The bundle with external dependencies can be used in various module contexts, such as <a href="/concepts/modules">CommonJS, AMD, global and ES2015 modules</a>. The external library may be available in any of these forms:</p>\n<ul>\n<li><strong>root</strong>: The library should be available as a global variable (e.g. via a script tag).</li>\n<li><strong>commonjs</strong>: The library should be available as a CommonJS module.</li>\n<li><strong>commonjs2</strong>: Similar to the above but where the export is <code>module.exports.default</code>.</li>\n<li><strong>amd</strong>: Similar to <code>commonjs</code> but using AMD module system.</li>\n</ul>\n<p>The following syntaxes are accepted...</p>\n<h3 class="header"><a class="anchor" href="#string" id="string"></a><span class="text">string</span><a class="icon-link" href="#string"></a></h3>\n<p>See the example above. The property name <code>jquery</code> indicates that the module <code>jquery</code> in <code>import $ from &#39;jquery&#39;</code> should be excluded. In order to replace this module, the value <code>jQuery</code> will be used to retrieve a global <code>jQuery</code> variable. In other words, when a string is provided it will be treated as <code>root</code> (defined above and below).</p>\n<h3 class="header"><a class="anchor" href="#array" id="array"></a><span class="text">array</span><a class="icon-link" href="#array"></a></h3>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  subtract<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>subtract: [&#39;./math&#39;, &#39;subtract&#39;]</code> converts to a parent child construct, where <code>./math</code> is the parent module and your bundle only requires the subset under <code>subtract</code> variable.</p>\n<h3 class="header"><a class="anchor" href="#object" id="object"></a><span class="text">object</span><a class="icon-link" href="#object"></a></h3>\n<pre><code class="lang-js">externals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  react<span class="token punctuation">:</span> <span class="token string">\'react\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// or</span>\n\nexternals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  lodash <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    commonjs<span class="token punctuation">:</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span>\n    amd<span class="token punctuation">:</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span>\n    root<span class="token punctuation">:</span> <span class="token string">"_"</span> <span class="token comment">// indicates global variable</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// or</span>\n\nexternals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  subtract <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"math"</span><span class="token punctuation">,</span> <span class="token string">"subtract"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This syntax is used to describe all the possible ways that an external library can be available. <code>lodash</code> here is available as <code>lodash</code> under AMD and CommonJS module systems but available as <code>_</code> in a global variable form. <code>subtract</code> here is available via the property <code>subtract</code> under the global <code>math</code> object (e.g. <code>window[&#39;math&#39;][&#39;subtract&#39;]</code>).</p>\n<h3 class="header"><a class="anchor" href="#function" id="function"></a><span class="text">function</span><a class="icon-link" href="#function"></a></h3>\n<p>It might be useful to define your own function to control the behavior of what you want to externalize from webpack. <a href="https://www.npmjs.com/package/webpack-node-externals">webpack-node-externals</a>, for example, excludes all modules from the <code>node_modules</code> directory and provides some options to, for example, whitelist packages.</p>\n<p>It basically comes down to this:</p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> request<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^yourregex$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<p>The <code>&#39;commonjs &#39; + request</code> defines the type of module that needs to be externalized.</p>\n<h3 class="header"><a class="anchor" href="#regex" id="regex"></a><span class="text">regex</span><a class="icon-link" href="#regex"></a></h3>\n<p>Every dependency that matches the given regular expression will be excluded from the output bundles.</p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token regex">/^(jquery|\\$)$/i</span>\n</code></pre>\n<p>In this case any dependency named <code>jQuery</code>, capitalized or not, or <code>$</code> would be externalized.</p>\n<p>For more information on how to use this configuration, please refer to the article on <a href="/guides/author-libraries">how to author a library</a>.</p>\n',title:"Externals"},title:"Externals",url:"/configuration/externals/"},{file:{attributes:{title:"Performance",sort:14,contributors:["tbroadley","thelarkinn"],group:"-",anchors:[{title:"performance",id:"performance"},{title:"performance.hints",id:"performance-hints"},{title:"performance.maxEntrypointSize",id:"performance-maxentrypointsize"},{title:"performance.maxAssetSize",id:"performance-maxassetsize"},{title:"performance.assetFilter",id:"performance-assetfilter"}],related:[]},body:'<p>These options allows you to control how webpack notifies you of assets and entrypoints that exceed a specific file limit. \nThis feature was inspired by the idea of <a href="https://github.com/webpack/webpack/issues/3216">webpack Performance Budgets</a>.</p>\n<h2 class="header"><a class="anchor" href="#performance" id="performance"></a><span class="text"><code>performance</code></span><a class="icon-link" href="#performance"></a></h2>\n<p><code>object</code></p>\n<p>Configure how performance hints are shown. For example if you have an asset that is over 250kb, webpack will emit a warning notifying you of this.</p>\n<h2 class="header"><a class="anchor" href="#performance-hints" id="performance-hints"></a><span class="text"><code>performance.hints</code></span><a class="icon-link" href="#performance-hints"></a></h2>\n<p><code>false | &quot;error&quot; | &quot;warning&quot;</code></p>\n<p>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found. This property is set to <code>&quot;warning&quot;</code> by default.</p>\n<p>Given an asset is created that is over 250kb:</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>No hint warnings or errors are shown.</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token string">"warning"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>A warning will be displayed notifying you of a large asset. We recommend something like this for development environments.</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  hints<span class="token punctuation">:</span> <span class="token string">"error"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>An error will be displayed notifying you of a large asset. We recommend using <code>hints: &quot;error&quot;</code> during production builds to help prevent deploying production bundles that are too large, impacting webpage performance. </p>\n<h2 class="header"><a class="anchor" href="#performance-maxentrypointsize" id="performance-maxentrypointsize"></a><span class="text"><code>performance.maxEntrypointSize</code></span><a class="icon-link" href="#performance-maxentrypointsize"></a></h2>\n<p><code>int</code></p>\n<p>An entrypoint represents all assets that would be utilized during initial load time for a specific entry. This option controls when webpack should emit performance hints based on the maximum entrypoint size. The default value is <code>250000</code> (bytes).</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  maxEntrypointSize<span class="token punctuation">:</span> <span class="token number">400000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#performance-maxassetsize" id="performance-maxassetsize"></a><span class="text"><code>performance.maxAssetSize</code></span><a class="icon-link" href="#performance-maxassetsize"></a></h2>\n<p><code>int</code></p>\n<p>An asset is any emitted file from webpack. This option controls when webpack emits a performance hint based on individual asset size. The default value is <code>250000</code> (bytes).</p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  maxAssetSize<span class="token punctuation">:</span> <span class="token number">100000</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#performance-assetfilter" id="performance-assetfilter"></a><span class="text"><code>performance.assetFilter</code></span><a class="icon-link" href="#performance-assetfilter"></a></h2>\n<p><code>Function</code></p>\n<p>This property allows webpack to control what files are used to calculate performance hints. The default function is seen below: </p>\n<pre><code class="lang-js"><span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token regex">/\\.map$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>You can override this property by passing your own function in: </p>\n<pre><code class="lang-js">performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  assetFilter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The example above will only give you performance hints based on <code>.js</code> files.</p>\n',title:"Performance"},title:"Performance",url:"/configuration/performance/"},{file:{attributes:{title:"Node",sort:14,contributors:["Rob--W","oneforwonder","skipjack","sokra"],group:"-",anchors:[{title:"node",id:"node"},{title:"node.console",id:"node-console"},{title:"node.process",id:"node-process"},{title:"node.global",id:"node-global"},{title:"node.__filename",id:"node-__filename"},{title:"node.__dirname",id:"node-__dirname"},{title:"node.Buffer",id:"node-buffer"},{title:"node.setImmediate",id:"node-setimmediate"},{title:"Other node core libraries",id:"other-node-core-libraries"}],related:[]},body:'<p>These options configure whether to polyfill or mock certain <a href="https://nodejs.org/docs/latest/api/globals.html">Node.js globals</a> and modules. This allows code originally written for the Node.js environment to run in other environments like the browser.</p>\n<p>This feature is provided by webpack&#39;s internal <a href="https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js"><code>NodeStuffPlugin</code></a> plugin. If the target is &quot;web&quot; (default) or &quot;webworker&quot;, the <a href="https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js"><code>NodeSourcePlugin</code></a> plugin is also activated.</p>\n<h2 class="header"><a class="anchor" href="#node" id="node"></a><span class="text"><code>node</code></span><a class="icon-link" href="#node"></a></h2>\n<p><code>object</code></p>\n<p>This is an object where each property is the name of a Node global or module and each value may be one of the following...</p>\n<ul>\n<li><code>true</code>: Provide a polyfill.</li>\n<li><code>&quot;mock&quot;</code>: Provide a mock that implements the expected interface but has little or no functionality.</li>\n<li><code>&quot;empty&quot;</code>: Provide an empty object.</li>\n<li><code>false</code>: Provide nothing. Code that expects this object may crash with a <code>ReferenceError</code>. Code that attempts to import the module using <code>require(&#39;modulename&#39;)</code> may trigger a <code>Cannot find module &quot;modulename&quot;</code> error.</li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> Not every Node global supports all four options. The compiler will throw an error for property-value combinations that aren&#39;t supported (e.g. <code>process: &#39;empty&#39;</code>). See the sections below for more details. </div></blockquote><p>These are the defaults:</p>\n<pre><code class="lang-js">node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  global<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  process<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  __filename<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  __dirname<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  Buffer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  setImmediate<span class="token punctuation">:</span> <span class="token boolean">true</span>\n\n  <span class="token comment">// See "Other node core libraries" for additional options.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Since webpack 3.0.0, the <code>node</code> option may be set to <code>false</code> to completely turn off the <code>NodeStuffPlugin</code> and <code>NodeSourcePlugin</code> plugins.</p>\n<h2 class="header"><a class="anchor" href="#node-console" id="node-console"></a><span class="text"><code>node.console</code></span><a class="icon-link" href="#node-console"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>Default: <code>false</code></p>\n<p>The browser provides a <code>console</code> object with a very similar interface to the Node.js <code>console</code>, so a polyfill is generally not needed.</p>\n<h2 class="header"><a class="anchor" href="#node-process" id="node-process"></a><span class="text"><code>node.process</code></span><a class="icon-link" href="#node-process"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>Default: <code>true</code></p>\n<h2 class="header"><a class="anchor" href="#node-global" id="node-global"></a><span class="text"><code>node.global</code></span><a class="icon-link" href="#node-global"></a></h2>\n<p><code>boolean</code></p>\n<p>Default: <code>true</code></p>\n<p>See <a href="https://github.com/webpack/webpack/blob/master/buildin/global.js">the source</a> for the exact behavior of this object.</p>\n<h2 class="header"><a class="anchor" href="#node-__filename" id="node-__filename"></a><span class="text"><code>node.__filename</code></span><a class="icon-link" href="#node-__filename"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>Default: <code>&quot;mock&quot;</code></p>\n<p>Options:</p>\n<ul>\n<li><code>true</code>: The filename of the <strong>input</strong> file relative to the <a href="https://webpack.js.org/configuration/entry-context/#context"><code>context</code> option</a>.</li>\n<li><code>false</code>: The regular Node.js <code>__filename</code> behavior. The filename of the <strong>output</strong> file when run in a Node.js environment.</li>\n<li><code>&quot;mock&quot;</code>: The fixed value <code>&quot;index.js&quot;</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#node-__dirname" id="node-__dirname"></a><span class="text"><code>node.__dirname</code></span><a class="icon-link" href="#node-__dirname"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>Default: <code>&quot;mock&quot;</code></p>\n<p>Options:</p>\n<ul>\n<li><code>true</code>: The dirname of the <strong>input</strong> file relative to the <a href="https://webpack.js.org/configuration/entry-context/#context"><code>context</code> option</a>.</li>\n<li><code>false</code>: The regular Node.js <code>__dirname</code> behavior. The dirname of the <strong>output</strong> file when run in a Node.js environment.</li>\n<li><code>&quot;mock&quot;</code>: The fixed value <code>&quot;/&quot;</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#node-buffer" id="node-buffer"></a><span class="text"><code>node.Buffer</code></span><a class="icon-link" href="#node-buffer"></a></h2>\n<p><code>boolean | &quot;mock&quot;</code></p>\n<p>Default: <code>true</code></p>\n<h2 class="header"><a class="anchor" href="#node-setimmediate" id="node-setimmediate"></a><span class="text"><code>node.setImmediate</code></span><a class="icon-link" href="#node-setimmediate"></a></h2>\n<p><code>boolean | &quot;mock&quot; | &quot;empty&quot;</code></p>\n<p>Default: <code>true</code></p>\n<h2 class="header"><a class="anchor" href="#other-node-core-libraries" id="other-node-core-libraries"></a><span class="text">Other node core libraries</span><a class="icon-link" href="#other-node-core-libraries"></a></h2>\n<p><code>boolean | &quot;mock&quot; | &quot;empty&quot;</code></p>\n<blockquote class="warning"><div class="tip-content"> This option is only activated (via <code>NodeSourcePlugin</code>) when the target is unspecified, &quot;web&quot; or &quot;webworker&quot;. </div></blockquote><p>Polyfills for Node.js core libraries from <a href="https://github.com/webpack/node-libs-browser"><code>node-libs-browser</code></a> are used if available, when the <code>NodeSourcePlugin</code> plugin is enabled. See the list of <a href="https://github.com/webpack/node-libs-browser#readme">Node.js core libraries and their polyfills</a>.</p>\n<p>By default, webpack will polyfill each library if there is a known polyfill or do nothing if there is not one. In the latter case, webpack will behave as if the module name was configured with the <code>false</code> value.</p>\n<blockquote class="tip"><div class="tip-content"> To import a built-in module, use <a href="/api/module-variables/#__non_webpack_require__-webpack-specific-"><code>__non_webpack_require__</code></a>, i.e. <code>__non_webpack_require__(&#39;modulename&#39;)</code> instead of <code>require(&#39;modulename&#39;)</code>. </div></blockquote><p>Example:</p>\n<pre><code class="lang-js">node<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  dns<span class="token punctuation">:</span> <span class="token string">"mock"</span><span class="token punctuation">,</span>\n  fs<span class="token punctuation">:</span> <span class="token string">"empty"</span><span class="token punctuation">,</span>\n  path<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  url<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',title:"Node"},title:"Node",url:"/configuration/node/"},{file:{attributes:{title:"Stats",sort:15,contributors:["SpaceK33z","jasonblanchard","jungomi","ldrick","sallar"],group:"-",anchors:[{title:"stats",id:"stats"}],related:[]},body:'<p>The <code>stats</code> option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you don&#39;t want to use <code>quiet</code> or <code>noInfo</code> because you want some bundle information, but not all of it.</p>\n<blockquote class="tip"><div class="tip-content"> For webpack-dev-server, this property needs to be in the <code>devServer</code> object. </div></blockquote><blockquote class="warning"><div class="tip-content"> This option does not have any effect when using the Node.js API. </div></blockquote><h2 class="header"><a class="anchor" href="#stats" id="stats"></a><span class="text"><code>stats</code></span><a class="icon-link" href="#stats"></a></h2>\n<p><code>object</code> <code>string</code></p>\n<p>There are some presets available to use as a shortcut. Use them like this:</p>\n<pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token string">"errors-only"</span>\n</code></pre>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Preset</div><div class="table-th">Alternative</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;errors-only&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <em>none</em>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Only output when errors happen\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;minimal&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <em>none</em>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Only output when errors or new compilation happen\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;none&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Output nothing\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;normal&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Standard output\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Preset\n    </div>\n    <div class="table-td-content">\n        <code>&quot;verbose&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Alternative\n    </div>\n    <div class="table-td-content">\n        <em>none</em>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Output everything\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>For more granular control, it is possible to specify exactly what information you want. Please note that all of the options in this object are optional.</p>\n<pre><code class="lang-js">stats<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token comment">// fallback value for stats options when an option is not defined (has precedence over local webpack defaults)</span>\n  all<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>\n  <span class="token comment">// Add asset Information</span>\n  assets<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Sort assets by a field</span>\n  <span class="token comment">// You can reverse the sort with `!field`.</span>\n  assetsSort<span class="token punctuation">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add information about cached (not built) modules</span>\n  cached<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show cached assets (setting this to `false` only shows emitted files)</span>\n  cachedAssets<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add children information</span>\n  children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add chunk information (setting this to `false` allows for a less verbose output)</span>\n  chunks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add built modules information to chunk information</span>\n  chunkModules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add the origins of chunks and chunk merging info</span>\n  chunkOrigins<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Sort the chunks by a field</span>\n  <span class="token comment">// You can reverse the sort with `!field`. Default is `id`.</span>\n  chunksSort<span class="token punctuation">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>\n  <span class="token comment">// Context directory for request shortening</span>\n  context<span class="token punctuation">:</span> <span class="token string">"../src/"</span><span class="token punctuation">,</span>\n  <span class="token comment">// `webpack --colors` equivalent</span>\n  colors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Display the distance from the entry point for each module</span>\n  depth<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// Display the entry points with the corresponding bundles</span>\n  entrypoints<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add --env information</span>\n  env<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add errors</span>\n  errors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add details to errors (like resolving log)</span>\n  errorDetails<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Exclude assets from being displayed in stats</span>\n  <span class="token comment">// This can be done with a String, a RegExp, a Function getting the assets name</span>\n  <span class="token comment">// and returning a boolean or an Array of the above.</span>\n  excludeAssets<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>assetName<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span> <span class="token operator">|</span>\n    <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// Exclude modules from being displayed in stats</span>\n  <span class="token comment">// This can be done with a String, a RegExp, a Function getting the modules source</span>\n  <span class="token comment">// and returning a boolean or an Array of the above.</span>\n  excludeModules<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span> <span class="token operator">|</span>\n    <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// See excludeModules</span>\n  exclude<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span> <span class="token operator">|</span>\n    <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>moduleSource<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add the hash of the compilation</span>\n  hash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Set the maximum number of modules to be shown</span>\n  maxModules<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add built modules information</span>\n  modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Sort the modules by a field</span>\n  <span class="token comment">// You can reverse the sort with `!field`. Default is `id`.</span>\n  modulesSort<span class="token punctuation">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show dependencies and origin of warnings/errors (since webpack 2.5.0)</span>\n  moduleTrace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show performance hint when file size exceeds `performance.maxAssetSize`</span>\n  performance<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show the exports of the modules</span>\n  providedExports<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add public path information</span>\n  publicPath<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add information about the reasons why modules are included</span>\n  reasons<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add the source code of modules</span>\n  source<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add timing information</span>\n  timings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Show which exports of a module are used</span>\n  usedExports<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add webpack version information</span>\n  version<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Add warnings</span>\n  warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// Filter warnings to be shown (since webpack 2.4.0),</span>\n  <span class="token comment">// can be a String, Regexp, a function getting the warning and returning a boolean</span>\n  <span class="token comment">// or an Array of a combination of the above. First match wins.</span>\n  warningsFilter<span class="token punctuation">:</span> <span class="token string">"filter"</span> <span class="token operator">|</span> <span class="token operator">/</span>filter<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"filter"</span><span class="token punctuation">,</span> <span class="token operator">/</span>filter<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span>warning<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n',title:"Stats"},title:"Stats",url:"/configuration/stats/"},{file:{attributes:{title:"Other Options",sort:16,contributors:["skipjack","sokra","terinjokes"],related:[{title:"Using Records",url:"https://survivejs.com/webpack/optimizing/separating-manifest/#using-records"}],group:"-",anchors:[{title:"amd",id:"amd"},{title:"bail",id:"bail"},{title:"cache",id:"cache"},{title:"loader",id:"loader"},{title:"parallelism",id:"parallelism"},{title:"profile",id:"profile"},{title:"recordsPath",id:"recordspath"},{title:"recordsInputPath",id:"recordsinputpath"},{title:"recordsOutputPath",id:"recordsoutputpath"}]},body:'<p>These are the remaining configuration options supported by webpack.</p>\n<blockquote class="warning"><div class="tip-content"> Help Wanted: This page is still a work in progress. If you are familiar with any of the options for which the description or examples are incomplete, please create an issue and submit a PR at the <a href="https://github.com/webpack/webpack.js.org">docs repo</a>! </div></blockquote><h2 class="header"><a class="anchor" href="#amd" id="amd"></a><span class="text"><code>amd</code></span><a class="icon-link" href="#amd"></a></h2>\n<p><code>object</code></p>\n<p>Set the value of <code>require.amd</code> or <code>define.amd</code>:</p>\n<pre><code class="lang-js">amd<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  jQuery<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Certain popular modules written for AMD, most notably jQuery versions 1.7.0 to 1.9.1, will only register as an AMD module if the loader indicates it has taken <a href="https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD">special allowances</a> for multiple versions being included on a page.</p>\n<p>The allowances were the ability to restrict registrations to a specific version or to support different sandboxes with different defined modules.</p>\n<p>This option allows you to set the key your module looks for to a truthy value.\nAs it happens, the AMD support in webpack ignores the defined name anyways.</p>\n<h2 class="header"><a class="anchor" href="#bail" id="bail"></a><span class="text"><code>bail</code></span><a class="icon-link" href="#bail"></a></h2>\n<p><code>boolean</code></p>\n<p>Fail out on the first error instead of tolerating it. By default webpack will log these errors in red in the terminal, as well as the browser console when using HMR, but continue bundling. To enable it:</p>\n<pre><code class="lang-js">bail<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n<p>This will force webpack to exit its bundling process.</p>\n<h2 class="header"><a class="anchor" href="#cache" id="cache"></a><span class="text"><code>cache</code></span><a class="icon-link" href="#cache"></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>Cache the generated webpack modules and chunks to improve build speed. Caching is enabled by default while in watch mode. To disable caching simply pass:</p>\n<pre><code class="lang-js">cache<span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre>\n<p>If an object is passed, webpack will use this object for caching. Keeping a reference to this object will allow one to share the same cache between compiler calls:</p>\n<pre><code class="lang-js"><span class="token keyword">let</span> SharedCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n  cache<span class="token punctuation">:</span> SharedCache\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Don&#39;t share the cache between calls with different options. </div></blockquote><blockquote class="todo"><div class="tip-content"> Elaborate on the warning and example - calls with different configuration options? </div></blockquote><h2 class="header"><a class="anchor" href="#loader" id="loader"></a><span class="text"><code>loader</code></span><a class="icon-link" href="#loader"></a></h2>\n<p><code>object</code></p>\n<p>Expose custom values into the loader context.</p>\n<blockquote class="todo"><div class="tip-content"> Add an example... </div></blockquote><h2 class="header"><a class="anchor" href="#parallelism" id="parallelism"></a><span class="text"><code>parallelism</code></span><a class="icon-link" href="#parallelism"></a></h2>\n<p><code>number</code></p>\n<p>Limit the number of parallel processed modules. Can be used to fine tune performance or to get more reliable profiling results.</p>\n<h2 class="header"><a class="anchor" href="#profile" id="profile"></a><span class="text"><code>profile</code></span><a class="icon-link" href="#profile"></a></h2>\n<p><code>boolean</code></p>\n<p>Capture a &quot;profile&quot; of the application, including statistics and hints, which can then be dissected using the <a href="https://webpack.github.io/analyse/">Analyze</a> tool.</p>\n<blockquote class="tip"><div class="tip-content"> Use the <a href="https://www.npmjs.com/package/stats-webpack-plugin">StatsPlugin</a> for more control over the generated profile. </div></blockquote><blockquote class="tip"><div class="tip-content"> Combine with <code>parallelism: 1</code> for better results. </div></blockquote><h2 class="header"><a class="anchor" href="#recordspath" id="recordspath"></a><span class="text"><code>recordsPath</code></span><a class="icon-link" href="#recordspath"></a></h2>\n<p>Use this option to generate a JSON file containing webpack &quot;records&quot; -- pieces of data used to store module identifiers across multiple builds. You can use this file to track how modules change between builds. To generate one, simply specify a location:</p>\n<pre><code class="lang-js">recordsPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'records.json\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Records are particularly useful if you have a complex setup that leverages <a href="/guides/code-splitting">Code Splitting</a>. The data can be used to ensure the split bundles are achieving the <a href="/guides/caching">caching</a> behavior you need.</p>\n<blockquote class="tip"><div class="tip-content"> Note that although this file is generated by the compiler, you may still want to track it in source control to keep a history of how it has changed over time. </div></blockquote><blockquote class="warning"><div class="tip-content"> Setting <code>recordsPath</code> will essentially set <code>recordsInputPath</code> and <code>recordsOutputPath</code> to the same location. This is usually all that&#39;s necessary unless you decide to change the name of the file containing the records. See below for an example. </div></blockquote><h2 class="header"><a class="anchor" href="#recordsinputpath" id="recordsinputpath"></a><span class="text"><code>recordsInputPath</code></span><a class="icon-link" href="#recordsinputpath"></a></h2>\n<p>Specify the file from which to read the last set of records. This can be used to rename a records file. See the example below.</p>\n<h2 class="header"><a class="anchor" href="#recordsoutputpath" id="recordsoutputpath"></a><span class="text"><code>recordsOutputPath</code></span><a class="icon-link" href="#recordsoutputpath"></a></h2>\n<p>Specify where the records should be written. The following example shows how you might use this option in combination with <code>recordsInputPath</code> to rename a records file:</p>\n<pre><code class="lang-js">recordsInputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'records.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\nrecordsOutputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'newRecords.json\'</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"Other Options"},title:"Other Options",url:"/configuration/other-options/"}]},{title:"API",url:"api",pages:[{file:{attributes:{title:"Command Line Interface",sort:2,contributors:["ev1stensberg","simon04","tbroadley"],related:[{title:"Analyzing Build Statistics",url:"https://survivejs.com/webpack/optimizing-build/analyzing-build-statistics/"},{title:"Three simple ways to inspect a webpack bundle",url:"https://medium.com/@joeclever/three-simple-ways-to-inspect-a-webpack-bundle-7f6a8fe7195d#.7d2i06mjx"},{title:"Optimising your application bundle size with webpack",url:"https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579#.5w5ko08pq"},{title:"Analyzing & optimizing your webpack bundle",url:"https://medium.com/@ahmedelgabri/analyzing-optimizing-your-webpack-bundle-8590818af4df#.hce4vdjs9"},{title:"Analysing and minimising the size of client side bundle with webpack and source-map-explorer",url:"https://medium.com/@nimgrg/analysing-and-minimising-the-size-of-client-side-bundle-with-webpack-and-source-map-explorer-41096559beca#.c3t2srr8x"}],group:"-",anchors:[{title:"Usage with config file",id:"usage-with-config-file"},{title:"Usage without config file",id:"usage-without-config-file"},{title:"Common Options",id:"common-options"},{title:"Environment Options",id:"environment-options"},{title:"Output Options",id:"output-options"},{title:"Example Usage",id:"example-usage"},{title:"Debug Options",id:"debug-options"},{title:"Module Options",id:"module-options"},{title:"Watch Options",id:"watch-options"},{title:"Optimize Options",id:"optimize-options"},{title:"Resolve Options",id:"resolve-options"},{title:"Stats Options",id:"stats-options"},{title:"Advanced Options",id:"advanced-options"},{title:"Shortcuts",id:"shortcuts"},{title:"Profiling",id:"profiling"}]},body:'<p>For proper usage and easy distribution of this configuration, webpack can be configured with <code>webpack.config.js</code>. Any parameters sent to the CLI will map to a corresponding parameter in the config file.</p>\n<p>Have a look at the <a href="/guides/installation">installation guide</a> if you don&#39;t already have webpack installed.</p>\n<blockquote class="tip"><div class="tip-content"> The new CLI for webpack is under development. New features are being added such as the <code>--init</code> flag. <a href="https://github.com/webpack/webpack-cli">Check it out!</a> </div></blockquote><h2 class="header"><a class="anchor" href="#usage-with-config-file" id="usage-with-config-file"></a><span class="text">Usage with config file</span><a class="icon-link" href="#usage-with-config-file"></a></h2>\n<pre><code class="lang-sh">webpack <span class="token punctuation">[</span>--config webpack.config.js<span class="token punctuation">]</span>\n</code></pre>\n<p>See <a href="/configuration">configuration</a> for the options in the configuration file.</p>\n<h2 class="header"><a class="anchor" href="#usage-without-config-file" id="usage-without-config-file"></a><span class="text">Usage without config file</span><a class="icon-link" href="#usage-without-config-file"></a></h2>\n<pre><code class="lang-sh">webpack <span class="token operator">&lt;</span>entry<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>entry<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>output<span class="token operator">></span>\n</code></pre>\n<p><strong><code>&lt;entry&gt;</code></strong></p>\n<p>A filename or a set of named filenames which act as the entry point to build your project. You can pass multiple entries (every entry is loaded on startup). If you pass a pair in the form <code>&lt;name&gt;=&lt;request&gt;</code> you can create an additional entry point. It will be mapped to the configuration option <code>entry</code>.</p>\n<p><strong><code>&lt;output&gt;</code></strong></p>\n<p>A path and filename for the bundled file to be saved in. It will be mapped to the configuration options <code>output.path</code> and <code>output.filename</code>.</p>\n<p><strong>Example</strong></p>\n<p>If your project structure is as follows -</p>\n<pre><code class="lang-bash"><span class="token keyword">.</span>\n├── dist\n├── index.html\n└── src\n    ├── index.js\n    ├── index2.js\n    └── others.js\n</code></pre>\n<pre><code class="lang-bash">webpack src/index.js dist/bundle.js\n</code></pre>\n<p>This will bundle your source code with entry as <code>index.js</code> and the output bundle file will have a path of <code>dist</code> and the filename will be <code>bundle.js</code></p>\n<pre><code class="lang-bash">    <span class="token operator">|</span> Asset     <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks      <span class="token operator">|</span> Chunk Names <span class="token operator">|</span>\n    <span class="token operator">|</span>-----------<span class="token operator">|</span>---------<span class="token operator">|</span>-------------<span class="token operator">|</span>-------------<span class="token operator">|</span>\n    <span class="token operator">|</span> bundle.js <span class="token operator">|</span> 1.54 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index       <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<pre><code class="lang-bash">webpack index<span class="token operator">=</span>./src/index.js entry2<span class="token operator">=</span>./src/index2.js dist/bundle.js\n</code></pre>\n<p>This will form the bundle with both the files as separate entry points.</p>\n<pre><code class="lang-bash">    <span class="token operator">|</span> Asset     <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks        <span class="token operator">|</span> Chunk Names   <span class="token operator">|</span>\n    <span class="token operator">|</span>-----------<span class="token operator">|</span>---------<span class="token operator">|</span>---------------<span class="token operator">|</span>---------------<span class="token operator">|</span>\n    <span class="token operator">|</span> bundle.js <span class="token operator">|</span> 1.55 kB <span class="token operator">|</span> 0,1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index, entry2 <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index2.js 54 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#common-options" id="common-options"></a><span class="text">Common Options</span><a class="icon-link" href="#common-options"></a></h3>\n<p><strong>List all of the options available on the cli</strong></p>\n<pre><code class="lang-bash">webpack --help\nwebpack -h\n</code></pre>\n<p><strong>Build source using a config file</strong></p>\n<p>Specifies a different <a href="/configuration">configuration</a> file to pick up. Use this if you want to specify something different than <code>webpack.config.js</code>, which is the default.</p>\n<pre><code class="lang-bash">webpack --config example.config.js\n</code></pre>\n<p><strong>Print result of webpack as a JSON</strong></p>\n<pre><code class="lang-bash">webpack --json\nwebpack --json <span class="token operator">></span> stats.json\n</code></pre>\n<p>In every other case, webpack prints out a set of stats showing bundle, chunk and timing details. Using this option the output can be a JSON object. This response is accepted by webpack&#39;s <a href="https://webpack.github.com/analyse">analyse tool</a>, or chrisbateman&#39;s <a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a>, or th0r&#39;s <a href="https://github.com/th0r/webpack-bundle-analyzer">webpack-bundle-analyzer</a>. The analyse tool will take in the JSON and provide all the details of the build in graphical form.</p>\n<h3 class="header"><a class="anchor" href="#environment-options" id="environment-options"></a><span class="text">Environment Options</span><a class="icon-link" href="#environment-options"></a></h3>\n<p>When the webpack configuration <a href="/configuration/configuration-types#exporting-a-function">exports a function</a>, an &quot;environment&quot; may be passed to it.</p>\n<pre><code class="lang-bash">webpack --env.production    <span class="token comment"># sets env.production == true</span>\nwebpack --env.platform<span class="token operator">=</span>web  <span class="token comment"># sets env.platform == "web"</span>\n</code></pre>\n<p>The <code>--env</code> argument accepts various syntaxes:</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Invocation</div><div class="table-th">Resulting environment</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env prod</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>&quot;prod&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: true }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod=1</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: 1 }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod=foo</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: &quot;foo&quot; }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod --env.min</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{ prod: true, min: true }</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod --env min</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>[{ prod: true }, &quot;min&quot;]</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Invocation\n    </div>\n    <div class="table-td-content">\n        <code>webpack --env.prod=foo --env.prod=bar</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Resulting environment\n    </div>\n    <div class="table-td-content">\n        <code>{prod: [ &quot;foo&quot;, &quot;bar&quot; ]}</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><blockquote class="tip"><div class="tip-content"> See the <a href="/guides/environment-variables">environment variables</a> guide for more information on its usage. </div></blockquote><h3 class="header"><a class="anchor" href="#output-options" id="output-options"></a><span class="text">Output Options</span><a class="icon-link" href="#output-options"></a></h3>\n<p>This set of options allows you to manipulate certain <a href="/configuration/output">output</a> parameters of your build.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Input type</div><div class="table-th">Default</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-chunk-filename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The output filename for additional chunks\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        filename with [id] instead of [name] or [id] prefixed\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-filename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The output filename of the bundle\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        [name].js\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-jsonp-function</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The name of the JSONP function used for chunk loading\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        webpackJsonp\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-library</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Expose the exports of the entry point as library\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-library-target</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The type for exposing the exports of the entry point as library\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        var\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The output path for compilation assets\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        Current directory\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-pathinfo</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Include a comment with the request for every dependency\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-public-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The public path for the assets\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        /\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--output-source-map-filename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The output filename for the SourceMap\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        [name].map or [outputFilename].map\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#example-usage" id="example-usage"></a><span class="text">Example Usage</span><a class="icon-link" href="#example-usage"></a></h4>\n<pre><code class="lang-bash">webpack index<span class="token operator">=</span>./src/index.js index2<span class="token operator">=</span>./src/index2.js --output-path<span class="token operator">=</span><span class="token string">\'./dist\'</span> --output-filename<span class="token operator">=</span><span class="token string">\'[name][hash].bundle.js\'</span>\n\n<span class="token operator">|</span> Asset                                <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks      <span class="token operator">|</span> Chunk Names   <span class="token operator">|</span>\n<span class="token operator">|</span>--------------------------------------<span class="token operator">|</span>---------<span class="token operator">|</span>-------------<span class="token operator">|</span>---------------<span class="token operator">|</span>\n<span class="token operator">|</span> index2740fdca26e9348bedbec.bundle.js <span class="token operator">|</span>  2.6 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index2        <span class="token operator">|</span>\n<span class="token operator">|</span> index740fdca26e9348bedbec.bundle.js  <span class="token operator">|</span> 2.59 kB <span class="token operator">|</span> 1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index         <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/index2.js 54 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<pre><code class="lang-bash">webpack.js index<span class="token operator">=</span>./src/index.js index2<span class="token operator">=</span>./src/index2.js --output-path<span class="token operator">=</span><span class="token string">\'./dist\'</span> --output-filename<span class="token operator">=</span><span class="token string">\'[name][hash].bundle.js\'</span> --devtool source-map --output-source-map-filename<span class="token operator">=</span><span class="token string">\'[name]123.map\'</span>\n\n<span class="token operator">|</span> Asset                                <span class="token operator">|</span> Size    <span class="token operator">|</span> Chunks      <span class="token operator">|</span> Chunk Names   <span class="token operator">|</span>\n<span class="token operator">|</span>--------------------------------------<span class="token operator">|</span>---------<span class="token operator">|</span>-------------<span class="token operator">|</span>---------------<span class="token operator">|</span>\n<span class="token operator">|</span> index2740fdca26e9348bedbec.bundle.js <span class="token operator">|</span> 2.76 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index2        <span class="token operator">|</span>\n<span class="token operator">|</span>  index740fdca26e9348bedbec.bundle.js <span class="token operator">|</span> 2.74 kB <span class="token operator">|</span> 1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index         <span class="token operator">|</span>\n<span class="token operator">|</span>                        index2123.map <span class="token operator">|</span> 2.95 kB <span class="token operator">|</span> 0 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index2        <span class="token operator">|</span>\n<span class="token operator">|</span>                         index123.map <span class="token operator">|</span> 2.95 kB <span class="token operator">|</span> 1 <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token operator">|</span> index         <span class="token operator">|</span>\n    <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/others.js 29 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 51 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/index2.js 54 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#debug-options" id="debug-options"></a><span class="text">Debug Options</span><a class="icon-link" href="#debug-options"></a></h3>\n<p>This set of options allows you to better debug the application containing assets compiled with webpack</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Input type</div><div class="table-th">Default value</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--debug</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Switch loaders to debug mode\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default value\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--devtool</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Define <a href="/configuration/devtool/">source map type</a> for the bundled resources\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default value\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--progress</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Print compilation progress in percentage\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default value\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#module-options" id="module-options"></a><span class="text">Module Options</span><a class="icon-link" href="#module-options"></a></h3>\n<p>These options allow you to bind <a href="/configuration/module/">modules</a> as allowed by webpack</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Usage</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Bind an extension to a loader\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind js=babel-loader</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind-post</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Bind an extension to a post loader\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--module-bind-pre</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Bind an extension to a pre loader\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#watch-options" id="watch-options"></a><span class="text">Watch Options</span><a class="icon-link" href="#watch-options"></a></h3>\n<p>These options makes the build <a href="/configuration/watch/">watch</a> for changes in files of the dependency graph and perform the build again.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--watch</code>, <code>-w</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Watch the filesystem for changes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--watch-aggregate-timeout</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Timeout for gathering changes while watching\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--watch-poll</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The polling interval for watching (also enable polling)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--watch-stdin</code>, <code>--stdin</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Exit the process when stdin is closed\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#optimize-options" id="optimize-options"></a><span class="text">Optimize Options</span><a class="icon-link" href="#optimize-options"></a></h3>\n<p>These options allow you to manipulate optimisations for a production build using webpack</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Plugin Used</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-max-chunks</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Try to keep the chunk count below a limit\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Plugin Used\n    </div>\n    <div class="table-td-content">\n        <a href="/plugins/limit-chunk-count-plugin">LimitChunkCountPlugin</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-min-chunk-size</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Try to keep the chunk size above a limit\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Plugin Used\n    </div>\n    <div class="table-td-content">\n        <a href="/plugins/min-chunk-size-plugin">MinChunkSizePlugin</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-minimize</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Minimize javascript and switches loaders to minimizing\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Plugin Used\n    </div>\n    <div class="table-td-content">\n        <a href="/plugins/uglifyjs-webpack-plugin/">UglifyJsPlugin</a> &amp; <a href="/plugins/loader-options-plugin/">LoaderOptionsPlugin</a>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#resolve-options" id="resolve-options"></a><span class="text">Resolve Options</span><a class="icon-link" href="#resolve-options"></a></h3>\n<p>These allow you to configure the webpack <a href="/configuration/resolve/">resolver</a> with aliases and extensions.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Example</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --resolve-alias\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Setup a module alias for resolving\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Example\n    </div>\n    <div class="table-td-content">\n        --resolve-alias jquery-plugin=jquery.plugin\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --resolve-extensions\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Setup extensions that should be used to resolve modules\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Example\n    </div>\n    <div class="table-td-content">\n        --resolve-extensions .es6 .js .ts\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --resolve-loader-alias\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Minimize javascript and switches loaders to minimizing\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Example\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#stats-options" id="stats-options"></a><span class="text">Stats Options</span><a class="icon-link" href="#stats-options"></a></h3>\n<p>These options allow webpack to display various <a href="/configuration/stats/">stats</a> and style them differently in the console output.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Type</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--color</code>, <code>--colors</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Enables/Disables colors on the console [default: (supports-color)]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Select <a href="/configuration/stats">display preset</a> (verbose, detailed, normal, minimal, errors-only, none; since webpack 3.0.0)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-cached</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display also cached modules in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-cached-assets</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display also cached assets in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-chunks</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display chunks in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-depth</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display distance from entry point for each module\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-entrypoints</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display entry points in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-error-details</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display details about errors\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-exclude</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Exclude modules in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-max-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Sets the maximum number of visible modules in output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        number\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display even excluded modules in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-optimization-bailout</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Scope hoisting fallback trigger (since webpack 3.0.0)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-origins</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display origins of chunks in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-provided-exports</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display information about exports provided from modules\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-reasons</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display reasons about module inclusion in the output\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--display-used-exports</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Display information about used exports in modules (Tree Shaking)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--hide-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Hides info about modules\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--sort-assets-by</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Sorts the assets list by property in asset\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--sort-chunks-by</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Sorts the chunks list by property in chunk\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--sort-modules-by</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Sorts the modules list by property in module\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--verbose</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Show more details\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#advanced-options" id="advanced-options"></a><span class="text">Advanced Options</span><a class="icon-link" href="#advanced-options"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Usage</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--bail</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Abort the compilation on first error\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--cache</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Enable in memory caching [Enabled by default for watch]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--cache=false</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--define</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Define any free variable, see <a href="/guides/shimming">shimming</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--define process.env.NODE_ENV=&#39;development&#39;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--hot</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Enables <a href="/concepts/hot-module-replacement">Hot Module Replacement</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--hot=true</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--labeled-modules</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Enables labeled modules [Uses LabeledModulesPlugin]\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--plugin</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Load this <a href="/configuration/plugins/">plugin</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--prefetch</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Prefetch the particular file\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--prefetch=./files.js</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--provide</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Provide these modules as globals, see <a href="/guides/shimming">shimming</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--provide jQuery=jquery</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--records-input-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Path to the records file (reading)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--records-output-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Path to the records file (writing)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--records-path</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Path to the records file\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        <code>--target</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        The <a href="/configuration/target/">targeted</a> execution environment\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Usage\n    </div>\n    <div class="table-td-content">\n        <code>--target=&#39;node&#39;</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#shortcuts" id="shortcuts"></a><span class="text">Shortcuts</span><a class="icon-link" href="#shortcuts"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Shortcut</div><div class="table-th">Replaces</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Shortcut\n    </div>\n    <div class="table-td-content">\n        -d\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Replaces\n    </div>\n    <div class="table-td-content">\n        <code>--debug --devtool cheap-module-eval-source-map --output-pathinfo</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Shortcut\n    </div>\n    <div class="table-td-content">\n        -p\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Replaces\n    </div>\n    <div class="table-td-content">\n        <code>--optimize-minimize --define process.env.NODE_ENV=&quot;production&quot;</code>, see <a href="/guides/production">building for production</a>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#profiling" id="profiling"></a><span class="text">Profiling</span><a class="icon-link" href="#profiling"></a></h3>\n<p>The <code>--profile</code> option captures timing information for each step of the compilation and includes this in the output.</p>\n<pre><code class="lang-bash">webpack --profile\n\n⋮\n<span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 90 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    factory:22ms building:16ms <span class="token operator">=</span> 38ms\n</code></pre>\n<p>For each module, the following details are included in the output as applicable:</p>\n<ul>\n<li><code>factory</code>: time to collect module metadata (e.g. resolving the filename)</li>\n<li><code>building</code>: time to build the module (e.g. loaders and parsing)</li>\n<li><code>dependencies</code>: time to identify and connect the module’s dependencies</li>\n</ul>\n<p>Paired with <code>--progress</code>, <code>--profile</code> gives you an in depth idea of which step in the compilation is taking how long. This can help you optimise your build in a more informed manner.</p>\n<pre><code class="lang-bash">webpack --progress --profile\n\n30ms building modules\n1ms sealing\n1ms optimizing\n0ms basic module optimization\n1ms module optimization\n1ms advanced module optimization\n0ms basic chunk optimization\n0ms chunk optimization\n1ms advanced chunk optimization\n0ms module and chunk tree optimization\n1ms module reviving\n0ms module order optimization\n1ms module <span class="token function">id</span> optimization\n1ms chunk reviving\n0ms chunk order optimization\n1ms chunk <span class="token function">id</span> optimization\n10ms hashing\n0ms module assets processing\n13ms chunk assets processing\n1ms additional chunk assets processing\n0ms recording\n0ms additional asset processing\n26ms chunk asset optimization\n1ms asset optimization\n6ms emitting\n⋮\n</code></pre>\n',title:"Command Line Interface"},title:"Command Line Interface",url:"/api/cli/"},{file:{attributes:{title:"Stats Data",sort:3,contributors:["skipjack"],group:"-",anchors:[{title:"Structure",id:"structure"},{title:"Asset Objects",id:"asset-objects"},{title:"Chunk Objects",id:"chunk-objects"},{title:"Module Objects",id:"module-objects"},{title:"Errors and Warnings",id:"errors-and-warnings"}],related:[]},body:'<p>When compiling source code with webpack, users can generate a JSON file containing statistics about modules. These statistics can be used to analyze an application&#39;s dependency graph as well as to optimize compilation speed. The file is typically generated with the following CLI command:</p>\n<pre><code class="lang-bash">webpack --profile --json <span class="token operator">></span> compilation-stats.json\n</code></pre>\n<p>The <code>--json &gt; compilation-stats.json</code> flag indicates to webpack that it should emit the <code>compilation-stats.json</code> containing the dependency graph and various other build information. Typically, the <code>--profile</code> flag is also added so that a <code>profile</code> section is added to each <a href="#module-objects"><code>modules</code> object</a> containing module-specific compilation stats.</p>\n<h2 class="header"><a class="anchor" href="#structure" id="structure"></a><span class="text">Structure</span><a class="icon-link" href="#structure"></a></h2>\n<p>The top-level structure of the output JSON file is fairly straightforward but there are a few nested data structures as well. Each nested structure has a dedicated section below to make this document more consumable. Note that you can click links within the top-level structure below to jump to relevant sections and documentation:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.4.13"</span><span class="token punctuation">,</span> <span class="token comment">// Version of webpack used for the compilation</span>\n  <span class="token string">"hash"</span><span class="token punctuation">:</span> <span class="token string">"11593e3b3ac85436984a"</span><span class="token punctuation">,</span> <span class="token comment">// Compilation specific hash</span>\n  <span class="token string">"time"</span><span class="token punctuation">:</span> <span class="token number">2469</span><span class="token punctuation">,</span> <span class="token comment">// Compilation time in milliseconds</span>\n  <span class="token string">"filteredModules"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// A count of excluded modules when <a class="code-link" href="/configuration/stats/#stats">`exclude`</a> is passed to the <a class="code-link" href="/api/node/#stats-tojson-options-">`toJson`</a> method</span>\n  <span class="token string">"assetsByChunkName"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Chunk name to emitted asset(s) mapping</span>\n    <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"web.js?h=11593e3b3ac85436984a"</span><span class="token punctuation">,</span>\n    <span class="token string">"named-chunk"</span><span class="token punctuation">:</span> <span class="token string">"named-chunk.web.js"</span><span class="token punctuation">,</span>\n    <span class="token string">"other-chunk"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"other-chunk.js"</span><span class="token punctuation">,</span>\n      <span class="token string">"other-chunk.css"</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"assets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#asset-objects">asset objects</a></span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"chunks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#chunk-objects">chunk objects</a></span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#module-objects">module objects</a></span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"errors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#errors-and-warnings">error strings</a></span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"warnings"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#errors-and-warnings">warning strings</a></span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#asset-objects" id="asset-objects"></a><span class="text">Asset Objects</span><a class="icon-link" href="#asset-objects"></a></h3>\n<p>Each <code>assets</code> object represents an <code>output</code> file emitted from the compilation. They all follow a similar structure:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"chunkNames"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// The chunks this asset contains</span>\n  <span class="token string">"chunks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// The chunk IDs this asset contains</span>\n  <span class="token string">"emitted"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Indicates whether or not the asset made it to the `output` directory</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"10.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// The `output` filename</span>\n  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">1058</span> <span class="token comment">// The size of the file in bytes</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#chunk-objects" id="chunk-objects"></a><span class="text">Chunk Objects</span><a class="icon-link" href="#chunk-objects"></a></h3>\n<p>Each <code>chunks</code> object represents a group of modules known as a <a href="/glossary#c">chunk</a>. Each object follows the following structure:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"entry"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Indicates whether or not the chunk contains the webpack runtime</span>\n  <span class="token string">"files"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// An array of filename strings that contain this chunk</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"filteredModules"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// See the description in the <a class="code-link" href="#structure">top-level structure</a> above</span>\n  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// The ID of this chunk</span>\n  <span class="token string">"initial"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Indicates whether this chunk is loaded on initial page load or <a class="code-link" href="/guides/lazy-loading">on demand</a></span>\n  <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#module-objects">module objects</a></span>\n    <span class="token string">"web.js?h=11593e3b3ac85436984a"</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"names"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// An list of chunk names contained within this chunk</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"origins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// See the description below...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"parents"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Parent chunk IDs</span>\n  <span class="token string">"rendered"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Indicates whether or not the chunk went through Code Generation</span>\n  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">188057</span> <span class="token comment">// Chunk size in bytes</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The <code>chunks</code> object will also contain a list of <code>origins</code> describing how the given chunk originated. Each <code>origins</code> object follows the following schema:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"loc"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// Lines of code that generated this chunk</span>\n  <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// Path to the module</span>\n  <span class="token string">"moduleId"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// The ID of the module</span>\n  <span class="token string">"moduleIdentifier"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// Path to the module</span>\n  <span class="token string">"moduleName"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// Relative path to the module</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token comment">// The name of the chunk</span>\n  <span class="token string">"reasons"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of the same `reasons` found in <a class="code-link" href="#module-objects">module objects</a></span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#module-objects" id="module-objects"></a><span class="text">Module Objects</span><a class="icon-link" href="#module-objects"></a></h3>\n<p>What good would these statistics be without some description of the compiled application&#39;s actual modules? Each module in the dependency graph is represented by the following structure:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"assets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// A list of <a class="code-link" href="#asset-objects">asset objects</a></span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"built"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Indicates that the module went through <a class="code-link" href="/concepts/loaders">Loaders</a>, Parsing, and Code Generation</span>\n  <span class="token string">"cacheable"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Whether or not this module is cacheable</span>\n  <span class="token string">"chunks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// IDs of chunks that contain this module</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"errors"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// Number of errors when resolving or processing the module</span>\n  <span class="token string">"failed"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Whether or not compilation failed on this module</span>\n  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// The ID of the module (analagous to <a class="code-link" href="/api/module-variables#module-id-commonjs-">`module.id`</a>)</span>\n  <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// A unique ID used internally</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// Path to the actual file</span>\n  <span class="token string">"optional"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// All requests to this module are with `try... catch` blocks (irrelevant with ESM)</span>\n  <span class="token string">"prefetched"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Indicates whether or not the module was <a class="code-link" href="/plugins/prefetch-plugin">prefetched</a></span>\n  <span class="token string">"profile"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Module specific compilation stats corresponding to the <a class="code-link" href="/api/cli#profiling">`--profile` flag</a> (in milliseconds)</span>\n    <span class="token string">"building"</span><span class="token punctuation">:</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token comment">// Loading and parsing</span>\n    <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token comment">// Building dependencies</span>\n    <span class="token string">"factory"</span><span class="token punctuation">:</span> <span class="token number">11</span> <span class="token comment">// Resolving dependencies</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"reasons"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// See the description below...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">3593</span><span class="token punctuation">,</span> <span class="token comment">// Estimated size of the module in bytes</span>\n  <span class="token string">"source"</span><span class="token punctuation">:</span> "<span class="token comment">// Should not break it...\\r\\nif(typeof...", // The stringified raw source</span>\n  <span class="token string">"warnings"</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">// Number of warnings when resolving or processing the module</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Every module also contains a list of <code>reasons</code> objects describing why that module was included in the dependency graph. Each &quot;reason&quot; is similar to the <code>origins</code> seen above in the <a href="#chunk-objects">chunk objects</a> section:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token string">"loc"</span><span class="token punctuation">:</span> <span class="token string">"33:24-93"</span><span class="token punctuation">,</span> <span class="token comment">// Lines of code that caused the module to be included</span>\n  <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// Relative path to the module based on <a class="code-link" href="/configuration/entry-context/#context">context</a></span>\n  <span class="token string">"moduleId"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// The ID of the module</span>\n  <span class="token string">"moduleIdentifier"</span><span class="token punctuation">:</span> <span class="token string">"(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// Path to the module</span>\n  <span class="token string">"moduleName"</span><span class="token punctuation">:</span> <span class="token string">"./lib/index.web.js"</span><span class="token punctuation">,</span> <span class="token comment">// A more readable name for the module (used for "pretty-printing")</span>\n  <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"require.context"</span><span class="token punctuation">,</span> <span class="token comment">// The <a class="code-link" href="/api/module-methods">type of request</a> used</span>\n  <span class="token string">"userRequest"</span><span class="token punctuation">:</span> <span class="token string">"../../cases"</span> <span class="token comment">// Raw string used for the `import` or `require` request</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#errors-and-warnings" id="errors-and-warnings"></a><span class="text">Errors and Warnings</span><a class="icon-link" href="#errors-and-warnings"></a></h3>\n<p>The <code>errors</code> and <code>warnings</code> properties each contain a list of strings. Each string contains a message and stack trace:</p>\n<pre><code class="lang-bash"><span class="token punctuation">..</span>/cases/parsing/browserify/index.js\nCritical dependencies:\n2:114-121 This seem to be a pre-built javascript file. Even <span class="token keyword">while</span> this is possible, it\'s not recommended. Try to require to orginal <span class="token function">source</span> to get better results.\n @ <span class="token punctuation">..</span>/cases/parsing/browserify/index.js 2:114-121\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Note that the stack traces are removed when <code>errorDetails: false</code> is passed to the <code>toJson</code> method. The <code>errorDetails</code> option is set to <code>true</code> by default. </div></blockquote>',title:"Stats Data"},title:"Stats Data",url:"/api/stats/"},{file:{attributes:{title:"Hot Module Replacement",contributors:["skipjack","sokra","tbroadley"],related:[{title:"Concepts - Hot Module Replacement",url:"/concepts/hot-module-replacement"},{title:"Guides - Hot Module Replacement",url:"/guides/hot-module-replacement"}],group:"-",anchors:[{title:"accept",id:"accept"},{title:"decline",id:"decline"},{title:"dispose (or addDisposeHandler)",id:"dispose-or-adddisposehandler-"},{title:"removeDisposeHandler",id:"removedisposehandler"},{title:"status",id:"status"},{title:"check",id:"check"},{title:"apply",id:"apply"},{title:"addStatusHandler",id:"addstatushandler"},{title:"removeStatusHandler",id:"removestatushandler"}]},body:'<p>If <a href="/concepts/hot-module-replacement">Hot Module Replacement</a> has been enabled via the <a href="/plugins/hot-module-replacement-plugin"><code>HotModuleReplacementPlugin</code></a>, its interface will be exposed under the <a href="/api/module-variables#module-hot-webpack-specific-"><code>module.hot</code> property</a>. Typically, users will check to see if the interface is accessible, then begin working with it. As an example, here&#39;s how you might <code>accept</code> an updated module:</p>\n<pre><code class="lang-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">\'./library.js\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with the updated library module...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The following methods are supported...</p>\n<h3 class="header"><a class="anchor" href="#accept" id="accept"></a><span class="text"><code>accept</code></span><a class="icon-link" href="#accept"></a></h3>\n<p>Accept updates for the given <code>dependencies</code> and fire a <code>callback</code> to react to those updates.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n  dependencies<span class="token punctuation">,</span> <span class="token comment">// Either a string or an array of strings</span>\n  callback <span class="token comment">// Function to fire when the dependencies are updated</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#decline" id="decline"></a><span class="text"><code>decline</code></span><a class="icon-link" href="#decline"></a></h3>\n<p>Reject updates for the given <code>dependencies</code> forcing the update to fail with a <code>&#39;decline&#39;</code> code.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">decline</span><span class="token punctuation">(</span>\n  dependencies <span class="token comment">// Either a string or an array of strings</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#dispose-or-adddisposehandler-" id="dispose-or-adddisposehandler-"></a><span class="text"><code>dispose</code> (or <code>addDisposeHandler</code>)</span><a class="icon-link" href="#dispose-or-adddisposehandler-"></a></h3>\n<p>Add a handler which is executed when the current module code is replaced. This should be used to remove any persistent resource you have claimed or created. If you want to transfer state to the updated module, add it to given <code>data</code> parameter. This object will be available at <code>module.hot.data</code> after the update.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Clean up and pass data to the updated module...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#removedisposehandler" id="removedisposehandler"></a><span class="text"><code>removeDisposeHandler</code></span><a class="icon-link" href="#removedisposehandler"></a></h3>\n<p>Remove the callback added via <code>dispose</code> or <code>addDisposeHandler</code>.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeDisposeHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#status" id="status"></a><span class="text"><code>status</code></span><a class="icon-link" href="#status"></a></h3>\n<p>Retrieve the current status of the hot module replacement process.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Will return one of the following strings...</span>\n</code></pre>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Status</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        idle\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The process is waiting for a call to <code>check</code> (see below)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        check\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The process is checking for updates\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        prepare\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The process is getting ready for the update (e.g. downloading the updated module)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        ready\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The update is prepared and available\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        dispose\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The process is calling the <code>dispose</code> handlers on the modules that will be replaced\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        apply\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The process is calling the <code>accept</code> handlers and re-executing self-accepted modules\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        abort\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        An update was aborted, but the system is still in it&#39;s previous state\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Status\n    </div>\n    <div class="table-td-content">\n        fail\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        An update has thrown an exception and the system&#39;s state has been compromised\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#check" id="check"></a><span class="text"><code>check</code></span><a class="icon-link" href="#check"></a></h3>\n<p>Test all loaded modules for updates and, if updates exist, <code>apply</code> them.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>autoApply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>outdatedModules <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// outdated modules...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// catch errors</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The <code>autoApply</code> parameter can either be a boolean or <code>options</code> to pass to the <code>apply</code> method when called.</p>\n<h3 class="header"><a class="anchor" href="#apply" id="apply"></a><span class="text"><code>apply</code></span><a class="icon-link" href="#apply"></a></h3>\n<p>Continue the update process (as long as <code>module.hot.status() === &#39;ready&#39;</code>).</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>outdatedModules <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// outdated modules...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// catch errors</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The optional <code>options</code> object can include the following properties:</p>\n<ul>\n<li><code>ignoreUnaccepted</code> (boolean): Ignore changes made to unaccepted modules.</li>\n<li><code>ignoreDeclined</code> (boolean): Ignore changes made to declined modules.</li>\n<li><code>ignoreErrored</code> (boolean): Ignore errors throw in accept handlers, error handlers and while reevaluating module.</li>\n<li><code>onDeclined</code> (function(info)): Notifier for declined modules</li>\n<li><code>onUnaccepted</code> (function(info)): Notifier for unaccepted modules</li>\n<li><code>onAccepted</code> (function(info)): Notifier for accepted modules</li>\n<li><code>onDisposed</code> (function(info)): Notifier for disposed modules</li>\n<li><code>onErrored</code> (function(info)): Notifier for errors</li>\n</ul>\n<p>The <code>info</code> parameter will be an object containing some of the following values:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">"self-declined"</span> <span class="token operator">|</span> <span class="token string">"declined"</span> <span class="token operator">|</span> \n        <span class="token string">"unaccepted"</span> <span class="token operator">|</span> <span class="token string">"accepted"</span> <span class="token operator">|</span> \n        <span class="token string">"disposed"</span> <span class="token operator">|</span> <span class="token string">"accept-errored"</span> <span class="token operator">|</span> \n        <span class="token string">"self-accept-errored"</span> <span class="token operator">|</span> <span class="token string">"self-accept-error-handler-errored"</span><span class="token punctuation">,</span>\n  moduleId<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// The module in question.</span>\n  dependencyId<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// For errors: the module id owning the accept handler.</span>\n  chain<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// For declined/accepted/unaccepted: the chain from where the update was propagated.</span>\n  parentId<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// For declined: the module id of the declining parent</span>\n  outdatedModules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// For accepted: the modules that are outdated and will be disposed</span>\n  outdatedDependencies<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">// For accepted: The location of accept handlers that will handle the update</span>\n    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  error<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// For errors: the thrown error</span>\n  originalError<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// For self-accept-error-handler-errored: </span>\n                                <span class="token comment">// the error thrown by the module before the error handler tried to handle it.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#addstatushandler" id="addstatushandler"></a><span class="text"><code>addStatusHandler</code></span><a class="icon-link" href="#addstatushandler"></a></h3>\n<p>Register a function to listen for changes in <code>status</code>.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">addStatusHandler</span><span class="token punctuation">(</span>status <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// React to the current status...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#removestatushandler" id="removestatushandler"></a><span class="text"><code>removeStatusHandler</code></span><a class="icon-link" href="#removestatushandler"></a></h3>\n<p>Remove a registered status handler.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeStatusHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre>\n',title:"Hot Module Replacement"},title:"Hot Module Replacement",url:"/api/hot-module-replacement/"},{file:{attributes:{title:"Node.js API",sort:3,contributors:["rynclark","sallar"],group:"-",anchors:[{title:"Installation",id:"installation"},{title:"webpack()",id:"webpack-"},{title:"Compiler Instance",id:"compiler-instance"},{title:"Run",id:"run"},{title:"Watching",id:"watching"},{title:"Close Watching",id:"close-watching"},{title:"Invalidate Watching",id:"invalidate-watching"},{title:"Stats Object",id:"stats-object"},{title:"stats.hasErrors()",id:"stats-haserrors-"},{title:"stats.hasWarnings()",id:"stats-haswarnings-"},{title:"stats.toJson(options)",id:"stats-tojson-options-"},{title:"stats.toString(options)",id:"stats-tostring-options-"},{title:"Error Handling",id:"error-handling"},{title:"Custom File Systems",id:"custom-file-systems"}],related:[]},body:'<p>webpack provides a Node.js API which can be used directly in Node.js runtime.</p>\n<p>The Node.js API is useful in scenarios in which you need to customize the build or development process since all the reporting and error handling must be done manually and webpack only does the compiling part. For this reason the <a href="/configuration/stats"><code>stats</code></a> configuration options will not have any effect in the <code>webpack()</code> call.</p>\n<h2 class="header"><a class="anchor" href="#installation" id="installation"></a><span class="text">Installation</span><a class="icon-link" href="#installation"></a></h2>\n<p>To start using webpack Node.js API, first install webpack if you haven’t yet:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack\n</code></pre>\n<p>Then require the webpack module in your Node.js script:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Or if you prefer ES2015:</span>\n<span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">"webpack"</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#webpack-" id="webpack-"></a><span class="text"><code>webpack()</code></span><a class="icon-link" href="#webpack-"></a></h2>\n<p>The imported <code>webpack</code> function is fed a webpack <a href="/configuration/">Configuration Object</a> and runs the webpack compiler if a callback function is provided:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">Configuration Object</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">||</span> stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// <a class="code-link" href="#error-handling">Handle errors here</a></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Done processing</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> The <code>err</code> object <strong>will not</strong> include compilation errors and those must be handled separately using <code>stats.hasErrors()</code> which will be covered in detail in <a href="#error-handling">Error Handling</a> section of this guide. The <code>err</code> object will only contain webpack-related issues, such as misconfiguration, etc. </div></blockquote><p><strong>Note</strong> that you can provide the <code>webpack</code> function with an array of configurations:</p>\n<pre><code class="lang-js"><span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token comment">/* Configuration Object */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token comment">/* Configuration Object */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token comment">/* Configuration Object */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> webpack will <strong>not</strong> run the multiple configurations in parallel. Each configuration is only processed after the previous one has finished processing. To have webpack process them in parallel, you can use a third-party solution like <a href="https://www.npmjs.com/package/parallel-webpack">parallel-webpack</a>. </div></blockquote><h2 class="header"><a class="anchor" href="#compiler-instance" id="compiler-instance"></a><span class="text">Compiler Instance</span><a class="icon-link" href="#compiler-instance"></a></h2>\n<p>If you don’t pass the <code>webpack</code> runner function a callback, it will return a webpack <code>Compiler</code> instance. This instance can be used to manually trigger the webpack runner or have it build and watch for changes. Much like the <a href="/api/cli/">CLI</a> Api. The <code>Compiler</code> instance provides the following methods:</p>\n<ul>\n<li><code>.run(callback)</code></li>\n<li><code>.watch(watchOptions, handler)</code></li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> The API only supports a single concurrent compilation at a time. When using <code>run</code>, wait for it to finish before calling <code>run</code> or <code>watch</code> again. When using <code>watch</code>, call <code>close</code> and wait for it to finish before calling <code>run</code> or <code>watch</code> again. Concurrent compilations will corrupt the output files. </div></blockquote><h2 class="header"><a class="anchor" href="#run" id="run"></a><span class="text">Run</span><a class="icon-link" href="#run"></a></h2>\n<p>Calling the <code>run</code> method on the <code>Compiler</code> instance is much like the quick run method mentioned above:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">Configuration Object</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#watching" id="watching"></a><span class="text">Watching</span><a class="icon-link" href="#watching"></a></h2>\n<p>Calling the <code>watch</code> method, triggers the webpack runner, but then watches for changes (much like CLI: <code>webpack --watch</code>), as soon as webpack detects a change, runs again. Returns an instance of <code>Watching</code>.</p>\n<pre><code class="lang-js"><span class="token function">watch</span><span class="token punctuation">(</span>watchOptions<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">Configuration Object</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> watching <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<details><summary><span class=\'code-details-summary-span\'>  <span class="token comment">/* <a class="code-link" href="/configuration/watch/#watchoptions">watchOptions</a> */</span></span></summary>  aggregateTimeout<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  poll<span class="token punctuation">:</span> undefined\n</details><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> <a class="code-link" href="#stats-object">stats</a><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Print watch/build result here...</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>Watching</code> options are <a href="/configuration/watch/#watchoptions">covered in detail here</a>.</p>\n<blockquote class="warning"><div class="tip-content"> Filesystem inaccuracies may trigger multiple builds for a single change. So, in the example above, the <code>console.log</code> statement may fire multiple times for a single modification. Users should expect this behavior and may check <code>stats.hash</code> to see if the file hash has actually changed. </div></blockquote><h3 class="header"><a class="anchor" href="#close-watching" id="close-watching"></a><span class="text">Close <code>Watching</code></span><a class="icon-link" href="#close-watching"></a></h3>\n<p>The <code>watch</code> method returns a <code>Watching</code> instance that exposes <code>.close(callback)</code> method. Calling this method will end watching:</p>\n<pre><code class="lang-js">watching<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Watching Ended."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> It’s not allowed to watch or run again before the existing watcher has been closed or invalidated. </div></blockquote><h3 class="header"><a class="anchor" href="#invalidate-watching" id="invalidate-watching"></a><span class="text">Invalidate <code>Watching</code></span><a class="icon-link" href="#invalidate-watching"></a></h3>\n<p>Using <code>watching.invalidate</code>, you can manually invalidate the current compiling round, without stopping the watch process:</p>\n<pre><code class="lang-js">watching<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#stats-object" id="stats-object"></a><span class="text">Stats Object</span><a class="icon-link" href="#stats-object"></a></h2>\n<p>The <code>stats</code> object that is passed as a second argument of the <a href="#webpack-"><code>webpack()</code></a> callback, is a good source of information about the code compilation process. It includes:</p>\n<ul>\n<li>Errors and Warnings (if any)</li>\n<li>Timings</li>\n<li>Module and Chunk information</li>\n</ul>\n<p>The <a href="/api/cli">webpack CLI</a> uses this information to display a nicely formatted output in your console.</p>\n<blockquote class="tip"><div class="tip-content"> When using the <a href="/api/plugins/compiler#multicompiler"><code>MultiCompiler</code></a>, a <code>MultiStats</code> instance is returned that fulfills the same interface as <code>stats</code>, i.e. the methods described below. </div></blockquote><p>This <code>stats</code> object exposes the following methods:</p>\n<h3 class="header"><a class="anchor" href="#stats-haserrors-" id="stats-haserrors-"></a><span class="text"><code>stats.hasErrors()</code></span><a class="icon-link" href="#stats-haserrors-"></a></h3>\n<p>Can be used to check if there were errors while compiling. Returns <code>true</code> or <code>false</code>.</p>\n<h3 class="header"><a class="anchor" href="#stats-haswarnings-" id="stats-haswarnings-"></a><span class="text"><code>stats.hasWarnings()</code></span><a class="icon-link" href="#stats-haswarnings-"></a></h3>\n<p>Can be used to check if there were warnings while compiling. Returns <code>true</code> or <code>false</code>.</p>\n<h3 class="header"><a class="anchor" href="#stats-tojson-options-" id="stats-tojson-options-"></a><span class="text"><code>stats.toJson(options)</code></span><a class="icon-link" href="#stats-tojson-options-"></a></h3>\n<p>Returns compilation information as a JSON object. <code>options</code> can be either a string (a preset) or an object for more granular control:</p>\n<pre><code class="lang-js">stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token string">"minimal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// <a class="code-link" href="/configuration/stats">more options: "verbose", etc</a>.</span>\n</code></pre>\n<pre><code class="lang-js">stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  assets<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  hash<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>All available options and presets are described in <a href="/configuration/stats">Stats documentation</a></p>\n<blockquote>\n<p>Here’s <a href="https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json">an example of this function’s output</a></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#stats-tostring-options-" id="stats-tostring-options-"></a><span class="text"><code>stats.toString(options)</code></span><a class="icon-link" href="#stats-tostring-options-"></a></h3>\n<p>Returns a formatted string of the compilation information (similar to <a href="/api/cli">CLI</a> output).</p>\n<p>Options are the same as <a href="/api/node#stats-tojson-options-"><code>stats.toJson(options)</code></a> with one addition:</p>\n<pre><code class="lang-js">stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// Add console colors</span>\n  colors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Here’s an example of <code>stats.toString()</code> usage:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">Configuration Object</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    chunks<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// Makes the build much quieter</span>\n    colors<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment">// Shows colors in the console</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#error-handling" id="error-handling"></a><span class="text">Error Handling</span><a class="icon-link" href="#error-handling"></a></h2>\n<p>For a good error handling, you need to account for these three types of errors:</p>\n<ul>\n<li>Fatal webpack errors (wrong configuration, etc)</li>\n<li>Compilation errors (missing modules, syntax errors, etc)</li>\n<li>Compilation warnings</li>\n</ul>\n<p>Here’s an example that does all that:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// <a class="code-link" href="/configuration/">Configuration Object</a></span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack <span class="token operator">||</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>details<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> info <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasWarnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Log result...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#custom-file-systems" id="custom-file-systems"></a><span class="text">Custom File Systems</span><a class="icon-link" href="#custom-file-systems"></a></h2>\n<p>By default, webpack reads files and writes files to disk using a normal file system. However, it is possible to change the input or output behavior using a different kind of file system (memory, webDAV, etc). To accomplish this, one can change the <code>inputFileSystem</code> or <code>outputFileSystem</code>. For example, you can replace the default <code>outputFileSystem</code> with <a href="https://github.com/webpack/memory-fs"><code>memory-fs</code></a> to write files to memory instead of to disk:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> MemoryFS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"memory-fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* options*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> fs<span class="token punctuation">;</span>\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Read the output later:</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Note that this is what <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a>, used by <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> and many other packages, uses to mysteriously hide your files but continue serving them up to the browser!</p>\n<blockquote class="tip"><div class="tip-content"> The output file system you provide needs to be compatible with Node’s own <a href="https://nodejs.org/api/fs.html"><code>fs</code></a> interface, which requires the <code>mkdirp</code> and <code>join</code> helper methods. </div></blockquote>',title:"Node.js API"},title:"Node.js API",url:"/api/node/"},{file:{attributes:{title:"Loader API",sort:4,contributors:["TheLarkInn","jhnns","tbroadley"],group:"-",anchors:[{title:"Examples",id:"examples"},{title:"Synchronous Loaders",id:"synchronous-loaders"},{title:"Asynchronous Loaders",id:"asynchronous-loaders"},{title:'"Raw" Loader',id:"-raw-loader"},{title:"Pitching Loader",id:"pitching-loader"},{title:"The Loader Context",id:"the-loader-context"},{title:"this.version",id:"this-version"},{title:"this.context",id:"this-context"},{title:"this.request",id:"this-request"},{title:"this.query",id:"this-query"},{title:"this.callback",id:"this-callback"},{title:"this.async",id:"this-async"},{title:"this.data",id:"this-data"},{title:"this.cacheable",id:"this-cacheable"},{title:"this.loaders",id:"this-loaders"},{title:"this.loaderIndex",id:"this-loaderindex"},{title:"this.resource",id:"this-resource"},{title:"this.resourcePath",id:"this-resourcepath"},{title:"this.resourceQuery",id:"this-resourcequery"},{title:"this.target",id:"this-target"},{title:"this.webpack",id:"this-webpack"},{title:"this.sourceMap",id:"this-sourcemap"},{title:"this.emitWarning",id:"this-emitwarning"},{title:"this.emitError",id:"this-emiterror"},{title:"this.loadModule",id:"this-loadmodule"},{title:"this.resolve",id:"this-resolve"},{title:"this.addDependency",id:"this-adddependency"},{title:"this.addContextDependency",id:"this-addcontextdependency"},{title:"this.clearDependencies",id:"this-cleardependencies"},{title:"this.emitFile",id:"this-emitfile"},{title:"this.fs",id:"this-fs"},{title:"Deprecated context properties",id:"deprecated-context-properties"},{title:"this.exec",id:"this-exec"},{title:"this.resolveSync",id:"this-resolvesync"},{title:"this.value",id:"this-value"},{title:"this.inputValue",id:"this-inputvalue"},{title:"this.options",id:"this-options"},{title:"this.debug",id:"this-debug"},{title:"this.minimize",id:"this-minimize"},{title:"this._compilation",id:"this-_compilation"},{title:"this._compiler",id:"this-_compiler"},{title:"this._module",id:"this-_module"}],related:[]},body:'<p>A loader is just a JavaScript module that exports a function. The <a href="https://github.com/webpack/loader-runner">loader runner</a> calls this function and passes the result of the previous loader or the resource file into it. The <code>this</code> context of the function is filled-in by webpack and the <a href="https://github.com/webpack/loader-runner">loader runner</a> with some useful methods that allow the loader (among other things) to change its invocation style to async, or get query parameters.</p>\n<p>The first loader is passed one argument: the content of the resource file. The compiler expects a result from the last loader. The result should be a <code>String</code> or a <code>Buffer</code> (which is converted to a string), representing the JavaScript source code of the module. An optional SourceMap result (as JSON object) may also be passed.</p>\n<p>A single result can be returned in <strong>sync mode</strong>. For multiple results the <code>this.callback()</code> must be called. In <strong>async mode</strong> <code>this.async()</code> must be called to indicate that the <a href="https://github.com/webpack/loader-runner">loader runner</a> should wait for an asynchronous result. It returns <code>this.callback()</code>. Then the loader must return <code>undefined</code> and call that callback.</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>The following sections provide some basic examples of the different types of loaders. Note that the <code>map</code> and <code>meta</code> parameters are optional, see <a href="/api/loaders#this-callback"><code>this.callback</code></a> below.</p>\n<h3 class="header"><a class="anchor" href="#synchronous-loaders" id="synchronous-loaders"></a><span class="text">Synchronous Loaders</span><a class="icon-link" href="#synchronous-loaders"></a></h3>\n<p>Either <code>return</code> or <code>this.callback</code> can be used to return the transformed <code>content</code> synchronously:</p>\n<p><strong>sync-loader.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The <code>this.callback</code> method is more flexible as it allows multiple arguments to be passed as opposed to just the <code>content</code>.</p>\n<p><strong>sync-loader-with-multiple-results.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> sourceMaps<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// always return undefined when calling callback()</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#asynchronous-loaders" id="asynchronous-loaders"></a><span class="text">Asynchronous Loaders</span><a class="icon-link" href="#asynchronous-loaders"></a></h3>\n<p>For asynchronous loaders, <a href="/api/loaders#this-async"><code>this.async</code></a> is used to retrieve the <code>callback</code> function:</p>\n<p><strong>async-loader.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>async-loader-with-multiple-results.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">,</span> sourceMaps<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> sourceMaps<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Loaders were originally designed to work in synchronous loader pipelines, like Node.js (using <a href="https://github.com/webpack/enhanced-require">enhanced-require</a>), <em>and</em> asynchronous pipelines, like in webpack. However, since expensive synchronous computations are a bad idea in a single-threaded environment like Node.js, we advise to make your loader asynchronously if possible. Synchronous loaders are ok if the amount of computation is trivial. </div></blockquote><h3 class="header"><a class="anchor" href="#-raw-loader" id="-raw-loader"></a><span class="text">&quot;Raw&quot; Loader</span><a class="icon-link" href="#-raw-loader"></a></h3>\n<p>By default, the resource file is converted to a UTF-8 string and passed to the loader. By setting the <code>raw</code> flag, the loader will receive the raw <code>Buffer</code>. Every loader is allowed to deliver its result as <code>String</code> or as <code>Buffer</code>. The compiler converts them between loaders.</p>\n<p><strong>raw-loader.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>content <span class="token keyword">instanceof</span> <span class="token class-name">Buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// return value can be a `Buffer` too</span>\n    <span class="token comment">// This is also allowed if loader is not "raw"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#pitching-loader" id="pitching-loader"></a><span class="text">Pitching Loader</span><a class="icon-link" href="#pitching-loader"></a></h3>\n<p>Loaders are <strong>always</strong> called from right to left. There are some instances where the loader only cares about the <strong>metadata</strong> behind a request and can ignore the results of the previous loader. The <code>pitch</code> method on loaders is called from <strong>left to right</strong> before the loaders are actually executed (from right to left). For the following <a href="/configuration/module#rule-use"><code>use</code></a> configuration:</p>\n<pre><code class="lang-js">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'a-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'b-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'c-loader\'</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>These steps would occur:</p>\n<pre><code class="lang-diff">|- a-loader `pitch`\n  |- b-loader `pitch`\n    |- c-loader `pitch`\n      |- requested module is picked up as a dependency\n    |- c-loader normal execution\n  |- b-loader normal execution\n|- a-loader normal execution\n</code></pre>\n<p>So why might a loader take advantage of the &quot;pitching&quot; phase?</p>\n<p>First, the <code>data</code> passed to the <code>pitch</code> method is exposed in the execution phase as well under <code>this.data</code> and could be useful for capturing and sharing information from earlier in the cycle.</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Second, if a loader delivers a result in the <code>pitch</code> method the process turns around and skips the remaining loaders. In our example above, if the <code>b-loader</code>s <code>pitch</code> method returned something:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">someSyncOperation</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>remainingRequest<span class="token punctuation">,</span> precedingRequest<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">someCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"module.exports = require("</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"-!"</span> <span class="token operator">+</span> remainingRequest<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">");"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The steps above would be shortened to:</p>\n<pre><code class="lang-diff">|- a-loader `pitch`\n  |- b-loader `pitch` returns a module\n|- a-loader normal execution\n</code></pre>\n<p>See the <a href="https://github.com/webpack-contrib/bundle-loader">bundle-loader</a> for a good example of how this process can be used in a more meaningful way.</p>\n<h2 class="header"><a class="anchor" href="#the-loader-context" id="the-loader-context"></a><span class="text">The Loader Context</span><a class="icon-link" href="#the-loader-context"></a></h2>\n<p>The loader context represents the properties that are available inside of a loader assigned to the <code>this</code> property.</p>\n<p>Given the following example this require call is used:\nIn <code>/abc/file.js</code>:</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./loader1?xyz!loader2!./resource?rrr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#this-version" id="this-version"></a><span class="text"><code>this.version</code></span><a class="icon-link" href="#this-version"></a></h3>\n<p><strong>Loader API version.</strong> Currently <code>2</code>. This is useful for providing backwards compatibility. Using the version you can specify custom logic or fallbacks for breaking changes.</p>\n<h3 class="header"><a class="anchor" href="#this-context" id="this-context"></a><span class="text"><code>this.context</code></span><a class="icon-link" href="#this-context"></a></h3>\n<p><strong>The directory of the module.</strong> Can be used as context for resolving other stuff.</p>\n<p>In the example: <code>/abc</code> because <code>resource.js</code> is in this directory</p>\n<h3 class="header"><a class="anchor" href="#this-request" id="this-request"></a><span class="text"><code>this.request</code></span><a class="icon-link" href="#this-request"></a></h3>\n<p>The resolved request string.</p>\n<p>In the example: <code>&quot;/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-query" id="this-query"></a><span class="text"><code>this.query</code></span><a class="icon-link" href="#this-query"></a></h3>\n<ol>\n<li>If the loader was configured with an <a href="/configuration/module/#useentry"><code>options</code></a> object, this will point to that object.</li>\n<li>If the loader has no <code>options</code>, but was invoked with a query string, this will be a string starting with <code>?</code>.</li>\n</ol>\n<blockquote class="warning"><div class="tip-content"> This property is deprecated as <code>options</code> is replacing <code>query</code>. Use the <a href="https://github.com/webpack/loader-utils#getoptions"><code>getOptions</code> method</a> from <code>loader-utils</code> to extract the given loader options. </div></blockquote><h3 class="header"><a class="anchor" href="#this-callback" id="this-callback"></a><span class="text"><code>this.callback</code></span><a class="icon-link" href="#this-callback"></a></h3>\n<p>A function that can be called synchronously or asynchronously in order to return multiple results. The expected arguments are:</p>\n<pre><code class="lang-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>\n  err<span class="token punctuation">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  content<span class="token punctuation">:</span> string <span class="token operator">|</span> Buffer<span class="token punctuation">,</span>\n  sourceMap<span class="token operator">?</span><span class="token punctuation">:</span> SourceMap<span class="token punctuation">,</span>\n  meta<span class="token operator">?</span><span class="token punctuation">:</span> any\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ol>\n<li>The first argument must be an <code>Error</code> or <code>null</code></li>\n<li>The second argument a <code>string</code> or a <a href="https://nodejs.org/api/buffer.html"><code>Buffer</code></a>.</li>\n<li>Optional: The third argument must be a source map that is parsable by <a href="https://github.com/mozilla/source-map">this module</a>.</li>\n<li>Optional: The fourth option, ignored by webpack, can be anything (e.g. some meta data).</li>\n</ol>\n<blockquote class="tip"><div class="tip-content"> It can be useful to pass an abstract syntax tree (AST), like <a href="https://github.com/estree/estree"><code>ESTree</code></a>, as the fourth argument (<code>meta</code>) to speed up the build time if you want to share common ASTs between loaders. </div></blockquote><p>In case this function is called, you should return undefined to avoid ambiguous loader results.</p>\n<h3 class="header"><a class="anchor" href="#this-async" id="this-async"></a><span class="text"><code>this.async</code></span><a class="icon-link" href="#this-async"></a></h3>\n<p>Tells the <a href="https://github.com/webpack/loader-runner">loader-runner</a> that the loader intends to call back asynchronously. Returns <code>this.callback</code>.</p>\n<h3 class="header"><a class="anchor" href="#this-data" id="this-data"></a><span class="text"><code>this.data</code></span><a class="icon-link" href="#this-data"></a></h3>\n<p>A data object shared between the pitch and the normal phase.</p>\n<h3 class="header"><a class="anchor" href="#this-cacheable" id="this-cacheable"></a><span class="text"><code>this.cacheable</code></span><a class="icon-link" href="#this-cacheable"></a></h3>\n<p>A function that sets the cacheable flag:</p>\n<pre><code class="lang-typescript"><span class="token function">cacheable</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span>\n</code></pre>\n<p>By default, loader results are flagged as cacheable. Call this method passing <code>false</code> to make the loader&#39;s result not cacheable.</p>\n<p>A cacheable loader must have a deterministic result, when inputs and dependencies haven&#39;t changed. This means the loader shouldn&#39;t have other dependencies than specified with <code>this.addDependency</code>.</p>\n<h3 class="header"><a class="anchor" href="#this-loaders" id="this-loaders"></a><span class="text"><code>this.loaders</code></span><a class="icon-link" href="#this-loaders"></a></h3>\n<p>An array of all the loaders. It is writeable in the pitch phase.</p>\n<pre><code class="lang-js">loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>request<span class="token punctuation">:</span> string<span class="token punctuation">,</span> path<span class="token punctuation">:</span> string<span class="token punctuation">,</span> query<span class="token punctuation">:</span> string<span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<p>In the example:</p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    request<span class="token punctuation">:</span> <span class="token string">"/abc/loader1.js?xyz"</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> <span class="token string">"/abc/loader1.js"</span><span class="token punctuation">,</span>\n    query<span class="token punctuation">:</span> <span class="token string">"?xyz"</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    request<span class="token punctuation">:</span> <span class="token string">"/abc/node_modules/loader2/index.js"</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> <span class="token string">"/abc/node_modules/loader2/index.js"</span><span class="token punctuation">,</span>\n    query<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#this-loaderindex" id="this-loaderindex"></a><span class="text"><code>this.loaderIndex</code></span><a class="icon-link" href="#this-loaderindex"></a></h3>\n<p>The index in the loaders array of the current loader.</p>\n<p>In the example: in loader1: <code>0</code>, in loader2: <code>1</code></p>\n<h3 class="header"><a class="anchor" href="#this-resource" id="this-resource"></a><span class="text"><code>this.resource</code></span><a class="icon-link" href="#this-resource"></a></h3>\n<p>The resource part of the request, including query.</p>\n<p>In the example: <code>&quot;/abc/resource.js?rrr&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-resourcepath" id="this-resourcepath"></a><span class="text"><code>this.resourcePath</code></span><a class="icon-link" href="#this-resourcepath"></a></h3>\n<p>The resource file.</p>\n<p>In the example: <code>&quot;/abc/resource.js&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-resourcequery" id="this-resourcequery"></a><span class="text"><code>this.resourceQuery</code></span><a class="icon-link" href="#this-resourcequery"></a></h3>\n<p>The query of the resource.</p>\n<p>In the example: <code>&quot;?rrr&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-target" id="this-target"></a><span class="text"><code>this.target</code></span><a class="icon-link" href="#this-target"></a></h3>\n<p>Target of compilation. Passed from configuration options.</p>\n<p>Example values: <code>&quot;web&quot;</code>, <code>&quot;node&quot;</code></p>\n<h3 class="header"><a class="anchor" href="#this-webpack" id="this-webpack"></a><span class="text"><code>this.webpack</code></span><a class="icon-link" href="#this-webpack"></a></h3>\n<p>This boolean is set to true when this is compiled by webpack.</p>\n<blockquote class="tip"><div class="tip-content"> Loaders were originally designed to also work as Babel transforms. Therefore if you write a loader that works for both, you can use this property to know if there is access to additional loaderContext and webpack features. </div></blockquote><h3 class="header"><a class="anchor" href="#this-sourcemap" id="this-sourcemap"></a><span class="text"><code>this.sourceMap</code></span><a class="icon-link" href="#this-sourcemap"></a></h3>\n<p>Should a source map be generated. Since generating source maps can be an expensive task, you should check if source maps are actually requested.</p>\n<h3 class="header"><a class="anchor" href="#this-emitwarning" id="this-emitwarning"></a><span class="text"><code>this.emitWarning</code></span><a class="icon-link" href="#this-emitwarning"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">emitWarning</span><span class="token punctuation">(</span>warning<span class="token punctuation">:</span> Error<span class="token punctuation">)</span>\n</code></pre>\n<p>Emit a warning.</p>\n<h3 class="header"><a class="anchor" href="#this-emiterror" id="this-emiterror"></a><span class="text"><code>this.emitError</code></span><a class="icon-link" href="#this-emiterror"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">emitError</span><span class="token punctuation">(</span>error<span class="token punctuation">:</span> Error<span class="token punctuation">)</span>\n</code></pre>\n<p>Emit an error.</p>\n<h3 class="header"><a class="anchor" href="#this-loadmodule" id="this-loadmodule"></a><span class="text"><code>this.loadModule</code></span><a class="icon-link" href="#this-loadmodule"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">loadModule</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> source<span class="token punctuation">,</span> sourceMap<span class="token punctuation">,</span> <span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Resolves the given request to a module, applies all configured loaders and calls back with the generated source, the sourceMap and the module instance (usually an instance of <a href="https://github.com/webpack/webpack/blob/master/lib/NormalModule.js"><code>NormalModule</code></a>). Use this function if you need to know the source code of another module to generate the result.</p>\n<h3 class="header"><a class="anchor" href="#this-resolve" id="this-resolve"></a><span class="text"><code>this.resolve</code></span><a class="icon-link" href="#this-resolve"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">resolve</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> request<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Resolve a request like a require expression.</p>\n<h3 class="header"><a class="anchor" href="#this-adddependency" id="this-adddependency"></a><span class="text"><code>this.addDependency</code></span><a class="icon-link" href="#this-adddependency"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">addDependency</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n<span class="token function">dependency</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token comment">// shortcut</span>\n</code></pre>\n<p>Adds a file as dependency of the loader result in order to make them watchable. For example, <a href="https://github.com/webpack/html-loader"><code>html-loader</code></a> uses this technique as it finds <code>src</code> and <code>src-set</code> attributes. Then, it sets the url&#39;s for those attributes as dependencies of the html file that is parsed.</p>\n<h3 class="header"><a class="anchor" href="#this-addcontextdependency" id="this-addcontextdependency"></a><span class="text"><code>this.addContextDependency</code></span><a class="icon-link" href="#this-addcontextdependency"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">addContextDependency</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Add a directory as dependency of the loader result.</p>\n<h3 class="header"><a class="anchor" href="#this-cleardependencies" id="this-cleardependencies"></a><span class="text"><code>this.clearDependencies</code></span><a class="icon-link" href="#this-cleardependencies"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">clearDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Remove all dependencies of the loader result. Even initial dependencies and these of other loaders. Consider using <code>pitch</code>.</p>\n<h3 class="header"><a class="anchor" href="#this-emitfile" id="this-emitfile"></a><span class="text"><code>this.emitFile</code></span><a class="icon-link" href="#this-emitfile"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">emitFile</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> Buffer<span class="token operator">|</span><span class="token keyword">string</span><span class="token punctuation">,</span> sourceMap<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Emit a file. This is webpack-specific.</p>\n<h3 class="header"><a class="anchor" href="#this-fs" id="this-fs"></a><span class="text"><code>this.fs</code></span><a class="icon-link" href="#this-fs"></a></h3>\n<p>Access to the <code>compilation</code>&#39;s <code>inputFileSystem</code> property.</p>\n<h2 class="header"><a class="anchor" href="#deprecated-context-properties" id="deprecated-context-properties"></a><span class="text">Deprecated context properties</span><a class="icon-link" href="#deprecated-context-properties"></a></h2>\n<blockquote class="warning"><div class="tip-content"> The usage of these properties is highly discouraged since we are planning to remove them from the context. They are still listed here for documentation purposes. </div></blockquote><h3 class="header"><a class="anchor" href="#this-exec" id="this-exec"></a><span class="text"><code>this.exec</code></span><a class="icon-link" href="#this-exec"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">exec</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> filename<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Execute some code fragment like a module. See <a href="https://github.com/webpack/webpack.js.org/issues/1268#issuecomment-313513988">this comment</a> for a replacement method if needed.</p>\n<h3 class="header"><a class="anchor" href="#this-resolvesync" id="this-resolvesync"></a><span class="text"><code>this.resolveSync</code></span><a class="icon-link" href="#this-resolvesync"></a></h3>\n<pre><code class="lang-typescript"><span class="token function">resolveSync</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> request<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">string</span>\n</code></pre>\n<p>Resolve a request like a require expression.</p>\n<h3 class="header"><a class="anchor" href="#this-value" id="this-value"></a><span class="text"><code>this.value</code></span><a class="icon-link" href="#this-value"></a></h3>\n<p>Pass values to the next loader. If you know what your result exports if executed as module, set this value here (as a only element array).</p>\n<h3 class="header"><a class="anchor" href="#this-inputvalue" id="this-inputvalue"></a><span class="text"><code>this.inputValue</code></span><a class="icon-link" href="#this-inputvalue"></a></h3>\n<p>Passed from the last loader. If you would execute the input argument as module, consider reading this variable for a shortcut (for performance).</p>\n<h3 class="header"><a class="anchor" href="#this-options" id="this-options"></a><span class="text"><code>this.options</code></span><a class="icon-link" href="#this-options"></a></h3>\n<p>The options passed to the Compiler.</p>\n<h3 class="header"><a class="anchor" href="#this-debug" id="this-debug"></a><span class="text"><code>this.debug</code></span><a class="icon-link" href="#this-debug"></a></h3>\n<p>A boolean flag. It is set when in debug mode.</p>\n<h3 class="header"><a class="anchor" href="#this-minimize" id="this-minimize"></a><span class="text"><code>this.minimize</code></span><a class="icon-link" href="#this-minimize"></a></h3>\n<p>Should the result be minimized.</p>\n<h3 class="header"><a class="anchor" href="#this-_compilation" id="this-_compilation"></a><span class="text"><code>this._compilation</code></span><a class="icon-link" href="#this-_compilation"></a></h3>\n<p>Hacky access to the Compilation object of webpack.</p>\n<h3 class="header"><a class="anchor" href="#this-_compiler" id="this-_compiler"></a><span class="text"><code>this._compiler</code></span><a class="icon-link" href="#this-_compiler"></a></h3>\n<p>Hacky access to the Compiler object of webpack.</p>\n<h3 class="header"><a class="anchor" href="#this-_module" id="this-_module"></a><span class="text"><code>this._module</code></span><a class="icon-link" href="#this-_module"></a></h3>\n<p>Hacky access to the Module object being loaded.</p>\n',title:"Loader API"},title:"Loader API",url:"/api/loaders/"},{file:{attributes:{title:"Module Methods",group:"Modules",sort:3,contributors:["skipjack","sokra"],related:[{title:"CommonJS Wikipedia",url:"https://en.wikipedia.org/wiki/CommonJS"},{title:"Asynchronous Module Definition",url:"https://en.wikipedia.org/wiki/Asynchronous_module_definition"}],anchors:[{title:"ES6 (Recommended)",id:"es6-recommended-"},{title:"import",id:"import"},{title:"export",id:"export"},{title:"import()",id:"import-"},{title:"CommonJS",id:"commonjs"},{title:"require",id:"require"},{title:"require.resolve",id:"require-resolve"},{title:"require.cache",id:"require-cache"},{title:"require.ensure",id:"require-ensure"},{title:"AMD",id:"amd"},{title:"define (with factory)",id:"define-with-factory-"},{title:"define (with value)",id:"define-with-value-"},{title:"require (amd-version)",id:"require-amd-version-"},{title:"Labeled Modules",id:"labeled-modules"},{title:"export label",id:"export-label"},{title:"require label",id:"require-label"},{title:"Webpack",id:"webpack"},{title:"require.context",id:"require-context"},{title:"require.include",id:"require-include"},{title:"require.resolveWeak",id:"require-resolveweak"}]},body:'<p>This section covers all methods available in code compiled with webpack. When using webpack to bundle your application, you can pick from a variety of module syntax styles including <a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015">ES6</a>, <a href="https://en.wikipedia.org/wiki/CommonJS">CommonJS</a>, and <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition">AMD</a>.</p>\n<blockquote class="warning"><div class="tip-content"> While webpack supports multiple module syntaxes, we recommend following a single syntax for consistency and to avoid odd behaviors/bugs. Here&#39;s <a href="https://github.com/webpack/webpack.js.org/issues/552">one example</a> of mixing ES6 and CommonJS, however there are surely others. </div></blockquote><h2 class="header"><a class="anchor" href="#es6-recommended-" id="es6-recommended-"></a><span class="text">ES6 (Recommended)</span><a class="icon-link" href="#es6-recommended-"></a></h2>\n<p>Version 2 of webpack supports ES6 module syntax natively, meaning you can use <code>import</code> and <code>export</code> without a tool like babel to handle this for you. Keep in mind that you will still probably need babel for other ES6+ features. The following methods are supported by webpack:</p>\n<h3 class="header"><a class="anchor" href="#import" id="import"></a><span class="text"><code>import</code></span><a class="icon-link" href="#import"></a></h3>\n<p>Statically <code>import</code> the <code>export</code>s of another module.</p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> MyModule <span class="token keyword">from</span> <span class="token string">\'./my-module.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NamedExport <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./other-module.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> The keyword here is <strong>statically</strong>. Normal <code>import</code> statement cannot be used dynamically within other logic or contain variables. See the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">spec</a> for more information and <code>import()</code> below for dynamic usage. </div></blockquote><h3 class="header"><a class="anchor" href="#export" id="export"></a><span class="text"><code>export</code></span><a class="icon-link" href="#export"></a></h3>\n<p>Export anything as a <code>default</code> or named export.</p>\n<pre><code class="lang-javascript"><span class="token comment">// Named exports</span>\n<span class="token keyword">export</span> <span class="token keyword">var</span> Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Default export</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Some data...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#import-" id="import-"></a><span class="text"><code>import()</code></span><a class="icon-link" href="#import-"></a></h3>\n<p><code>import(&#39;path/to/module&#39;) -&gt; Promise</code></p>\n<p>Dynamically load modules. Calls to <code>import()</code> are treated as split points, meaning the requested module and it&#39;s children are split out into a separate chunk.</p>\n<blockquote class="tip"><div class="tip-content"> The <a href="https://whatwg.github.io/loader/">ES2015 Loader spec</a> defines <code>import()</code> as method to load ES2015 modules dynamically on runtime. </div></blockquote><pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span> module<span class="token punctuation">.</span>hot <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with lodash (a.k.a \'_\')...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This feature relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> internally. If you use <code>import()</code> with older browsers, remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><p>The spec for <code>import</code> doesn&#39;t allow control over the chunk&#39;s name or other properties as &quot;chunks&quot; are only a concept within webpack. Luckily webpack allows some special parameters via comments so as to not break the spec:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span><span class="token punctuation">(</span>\n  <span class="token comment">/* webpackChunkName: "my-chunk-name" */</span>\n  <span class="token comment">/* webpackMode: "lazy" */</span>\n  <span class="token string">\'module\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>webpackChunkName</code>: A name for the new chunk. Since webpack 2.6.0, the placeholders <code>[index]</code> and <code>[request]</code> are supported within the given string to an incremented number or the actual resolved filename respectively.</p>\n<p><code>webpackMode</code>: Since webpack 2.6.0, different modes for resolving dynamic imports can be specified. The following options are supported:</p>\n<ul>\n<li><code>&quot;lazy&quot;</code> (default): Generates a lazy-loadable chunk for each <code>import()</code>ed module.</li>\n<li><code>&quot;lazy-once&quot;</code>: Generates a single lazy-loadable chunk that can satisfy all calls to <code>import()</code>. The chunk will be fetched on the first call to <code>import()</code>, and subsequent calls to <code>import()</code> will use the same network response. Note that this only makes sense in the case of a partially dynamic statement, e.g. <code>import(`./locales/${language}.json`)</code>, where there are multiple module paths that could potentially be requested.</li>\n<li><code>&quot;eager&quot;</code>: Generates no extra chunk. All modules are included in the current chunk and no additional network requests are made. A <code>Promise</code> is still returned but is already resolved. In contrast to a static import, the module isn&#39;t executed until the call to <code>import()</code> is made.</li>\n<li><code>&quot;weak&quot;</code>: Tries to load the module if the module function has already been loaded in some other way (i. e. another chunk imported it or a script containing the module was loaded). A <code>Promise</code> is still returned but, only successfully resolves if the chunks are already on the client. If the module is not available, the <code>Promise</code> is rejected. A network request will never be performed. This is useful for universal rendering when required chunks are always manually served in initial requests (embedded within the page), but not in cases where app navigation will trigger an import not initially served.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> Note that both options can be combined like so <code>/* webpackMode: &quot;lazy-once&quot;, webpackChunkName: &quot;all-i18n-data&quot; */</code>. This is parsed as a JSON5 object without curly brackets. </div></blockquote><blockquote class="warning"><div class="tip-content"> Fully dynamic statements, such as <code>import(foo)</code>, <strong>will fail</strong> because webpack requires at least some file location information. This is because <code>foo</code> could potentially be any path to any file in your system or project. The <code>import()</code> must contain at least some information about where the module is located, so bundling can be limited to a specific directory or set of files. </div></blockquote><blockquote class="warning"><div class="tip-content"> Every module that could potentially be requested on an <code>import()</code> call is included. For example, <code>import(`./locale/${language}.json`)</code> will cause every <code>.json</code> file in the <code>./locale</code> directory to be bundled into the new chunk. At run time, when the variable <code>language</code> has been computed, any file like <code>english.json</code> or <code>german.json</code> will be available for consumption. </div></blockquote><blockquote class="warning"><div class="tip-content"> The use of <code>System.import</code> in webpack <a href="https://github.com/webpack/webpack/issues/2163">did not fit the proposed spec</a>, so it was deprecated in webpack <a href="https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28">2.1.0-beta.28</a> in favor of <code>import()</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#commonjs" id="commonjs"></a><span class="text">CommonJS</span><a class="icon-link" href="#commonjs"></a></h2>\n<p>The goal of CommonJS is to specify an ecosystem for JavaScript outside the browser. The following CommonJS methods are supported by webpack:</p>\n<h3 class="header"><a class="anchor" href="#require" id="require"></a><span class="text"><code>require</code></span><a class="icon-link" href="#require"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span>dependency<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Synchronously retrieve the exports from another module. The compiler will ensure that the dependency is available in the output bundle.</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"my-module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Using it asynchronously may not have the expected effect. </div></blockquote><h3 class="header"><a class="anchor" href="#require-resolve" id="require-resolve"></a><span class="text"><code>require.resolve</code></span><a class="icon-link" href="#require-resolve"></a></h3>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dependency<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Synchronously retrieve a module&#39;s ID. The compiler will ensure that the dependency is available in the output bundle. See <a href="/api/module-variables#module-id-commonjs-"><code>module.id</code></a> for more information.</p>\n<blockquote class="warning"><div class="tip-content"> Module ID is a number in webpack (in contrast to NodeJS where it is a string -- the filename). </div></blockquote><h3 class="header"><a class="anchor" href="#require-cache" id="require-cache"></a><span class="text"><code>require.cache</code></span><a class="icon-link" href="#require-cache"></a></h3>\n<p>Multiple requires to the same module result in only one module execution and only one export. Therefore a cache in the runtime exists. Removing values from this cache cause new module execution and a new export.</p>\n<blockquote class="warning"><div class="tip-content"> This is only needed in rare cases for compatibility! </div></blockquote><pre><code class="lang-javascript"><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span> <span class="token operator">===</span> d1\n<span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dependency"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> d1\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// in file.js</span>\nrequire<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">===</span> module\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./file.js"</span><span class="token punctuation">)</span> <span class="token operator">===</span> module<span class="token punctuation">.</span>exports\n<span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\nrequire<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">===</span> undefined\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./file.js"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> module<span class="token punctuation">.</span>exports <span class="token comment">// in theory; in praxis this causes a stack overflow</span>\nrequire<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">!==</span> module\n</code></pre>\n<h3 class="header"><a class="anchor" href="#require-ensure" id="require-ensure"></a><span class="text"><code>require.ensure</code></span><a class="icon-link" href="#require-ensure"></a></h3>\n<blockquote class="warning"><div class="tip-content"> <code>require.ensure()</code> is specific to webpack and superseded by <code>import()</code>. </div></blockquote><pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span><span class="token punctuation">,</span> errorCallback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span> chunkName<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Split out the given <code>dependencies</code> to a separate bundle that that will be loaded asynchronously. When using CommonJS module syntax, this is the only way to dynamically load dependencies. Meaning, this code can be run within execution, only loading the <code>dependencies</code> if certain conditions are met.</p>\n<blockquote class="warning"><div class="tip-content"> This feature relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> internally. If you use <code>require.ensure</code> with older browsers, remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><pre><code class="lang-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'normal-dep\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span> module<span class="token punctuation">.</span>hot <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'c\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Do something special...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The following parameters are supported in the order specified above:</p>\n<ul>\n<li><code>dependencies</code>: An array of strings declaring all modules required for the code in the <code>callback</code> to execute.</li>\n<li><code>callback</code>: A function that webpack will execute once the dependencies are loaded. An implementation of the <code>require</code> function is sent as a parameter to this function. The function body can use this to further <code>require()</code> modules it needs for execution.</li>\n<li><code>errorCallback</code>: A function that is executed when webpack fails to load the dependencies.</li>\n<li><code>chunkName</code>: A name given to the chunk created by this particular <code>require.ensure()</code>. By passing the same <code>chunkName</code> to various <code>require.ensure()</code> calls, we can combine their code into a single chunk, resulting in only one bundle that the browser must load.</li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> Although the implementation of <code>require</code> is passed as an argument to the <code>callback</code> function, using an arbitrary name e.g. <code>require.ensure([], function(request) { request(&#39;someModule&#39;); })</code> isn&#39;t handled by webpack&#39;s static parser. Use <code>require</code> instead, e.g. <code>require.ensure([], function(require) { require(&#39;someModule&#39;); })</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#amd" id="amd"></a><span class="text">AMD</span><a class="icon-link" href="#amd"></a></h2>\n<p>Asynchronous Module Definition (AMD) is a JavaScript specification that defines an interface for writing and loading modules. The following AMD methods are supported by webpack:</p>\n<h3 class="header"><a class="anchor" href="#define-with-factory-" id="define-with-factory-"></a><span class="text"><code>define</code> (with factory)</span><a class="icon-link" href="#define-with-factory-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">:</span> String<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependencies<span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factoryMethod<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>If <code>dependencies</code> are provided, <code>factoryMethod</code> will be called with the exports of each dependency (in the same order). If <code>dependencies</code> are not provided, <code>factoryMethod</code> is called with <code>require</code>, <code>exports</code> and <code>module</code> (for compatibility!). If this function returns a value, this value is exported by the module. The compiler ensures that each dependency is available.</p>\n<blockquote class="warning"><div class="tip-content"> Note that webpack ignores the <code>name</code> argument. </div></blockquote><pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'jquery\'</span><span class="token punctuation">,</span> <span class="token string">\'my-module\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span> myModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with $ and myModule...</span>\n\n  <span class="token comment">// Export a function</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This CANNOT be used in an asynchronous function. </div></blockquote><h3 class="header"><a class="anchor" href="#define-with-value-" id="define-with-value-"></a><span class="text"><code>define</code> (with value)</span><a class="icon-link" href="#define-with-value-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token operator">!</span>Function<span class="token punctuation">)</span>\n</code></pre>\n<p>This will simply export the provided <code>value</code>. The <code>value</code> here can be anything except a function.</p>\n<pre><code class="lang-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  answer<span class="token punctuation">:</span> <span class="token number">42</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This CANNOT be used in an async function. </div></blockquote><h3 class="header"><a class="anchor" href="#require-amd-version-" id="require-amd-version-"></a><span class="text"><code>require</code> (amd-version)</span><a class="icon-link" href="#require-amd-version-"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Similar to <code>require.ensure</code>, this will split the given <code>dependencies</code> into a separate bundle that will be loaded asynchronously. The <code>callback</code> will be called with the exports of each dependency in the <code>dependencies</code> array.</p>\n<blockquote class="warning"><div class="tip-content"> This feature relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> internally. If you use AMD with older browsers (e.g. Internet Explorer 11), remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> There is no option to provide a chunk name. </div></blockquote><h2 class="header"><a class="anchor" href="#labeled-modules" id="labeled-modules"></a><span class="text">Labeled Modules</span><a class="icon-link" href="#labeled-modules"></a></h2>\n<p>The internal <code>LabeledModulesPlugin</code> enables you to use the following methods for exporting and requiring within your modules:</p>\n<h3 class="header"><a class="anchor" href="#export-label" id="export-label"></a><span class="text"><code>export</code> label</span><a class="icon-link" href="#export-label"></a></h3>\n<p>Export the given <code>value</code>. The label can occur before a function declaration or a variable declaration. The function name or variable name is the identifier under which the value is exported.</p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Using it in an async function may not have the expected effect. </div></blockquote><h3 class="header"><a class="anchor" href="#require-label" id="require-label"></a><span class="text"><code>require</code> label</span><a class="icon-link" href="#require-label"></a></h3>\n<p>Make all exports from the dependency available in the current scope. The <code>require</code> label can occur before a string. The dependency must export values with the <code>export</code> label. CommonJS or AMD modules cannot be consumed.</p>\n<p><strong>some-dependency.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-javascript">require<span class="token punctuation">:</span> <span class="token string">\'some-dependency\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#webpack" id="webpack"></a><span class="text">Webpack</span><a class="icon-link" href="#webpack"></a></h2>\n<p>Aside from the module syntaxes described above, webpack also allows a few custom, webpack-specific methods:</p>\n<h3 class="header"><a class="anchor" href="#require-context" id="require-context"></a><span class="text"><code>require.context</code></span><a class="icon-link" href="#require-context"></a></h3>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span>String<span class="token punctuation">,</span> includeSubdirs<span class="token punctuation">:</span>Boolean <span class="token comment">/* optional, default true */</span><span class="token punctuation">,</span> filter<span class="token punctuation">:</span>RegExp <span class="token comment">/* optional */</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Specify a whole group of dependencies using a path to the <code>directory</code>, an option to <code>includeSubdirs</code>, and a <code>filter</code> for more fine grained control of the modules included. These can then be easily resolved later on:</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'components\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> componentA <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'componentA\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#require-include" id="require-include"></a><span class="text"><code>require.include</code></span><a class="icon-link" href="#require-include"></a></h3>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>dependency<span class="token punctuation">:</span> String<span class="token punctuation">)</span>\n</code></pre>\n<p>Include a <code>dependency</code> without executing it. This can be used for optimizing the position of a module in the output chunks.</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequire<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequire<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This will result in following output:</p>\n<ul>\n<li>entry chunk: <code>file.js</code> and <code>a</code></li>\n<li>anonymous chunk: <code>b</code></li>\n<li>anonymous chunk: <code>c</code></li>\n</ul>\n<p>Without <code>require.include(&#39;a&#39;)</code> it would be duplicated in both anonymous chunks.</p>\n<h3 class="header"><a class="anchor" href="#require-resolveweak" id="require-resolveweak"></a><span class="text"><code>require.resolveWeak</code></span><a class="icon-link" href="#require-resolveweak"></a></h3>\n<p>Similar to <code>require.resolve</code>, but this won&#39;t pull the <code>module</code> into the bundle. It&#39;s what is considered a &quot;weak&quot; dependency.</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_modules__<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolveWeak</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something when module is available...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolveWeak</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something when module was loaded before...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// You can perform dynamic resolves ("context")</span>\n<span class="token comment">// just as with other require/import methods.</span>\n<span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token string">\'Foo\'</span><span class="token punctuation">;</span>\n__webpack_modules__<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolveWeak</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./page/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> <code>require.resolveWeak</code> is the foundation of <em>universal rendering</em> (SSR + Code Splitting), as used in packages such as <a href="https://github.com/faceyspacey/react-universal-component">react-universal-component</a>. It allows code to render synchronously on both the server and initial page-loads on the client. It requires that chunks are manually served or somehow available. It&#39;s able to require modules without indicating they should be bundled into a chunk. It&#39;s used in conjunction with <code>import()</code> which takes over when user navigation triggers additional imports. </div></blockquote>',title:"Module Methods"},title:"Module Methods",url:"/api/module-methods/"},{file:{attributes:{title:"Module Variables",group:"Modules",sort:4,contributors:["ahmehri","skipjack","sokra","tbroadley"],related:[{title:"CommonJS",url:"https://en.wikipedia.org/wiki/CommonJS"},{title:"Asynchronous Module Definition",url:"https://en.wikipedia.org/wiki/Asynchronous_module_definition"}],anchors:[{title:"module.loaded (NodeJS)",id:"module-loaded-nodejs-"},{title:"module.hot (webpack-specific)",id:"module-hot-webpack-specific-"},{title:"module.id (CommonJS)",id:"module-id-commonjs-"},{title:"module.exports (CommonJS)",id:"module-exports-commonjs-"},{title:"exports (CommonJS)",id:"exports-commonjs-"},{title:"global (NodeJS)",id:"global-nodejs-"},{title:"process (NodeJS)",id:"process-nodejs-"},{title:"__dirname (NodeJS)",id:"__dirname-nodejs-"},{title:"__filename (NodeJS)",id:"__filename-nodejs-"},{title:"__resourceQuery (webpack-specific)",id:"__resourcequery-webpack-specific-"},{title:"__webpack_public_path__ (webpack-specific)",id:"__webpack_public_path__-webpack-specific-"},{title:"__webpack_require__ (webpack-specific)",id:"__webpack_require__-webpack-specific-"},{title:"__webpack_chunk_load__ (webpack-specific)",id:"__webpack_chunk_load__-webpack-specific-"},{title:"__webpack_modules__ (webpack-specific)",id:"__webpack_modules__-webpack-specific-"},{title:"__webpack_hash__ (webpack-specific)",id:"__webpack_hash__-webpack-specific-"},{title:"__non_webpack_require__ (webpack-specific)",id:"__non_webpack_require__-webpack-specific-"},{title:"DEBUG  (webpack-specific)",id:"debug-webpack-specific-"}]},body:'<p>This section covers all <strong>variables</strong> available in code compiled with webpack. Modules will have access to certain data from the compilation process through <code>module</code> and other variables.</p>\n<h3 class="header"><a class="anchor" href="#module-loaded-nodejs-" id="module-loaded-nodejs-"></a><span class="text"><code>module.loaded</code> (NodeJS)</span><a class="icon-link" href="#module-loaded-nodejs-"></a></h3>\n<p>This is <code>false</code> if the module is currently executing, and <code>true</code> if the sync execution has finished.</p>\n<h3 class="header"><a class="anchor" href="#module-hot-webpack-specific-" id="module-hot-webpack-specific-"></a><span class="text"><code>module.hot</code> (webpack-specific)</span><a class="icon-link" href="#module-hot-webpack-specific-"></a></h3>\n<p>Indicates whether or not <a href="/concepts/hot-module-replacement">Hot Module Replacement</a> is enabled and provides an interface to the process. See the <a href="/api/hot-module-replacement">HMR API page</a> for details.</p>\n<h3 class="header"><a class="anchor" href="#module-id-commonjs-" id="module-id-commonjs-"></a><span class="text"><code>module.id</code> (CommonJS)</span><a class="icon-link" href="#module-id-commonjs-"></a></h3>\n<p>The ID of the current module.</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>id <span class="token operator">===</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./file.js"</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#module-exports-commonjs-" id="module-exports-commonjs-"></a><span class="text"><code>module.exports</code> (CommonJS)</span><a class="icon-link" href="#module-exports-commonjs-"></a></h3>\n<p>Defines the value that will be returned when a consumer makes a <code>require</code> call to the module (defaults to a new object).</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This CANNOT be used in an asynchronous function. </div></blockquote><h3 class="header"><a class="anchor" href="#exports-commonjs-" id="exports-commonjs-"></a><span class="text"><code>exports</code> (CommonJS)</span><a class="icon-link" href="#exports-commonjs-"></a></h3>\n<p>This variable is equal to default value of <code>module.exports</code> (i.e. an object). If <code>module.exports</code> gets overwritten, <code>exports</code> will no longer be exported.</p>\n<pre><code class="lang-javascript">exports<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span>anObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nexports<span class="token punctuation">.</span>aFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#global-nodejs-" id="global-nodejs-"></a><span class="text"><code>global</code> (NodeJS)</span><a class="icon-link" href="#global-nodejs-"></a></h3>\n<p>See <a href="http://nodejs.org/api/globals.html#globals_global">node.js global</a>.</p>\n<h3 class="header"><a class="anchor" href="#process-nodejs-" id="process-nodejs-"></a><span class="text"><code>process</code> (NodeJS)</span><a class="icon-link" href="#process-nodejs-"></a></h3>\n<p>See <a href="http://nodejs.org/api/process.html">node.js process</a>.</p>\n<h3 class="header"><a class="anchor" href="#__dirname-nodejs-" id="__dirname-nodejs-"></a><span class="text"><code>__dirname</code> (NodeJS)</span><a class="icon-link" href="#__dirname-nodejs-"></a></h3>\n<p>Depending on the config option <code>node.__dirname</code>:</p>\n<ul>\n<li><code>false</code>: Not defined</li>\n<li><code>mock</code>: equal &quot;/&quot;</li>\n<li><code>true</code>: <a href="http://nodejs.org/api/globals.html#globals_dirname">node.js __dirname</a></li>\n</ul>\n<p>If used inside a expression that is parsed by the Parser, the config option is treated as <code>true</code>.</p>\n<h3 class="header"><a class="anchor" href="#__filename-nodejs-" id="__filename-nodejs-"></a><span class="text"><code>__filename</code> (NodeJS)</span><a class="icon-link" href="#__filename-nodejs-"></a></h3>\n<p>Depending on the config option <code>node.__filename</code>:</p>\n<ul>\n<li><code>false</code>: Not defined</li>\n<li><code>mock</code>: equal &quot;/index.js&quot;</li>\n<li><code>true</code>: <a href="http://nodejs.org/api/globals.html#globals_filename">node.js __filename</a></li>\n</ul>\n<p>If used inside a expression that is parsed by the Parser, the config option is treated as <code>true</code>.</p>\n<h3 class="header"><a class="anchor" href="#__resourcequery-webpack-specific-" id="__resourcequery-webpack-specific-"></a><span class="text"><code>__resourceQuery</code> (webpack-specific)</span><a class="icon-link" href="#__resourcequery-webpack-specific-"></a></h3>\n<p>The resource query of the current module. If the following <code>require</code> call were made, then the query string would be available in <code>file.js</code>.</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file.js?test\'</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-javascript">__resourceQuery <span class="token operator">===</span> <span class="token string">\'?test\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#__webpack_public_path__-webpack-specific-" id="__webpack_public_path__-webpack-specific-"></a><span class="text"><code>__webpack_public_path__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_public_path__-webpack-specific-"></a></h3>\n<p>Equals the config options <code>output.publicPath</code>.</p>\n<h3 class="header"><a class="anchor" href="#__webpack_require__-webpack-specific-" id="__webpack_require__-webpack-specific-"></a><span class="text"><code>__webpack_require__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_require__-webpack-specific-"></a></h3>\n<p>The raw require function. This expression isn&#39;t parsed by the Parser for dependencies.</p>\n<h3 class="header"><a class="anchor" href="#__webpack_chunk_load__-webpack-specific-" id="__webpack_chunk_load__-webpack-specific-"></a><span class="text"><code>__webpack_chunk_load__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_chunk_load__-webpack-specific-"></a></h3>\n<p>The internal chunk loading function. Takes two arguments:</p>\n<ul>\n<li><code>chunkId</code> The id for the chunk to load.</li>\n<li><code>callback(require)</code> A callback function called once the chunk is loaded.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#__webpack_modules__-webpack-specific-" id="__webpack_modules__-webpack-specific-"></a><span class="text"><code>__webpack_modules__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_modules__-webpack-specific-"></a></h3>\n<p>Access to the internal object of all modules.</p>\n<h3 class="header"><a class="anchor" href="#__webpack_hash__-webpack-specific-" id="__webpack_hash__-webpack-specific-"></a><span class="text"><code>__webpack_hash__</code> (webpack-specific)</span><a class="icon-link" href="#__webpack_hash__-webpack-specific-"></a></h3>\n<p>This variable is only available with the <code>HotModuleReplacementPlugin</code> or the <code>ExtendedAPIPlugin</code>. It provides access to the hash of the compilation.</p>\n<h3 class="header"><a class="anchor" href="#__non_webpack_require__-webpack-specific-" id="__non_webpack_require__-webpack-specific-"></a><span class="text"><code>__non_webpack_require__</code> (webpack-specific)</span><a class="icon-link" href="#__non_webpack_require__-webpack-specific-"></a></h3>\n<p>Generates a <code>require</code> function that is not parsed by webpack. Can be used to do cool stuff with a global require function if available.</p>\n<h3 class="header"><a class="anchor" href="#debug-webpack-specific-" id="debug-webpack-specific-"></a><span class="text"><code>DEBUG</code>  (webpack-specific)</span><a class="icon-link" href="#debug-webpack-specific-"></a></h3>\n<p>Equals the config option <code>debug</code>.</p>\n',title:"Module Variables"},title:"Module Variables",url:"/api/module-variables/"},{file:{attributes:{title:"Plugin API",group:"Plugins",sort:0,anchors:[{title:"Tapable & Tapable Instances",id:"tapable-tapable-instances"}],contributors:[],related:[]},body:'<blockquote class="tip"><div class="tip-content"> For a high-level introduction to writing plugins, start with <a href="/contribute/writing-a-plugin">writing a plugin</a>. </div></blockquote><p>Many objects in webpack extend the <code>Tapable</code> class, which exposes a <code>plugin</code> method. And with the <code>plugin</code> method, plugins can inject custom build steps. You will see <code>compiler.plugin</code> and <code>compilation.plugin</code> used a lot. Essentially, each one of these plugin calls binds a callback to fire at specific steps throughout the build process.</p>\n<p>There are two types of plugin interfaces...</p>\n<p><strong>Timing Based</strong></p>\n<ul>\n<li>sync (default): The plugin runs synchronously and returns its output.</li>\n<li>async: The plugin runs asynchronously and uses the give <code>callback</code> to return its output.</li>\n<li>parallel: The handlers are invoked in parallel.</li>\n</ul>\n<p><strong>Return Value</strong></p>\n<ul>\n<li>not bailing (default): No return value.</li>\n<li>bailing: The handlers are invoked in order until one handler returns something.</li>\n<li>parallel bailing: The handlers are invoked in parallel (async). The first returned value (by order) is significant.</li>\n<li>waterfall: Each handler gets the result value of the last handler as an argument.</li>\n</ul>\n<p>A plugin is installed once as webpack starts up. webpack installs a plugin by calling its <code>apply</code> method, and passes a reference to the webpack <code>compiler</code> object. You may then call <code>compiler.plugin</code> to access asset compilations and their individual build steps. An example would look like this:</p>\n<p><strong>my-plugin.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Configure your plugin with options...</span>\n<span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compile"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compiler is starting to compile..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compiler is starting a new compilation..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"optimize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compilation is starting to optimize files..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The compilation is going to emit files..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    options<span class="token punctuation">:</span> <span class="token string">\'nada\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#tapable-tapable-instances" id="tapable-tapable-instances"></a><span class="text">Tapable &amp; Tapable Instances</span><a class="icon-link" href="#tapable-tapable-instances"></a></h2>\n<p>The plugin architecture is mainly possible for webpack due to an internal library named <code>Tapable</code>.\n<strong>Tapable Instances</strong> are classes in the webpack source code which have been extended or mixed in from class <code>Tapable</code>.</p>\n<p>For plugin authors, it is important to know which are the <code>Tapable</code> instances in the webpack source code. These instances provide a variety of event hooks into which custom plugins can be attached.\nHence, throughout this section are a list of all of the webpack <code>Tapable</code> instances (and their event hooks), which plugin authors can utilize.</p>\n<p>For more information on <code>Tapable</code> visit the <a href="/api/tapable">complete overview</a> or the <a href="https://github.com/webpack/tapable">tapable repository</a>.</p>\n',title:"Plugin API"},title:"Plugin API",url:"/api/plugins/"},{file:{attributes:{title:"Tapable",group:"Plugins",sort:1,contributors:["e-cloud","pksjce","thelarkinn"],anchors:[{title:"Example",id:"example"}],related:[]},body:'<p><a href="https://github.com/webpack/tapable">Tapable</a> is a small library that allows you to add and apply plugins to a javascript module. It can be inherited or mixed in to other modules. It is similar to NodeJS&#39;s <code>EventEmitter</code> class, focusing on custom event emission and manipulation. However, in addition to this, <code>Tapable</code> allows you to have access to the &quot;emittee&quot; or &quot;producer&quot; of the event through callbacks arguments.</p>\n<p><code>Tapable</code> has four groups of member functions:</p>\n<ul>\n<li><code>plugin(name:string, handler:function)</code>: This allows a custom plugin to register into a <strong>Tapable instance</strong>&#39;s event. This acts similar to the <code>on()</code> method of the <code>EventEmitter</code>, which is used for registering a handler/listener to do something when the signal/event happens.</li>\n<li><code>apply(…pluginInstances: (AnyPlugin|function)[])</code>: <code>AnyPlugin</code> should be a class (or, rarely, an object) that has an <code>apply</code> method, or just a function with some registration code inside. This method is just to <strong>apply</strong> plugins&#39; definition, so that the real event listeners can be registered into the <em>Tapable</em> instance&#39;s registry.</li>\n<li><code>applyPlugins*(name:string, …)</code>: The <em>Tapable</em> instance can apply all the plugins under a particular hash using these functions. This group of methods act like the <code>emit()</code> method of the <code>EventEmitter</code>, controlling event emission meticulously using various strategies.</li>\n<li><code>mixin(pt: Object)</code>: a simple method to extend <code>Tapable</code>&#39;s prototype as a mixin rather than inheritance.</li>\n</ul>\n<p>The different <code>applyPlugins*</code> methods cover the following use cases:</p>\n<ul>\n<li>Plugins can run serially.</li>\n<li>Plugins can run in parallel.</li>\n<li>Plugins can run one after the other but taking input from the previous plugin (waterfall).</li>\n<li>Plugins can run asynchronously.</li>\n<li>Quit running plugins on bail: that is, once one plugin returns non-<code>undefined</code>, jump out of the run flow and return <em>the return of that plugin</em>. This sounds like <code>once()</code> of <code>EventEmitter</code> but is totally different.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#example" id="example"></a><span class="text">Example</span><a class="icon-link" href="#example"></a></h2>\n<p>One of webpack&#39;s <em>Tapable</em> instances, <a href="/api/compiler">Compiler</a>, is responsible for compiling the webpack configuration object and returning a <a href="/api/compilation">Compilation</a> instance. When the Compilation instance runs, it creates the required bundles.</p>\n<p>See below for a simplified version of how this looks using <code>Tapable</code>:</p>\n<p><strong>node_modules/webpack/lib/Compiler.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> Tapable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tapable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Compiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Tapable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nCompiler<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Tapable<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Now to write a plugin on the compiler,</p>\n<p><strong>my-custom-plugin.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">CustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nCustomPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> pluginFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The compiler executes the plugin at the appropriate point in its lifecycle by</p>\n<p><strong>node_modules/webpack/lib/Compiler.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">this</span><span class="token punctuation">.</span>apply<span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span> <span class="token comment">// will fetch all plugins under \'emit\' name and run them.</span>\n</code></pre>\n',title:"Tapable"},title:"Tapable",url:"/api/tapable/"},{file:{attributes:{title:"Compiler",group:"Plugins",sort:2,contributors:["rishantagarwal"],anchors:[{title:"Watching",id:"watching"},{title:"MultiCompiler",id:"multicompiler"},{title:"Event Hooks",id:"event-hooks"},{title:"Usage",id:"usage"}],related:[]},body:'<p>The <code>Compiler</code> module of webpack is the main engine that creates a compilation instance with all the options passed through webpack CLI or <code>webpack</code> api or webpack configuration file.</p>\n<p>It is exported by <code>webpack</code> api under <code>webpack.Compiler</code>.</p>\n<p>The compiler is used by webpack by instantiating it and then calling the <code>run</code> method. Below is a trivial example of how one might use the <code>Compiler</code>. In fact, this is really close to how webpack itself uses it.</p>\n<p><a href="https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example"><strong>compiler-example</strong></a></p>\n<pre><code class="lang-javascript"><span class="token comment">// Can be imported from webpack package</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>Compiler<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create a new compiler instance</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Populate all required options</span>\ncompiler<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Creating a plugin.</span>\n<span class="token keyword">class</span> <span class="token class-name">LogPlugin</span> <span class="token punctuation">{</span>\n  apply <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'should-emit\'</span><span class="token punctuation">,</span> compilation <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'should I emit?\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Apply the compiler to the plugin</span>\n<span class="token keyword">new</span> <span class="token class-name">LogPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* Add other supporting plugins */</span>\n\n<span class="token comment">// Callback to be executed after run is complete</span>\n<span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Compiler has finished execution.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Display stats...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// call run on the compiler along with the callback</span>\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The <code>Compiler</code> is what we call a <code>Tapable</code> instance. By this, we mean that it mixes in <code>Tapable</code> class to imbibe functionality to register and call plugins on itself. Most user facing plugins are first registered on the <code>Compiler</code>. The working of a Compiler can be condensed into the following highlights</p>\n<ul>\n<li>Usually there is one master instance of Compiler. Child compilers can be created for delegating specific tasks.</li>\n<li>A lot of the complexity in creating a compiler goes into populating all the relevant options for it.</li>\n<li><code>webpack</code> has <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js"><code>WebpackOptionsDefaulter</code></a> and <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a> specifically designed to provide the <code>Compiler</code> with all the initial data it requires.</li>\n<li>The <code>Compiler</code> is ultimately just a function which performs bare minimum functionality to keep a lifecycle running. It delegates all the loading/bundling/writing work to various plugins.</li>\n<li><code>new LogPlugin(args).apply(compiler)</code> registers the plugin to any particular hook event in the <code>Compiler</code>&#39;s lifecycle.</li>\n<li>The <code>Compiler</code> exposes a <code>run</code> method which kickstarts all compilation work for <code>webpack</code>. When that is done, it should call the passed in <code>callback</code> function. All the tail end work of logging stats and errors are done in this callback function.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#watching" id="watching"></a><span class="text">Watching</span><a class="icon-link" href="#watching"></a></h2>\n<p>The <code>Compiler</code> supports &quot;watch mode&quot; which monitors the file system and recompiles as files change. When in watch mode, the compiler will emit the additional events <a href="#event-hooks">&quot;watch-run&quot;, &quot;watch-close&quot;, and &quot;invalid&quot;</a>. This is typically used in <a href="/guides/development">development</a>, usually under the hood of tools like <code>webpack-dev-server</code>, so that the developer doesn&#39;t need to re-compile manually every time.</p>\n<p>For more details about watch mode, see the <a href="/api/node/#watching">Node.js API documentation</a> or the <a href="/api/cli/#watch-options">CLI watch options</a>.</p>\n<h2 class="header"><a class="anchor" href="#multicompiler" id="multicompiler"></a><span class="text">MultiCompiler</span><a class="icon-link" href="#multicompiler"></a></h2>\n<p>This module, MultiCompiler, allows webpack to run multiple configurations in separate compiler.\nIf the <code>options</code> parameter in the webpack&#39;s NodeJS api is an array of options, webpack applies separate compilers and calls the <code>callback</code> method at the end of each compiler execution.</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> config1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index1.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>filename<span class="token punctuation">:</span> <span class="token string">\'bundle1.js\'</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> config2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index2.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>filename<span class="token punctuation">:</span><span class="token string">\'bundle2.js\'</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">[</span>config1<span class="token punctuation">,</span> config2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#event-hooks" id="event-hooks"></a><span class="text">Event Hooks</span><a class="icon-link" href="#event-hooks"></a></h2>\n<p>This a reference guide to all the event hooks exposed by the <code>Compiler</code>.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Event name</div><div class="table-th">Reason</div><div class="table-th">Params</div><div class="table-th">Type</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>entry-option</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        bailResult\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-plugins</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After setting up initial set of plugins\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-resolvers</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After setting up the resolvers\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>environment</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-environment</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Environment setup complete\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>before-run</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        <code>compiler.run()</code> starts\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>run</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before reading records\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>watch-run</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before starting compilation after watch\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compiler</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>normal-module-factory</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After creating a <code>NormalModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>normalModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>context-module-factory</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After creating a <code>ContextModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>contextModuleFactory</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>before-compile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Compilation parameters created\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilationParams</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>compile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before creating new compilation\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilationParams</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>this-compilation</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before emitting <code>compilation</code> event\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>compilation</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Compilation creation completed\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>make</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        parallel\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-compile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>should-emit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Can return true/false at this point\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        bailResult\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>need-additional-pass</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        bailResult\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>emit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Before emitting assets to output dir\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>after-emit</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After emitting assets to output dir\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>compilation</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        async\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>done</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Completion of compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>stats</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>failed</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        Failure of compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>error</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>invalid</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After invalidating a watch compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        <code>fileName</code>, <code>changeTime</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Event name\n    </div>\n    <div class="table-td-content">\n        <strong><code>watch-close</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Reason\n    </div>\n    <div class="table-td-content">\n        After stopping a watch compile\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Params\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        sync\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Here&#39;s an example of an asynchronous <code>emit</code> event handler:</p>\n<pre><code class="lang-javascript">compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something async...</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Done with async work..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n',title:"Compiler"},title:"Compiler",url:"/api/compiler/"},{file:{attributes:{title:"Compilation",group:"Plugins",sort:3,anchors:[{title:"normal-module-loader",id:"normal-module-loader"},{title:"seal",id:"seal"},{title:"optimize",id:"optimize"},{title:"optimize-tree(chunks, modules) async",id:"optimize-tree-chunks-modules-async"},{title:"optimize-modules(modules: Module[])",id:"optimize-modules-modules-module-"},{title:"after-optimize-modules(modules: Module[])",id:"after-optimize-modules-modules-module-"},{title:"optimize-chunks(chunks: Chunk[])",id:"optimize-chunks-chunks-chunk-"},{title:"after-optimize-chunks(chunks: Chunk[])",id:"after-optimize-chunks-chunks-chunk-"},{title:"revive-modules(modules: Module[], records)",id:"revive-modules-modules-module-records-"},{title:"optimize-module-order(modules: Module[])",id:"optimize-module-order-modules-module-"},{title:"optimize-module-ids(modules: Module[])",id:"optimize-module-ids-modules-module-"},{title:"after-optimize-module-ids(modules: Module[])",id:"after-optimize-module-ids-modules-module-"},{title:"record-modules(modules: Module[], records)",id:"record-modules-modules-module-records-"},{title:"revive-chunks(chunks: Chunk[], records)",id:"revive-chunks-chunks-chunk-records-"},{title:"optimize-chunk-order(chunks: Chunk[])",id:"optimize-chunk-order-chunks-chunk-"},{title:"optimize-chunk-ids(chunks: Chunk[])",id:"optimize-chunk-ids-chunks-chunk-"},{title:"after-optimize-chunk-ids(chunks: Chunk[])",id:"after-optimize-chunk-ids-chunks-chunk-"},{title:"record-chunks(chunks: Chunk[], records)",id:"record-chunks-chunks-chunk-records-"},{title:"before-hash",id:"before-hash"},{title:"after-hash",id:"after-hash"},{title:"before-chunk-assets",id:"before-chunk-assets"},{title:"additional-chunk-assets(chunks: Chunk[])",id:"additional-chunk-assets-chunks-chunk-"},{title:"record(compilation, records)",id:"record-compilation-records-"},{title:"additional-assets async",id:"additional-assets-async"},{title:"optimize-chunk-assets(chunks: Chunk[]) async",id:"optimize-chunk-assets-chunks-chunk-async"},{title:"after-optimize-chunk-assets(chunks: Chunk[])",id:"after-optimize-chunk-assets-chunks-chunk-"},{title:"optimize-assets(assets: Object{name: Source}) async",id:"optimize-assets-assets-object-name-source-async"},{title:"after-optimize-assets(assets: Object{name: Source})",id:"after-optimize-assets-assets-object-name-source-"},{title:"build-module(module)",id:"build-module-module-"},{title:"succeed-module(module)",id:"succeed-module-module-"},{title:"failed-module(module)",id:"failed-module-module-"},{title:"module-asset(module, filename)",id:"module-asset-module-filename-"},{title:"chunk-asset(chunk, filename)",id:"chunk-asset-chunk-filename-"}],contributors:[],related:[]},body:'<p>The Compilation instance extends from the compiler i.e. <code>compiler.compilation</code>. It is the literal compilation of all the objects in the require graph. This object has access to all the modules and their dependencies (most of which are circular references). In the compilation phase, modules are loaded, sealed, optimized, chunked, hashed and restored, etc. This would be the main lifecycle of any operations of the compilation.</p>\n<pre><code class="lang-js">compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// the main compilation instance</span>\n  <span class="token comment">// all subsequent methods are derived from compilation.plugin</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#normal-module-loader" id="normal-module-loader"></a><span class="text"><code>normal-module-loader</code></span><a class="icon-link" href="#normal-module-loader"></a></h2>\n<p>The normal module loader, is the function that actually loads all the modules in the module graph (one-by-one).</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'normal-module-loader\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>loaderContext<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this is where all the modules are loaded</span>\n  <span class="token comment">// one by one, no dependencies are created yet</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#seal" id="seal"></a><span class="text"><code>seal</code></span><a class="icon-link" href="#seal"></a></h2>\n<p>The sealing of the compilation has started.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'seal\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// you are not accepting any more modules</span>\n  <span class="token comment">// no arguments</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize" id="optimize"></a><span class="text"><code>optimize</code></span><a class="icon-link" href="#optimize"></a></h2>\n<p>Optimize the compilation.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// webpack is begining the optimization phase</span>\n  <span class="token comment">// no arguments</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize-tree-chunks-modules-async" id="optimize-tree-chunks-modules-async"></a><span class="text"><code>optimize-tree(chunks, modules)</code> async</span><a class="icon-link" href="#optimize-tree-chunks-modules-async"></a></h2>\n<p>Async optimization of the tree.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize-tree\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">,</span> modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#optimize-modules-modules-module-" id="optimize-modules-modules-module-"></a><span class="text"><code>optimize-modules(modules: Module[])</code></span><a class="icon-link" href="#optimize-modules-modules-module-"></a></h3>\n<p>Optimize the modules.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize-modules\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// handle to the modules array during tree optimization</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#after-optimize-modules-modules-module-" id="after-optimize-modules-modules-module-"></a><span class="text"><code>after-optimize-modules(modules: Module[])</code></span><a class="icon-link" href="#after-optimize-modules-modules-module-"></a></h2>\n<p>Optimizing the modules has finished.</p>\n<h2 class="header"><a class="anchor" href="#optimize-chunks-chunks-chunk-" id="optimize-chunks-chunks-chunk-"></a><span class="text"><code>optimize-chunks(chunks: Chunk[])</code></span><a class="icon-link" href="#optimize-chunks-chunks-chunk-"></a></h2>\n<p>Optimize the chunks.</p>\n<pre><code class="lang-javascript"><span class="token comment">//optimize chunks may be run several times in a compilation</span>\n\ncompilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'optimize-chunks\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Unless you\'ve specified multiple entries in your config</span>\n    <span class="token comment">// there\'s only one chunk at this point</span>\n    chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Chunks have circular references to their modules</span>\n        chunk<span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// module.loaders, module.rawRequest, module.dependencies, etc.</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#after-optimize-chunks-chunks-chunk-" id="after-optimize-chunks-chunks-chunk-"></a><span class="text"><code>after-optimize-chunks(chunks: Chunk[])</code></span><a class="icon-link" href="#after-optimize-chunks-chunks-chunk-"></a></h2>\n<p>Optimizing the chunks has finished.</p>\n<h2 class="header"><a class="anchor" href="#revive-modules-modules-module-records-" id="revive-modules-modules-module-records-"></a><span class="text"><code>revive-modules(modules: Module[], records)</code></span><a class="icon-link" href="#revive-modules-modules-module-records-"></a></h2>\n<p>Restore module info from records.</p>\n<h2 class="header"><a class="anchor" href="#optimize-module-order-modules-module-" id="optimize-module-order-modules-module-"></a><span class="text"><code>optimize-module-order(modules: Module[])</code></span><a class="icon-link" href="#optimize-module-order-modules-module-"></a></h2>\n<p>Sort the modules in order of importance. The first is the most important module. It will get the smallest id.</p>\n<h2 class="header"><a class="anchor" href="#optimize-module-ids-modules-module-" id="optimize-module-ids-modules-module-"></a><span class="text"><code>optimize-module-ids(modules: Module[])</code></span><a class="icon-link" href="#optimize-module-ids-modules-module-"></a></h2>\n<p>Optimize the module ids.</p>\n<h2 class="header"><a class="anchor" href="#after-optimize-module-ids-modules-module-" id="after-optimize-module-ids-modules-module-"></a><span class="text"><code>after-optimize-module-ids(modules: Module[])</code></span><a class="icon-link" href="#after-optimize-module-ids-modules-module-"></a></h2>\n<p>Optimizing the module ids has finished.</p>\n<h2 class="header"><a class="anchor" href="#record-modules-modules-module-records-" id="record-modules-modules-module-records-"></a><span class="text"><code>record-modules(modules: Module[], records)</code></span><a class="icon-link" href="#record-modules-modules-module-records-"></a></h2>\n<p>Store module info to the records.</p>\n<h2 class="header"><a class="anchor" href="#revive-chunks-chunks-chunk-records-" id="revive-chunks-chunks-chunk-records-"></a><span class="text"><code>revive-chunks(chunks: Chunk[], records)</code></span><a class="icon-link" href="#revive-chunks-chunks-chunk-records-"></a></h2>\n<p>Restore chunk info from records.</p>\n<h2 class="header"><a class="anchor" href="#optimize-chunk-order-chunks-chunk-" id="optimize-chunk-order-chunks-chunk-"></a><span class="text"><code>optimize-chunk-order(chunks: Chunk[])</code></span><a class="icon-link" href="#optimize-chunk-order-chunks-chunk-"></a></h2>\n<p>Sort the chunks in order of importance. The first is the most important chunk. It will get the smallest id.</p>\n<h2 class="header"><a class="anchor" href="#optimize-chunk-ids-chunks-chunk-" id="optimize-chunk-ids-chunks-chunk-"></a><span class="text"><code>optimize-chunk-ids(chunks: Chunk[])</code></span><a class="icon-link" href="#optimize-chunk-ids-chunks-chunk-"></a></h2>\n<p>Optimize the chunk ids.</p>\n<h2 class="header"><a class="anchor" href="#after-optimize-chunk-ids-chunks-chunk-" id="after-optimize-chunk-ids-chunks-chunk-"></a><span class="text"><code>after-optimize-chunk-ids(chunks: Chunk[])</code></span><a class="icon-link" href="#after-optimize-chunk-ids-chunks-chunk-"></a></h2>\n<p>Optimizing the chunk ids has finished.</p>\n<h2 class="header"><a class="anchor" href="#record-chunks-chunks-chunk-records-" id="record-chunks-chunks-chunk-records-"></a><span class="text"><code>record-chunks(chunks: Chunk[], records)</code></span><a class="icon-link" href="#record-chunks-chunks-chunk-records-"></a></h2>\n<p>Store chunk info to the records.</p>\n<h2 class="header"><a class="anchor" href="#before-hash" id="before-hash"></a><span class="text"><code>before-hash</code></span><a class="icon-link" href="#before-hash"></a></h2>\n<p>Before the compilation is hashed.</p>\n<h2 class="header"><a class="anchor" href="#after-hash" id="after-hash"></a><span class="text"><code>after-hash</code></span><a class="icon-link" href="#after-hash"></a></h2>\n<p>After the compilation is hashed.</p>\n<h2 class="header"><a class="anchor" href="#before-chunk-assets" id="before-chunk-assets"></a><span class="text"><code>before-chunk-assets</code></span><a class="icon-link" href="#before-chunk-assets"></a></h2>\n<p>Before creating the chunk assets.</p>\n<h2 class="header"><a class="anchor" href="#additional-chunk-assets-chunks-chunk-" id="additional-chunk-assets-chunks-chunk-"></a><span class="text"><code>additional-chunk-assets(chunks: Chunk[])</code></span><a class="icon-link" href="#additional-chunk-assets-chunks-chunk-"></a></h2>\n<p>Create additional assets for the chunks.</p>\n<h2 class="header"><a class="anchor" href="#record-compilation-records-" id="record-compilation-records-"></a><span class="text"><code>record(compilation, records)</code></span><a class="icon-link" href="#record-compilation-records-"></a></h2>\n<p>Store info about the compilation to the records</p>\n<h2 class="header"><a class="anchor" href="#additional-assets-async" id="additional-assets-async"></a><span class="text"><code>additional-assets</code> async</span><a class="icon-link" href="#additional-assets-async"></a></h2>\n<p>Create additional assets for the compilation</p>\n<p>Here&#39;s an example that downloads an image.</p>\n<pre><code class="lang-js">compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'compilation\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'additional-assets\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">download</span><span class="token punctuation">(</span><span class="token string">\'https://img.shields.io/npm/v/webpack.svg\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">\'webpack-version.svg\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toAsset</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'[webpack-example-plugin] Unable to download the image\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize-chunk-assets-chunks-chunk-async" id="optimize-chunk-assets-chunks-chunk-async"></a><span class="text"><code>optimize-chunk-assets(chunks: Chunk[])</code> async</span><a class="icon-link" href="#optimize-chunk-assets-chunks-chunk-async"></a></h2>\n<p>Optimize the assets for the chunks.</p>\n<p>The assets are stored in <code>this.assets</code>, but not all of them are chunk assets. A <code>Chunk</code> has a property <code>files</code> which points to all files created by this chunk. The additional chunk assets are stored in <code>this.additionalChunkAssets</code>.</p>\n<p>Here&#39;s an example that simply adds a banner to each chunk.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"optimize-chunk-assets"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatSource</span><span class="token punctuation">(</span><span class="token string">"\\/**Sweet Banner**\\/"</span><span class="token punctuation">,</span> <span class="token string">"\\n"</span><span class="token punctuation">,</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#after-optimize-chunk-assets-chunks-chunk-" id="after-optimize-chunk-assets-chunks-chunk-"></a><span class="text"><code>after-optimize-chunk-assets(chunks: Chunk[])</code></span><a class="icon-link" href="#after-optimize-chunk-assets-chunks-chunk-"></a></h2>\n<p>The chunk assets have been optimized. Here&#39;s an example plugin from <a href="https://github.com/boopathi">@boopathi</a> that outputs exactly what went into each chunk.</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> PrintChunksPlugin <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nPrintChunksPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'compilation\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'after-optimize-chunk-assets\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          id<span class="token punctuation">:</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n          includes<span class="token punctuation">:</span> c<span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> m<span class="token punctuation">.</span>request<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#optimize-assets-assets-object-name-source-async" id="optimize-assets-assets-object-name-source-async"></a><span class="text"><code>optimize-assets(assets: Object{name: Source})</code> async</span><a class="icon-link" href="#optimize-assets-assets-object-name-source-async"></a></h2>\n<p>Optimize all assets.</p>\n<p>The assets are stored in <code>this.assets</code>.</p>\n<h2 class="header"><a class="anchor" href="#after-optimize-assets-assets-object-name-source-" id="after-optimize-assets-assets-object-name-source-"></a><span class="text"><code>after-optimize-assets(assets: Object{name: Source})</code></span><a class="icon-link" href="#after-optimize-assets-assets-object-name-source-"></a></h2>\n<p>The assets has been optimized.</p>\n<h2 class="header"><a class="anchor" href="#build-module-module-" id="build-module-module-"></a><span class="text"><code>build-module(module)</code></span><a class="icon-link" href="#build-module-module-"></a></h2>\n<p>Before a module build has started.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'build-module\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'About to build: \'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#succeed-module-module-" id="succeed-module-module-"></a><span class="text"><code>succeed-module(module)</code></span><a class="icon-link" href="#succeed-module-module-"></a></h2>\n<p>A module has been built successfully.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'succeed-module\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Successfully built: \'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#failed-module-module-" id="failed-module-module-"></a><span class="text"><code>failed-module(module)</code></span><a class="icon-link" href="#failed-module-module-"></a></h2>\n<p>The module build has failed.</p>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'failed-module\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Failed to build: \'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#module-asset-module-filename-" id="module-asset-module-filename-"></a><span class="text"><code>module-asset(module, filename)</code></span><a class="icon-link" href="#module-asset-module-filename-"></a></h2>\n<p>An asset from a module was added to the compilation.</p>\n<h2 class="header"><a class="anchor" href="#chunk-asset-chunk-filename-" id="chunk-asset-chunk-filename-"></a><span class="text"><code>chunk-asset(chunk, filename)</code></span><a class="icon-link" href="#chunk-asset-chunk-filename-"></a></h2>\n<p>An asset from a chunk was added to the compilation.</p>\n',title:"Compilation"},title:"Compilation",url:"/api/compilation/"},{file:{attributes:{title:"Module Factories",group:"Plugins",sort:5,anchors:[{title:"NormalModuleFactory",id:"normalmodulefactory"},{title:"ContextModuleFactory",id:"contextmodulefactory"}],contributors:[],related:[]},body:'<blockquote class="todo"><div class="tip-content"> Lead in... </div></blockquote><h2 class="header"><a class="anchor" href="#normalmodulefactory" id="normalmodulefactory"></a><span class="text"><code>NormalModuleFactory</code></span><a class="icon-link" href="#normalmodulefactory"></a></h2>\n<p><code>before-resolve(data)</code> async waterfall</p>\n<p>Before the factory starts resolving. The <code>data</code> object has these properties:</p>\n<ul>\n<li><code>context</code>: The absolute path of the directory for resolving.</li>\n<li><code>request</code>: The request of the expression.</li>\n</ul>\n<p>Plugins are allowed to modify the object or to pass a new similar object to the callback.</p>\n<p><code>after-resolve(data)</code> async waterfall</p>\n<p>After the factory has resolved the request. The <code>data</code> object has these properties:</p>\n<ul>\n<li><code>request</code>: The resolved request. It acts as an identifier for the NormalModule.</li>\n<li><code>userRequest</code>: The request the user entered. It&#39;s resolved, but does not contain pre or post loaders.</li>\n<li><code>rawRequest</code>: The unresolved request.</li>\n<li><code>loaders</code>: A array of resolved loaders. This is passed to the NormalModule and they will be executed.</li>\n<li><code>resource</code>: The resource. It will be loaded by the NormalModule.</li>\n<li><code>parser</code>: The parser that will be used by the NormalModule.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#contextmodulefactory" id="contextmodulefactory"></a><span class="text"><code>ContextModuleFactory</code></span><a class="icon-link" href="#contextmodulefactory"></a></h2>\n<p><code>before-resolve(data)</code> async waterfall</p>\n<blockquote class="todo"><div class="tip-content"> Add documentation. </div></blockquote><p><code>after-resolve(data)</code> async waterfall</p>\n<blockquote class="todo"><div class="tip-content"> Add documentation. </div></blockquote><p><code>alternatives(options: Array)</code> async waterfall</p>\n<blockquote class="todo"><div class="tip-content"> Add documentation. </div></blockquote>',title:"Module Factories"},title:"Module Factories",url:"/api/module-factories/"},{file:{attributes:{title:"Resolver",group:"Plugins",sort:5,anchors:[{title:"resolve(context: String, request: String)",id:"resolve-context-string-request-string-"},{title:"resolve-step(types: String[], request: Request)",id:"resolve-step-types-string-request-request-"},{title:"module(request: Request) async waterfall",id:"module-request-request-async-waterfall"},{title:"directory(request: Request) async waterfall",id:"directory-request-request-async-waterfall"},{title:"file(request: Request) async waterfall",id:"file-request-request-async-waterfall"},{title:"The plugins may offer more extensions points",id:"the-plugins-may-offer-more-extensions-points"},{title:"module-module",id:"module-module"},{title:"module-loader-module (only for loaders)",id:"module-loader-module-only-for-loaders-"}],contributors:[],related:[]},body:'<p>There are three types of resolvers, each used for different types of modules:</p>\n<ul>\n<li><code>compiler.resolvers.normal</code>: Resolve a normal module.</li>\n<li><code>compiler.resolvers.context</code>: Resolve a context module.</li>\n<li><code>compiler.resolvers.loader</code>: Resolve a loader.</li>\n</ul>\n<p>Any plugin should use <code>this.fileSystem</code> as fileSystem, as it&#39;s cached. It only has async named functions, but they may behave sync, if the user uses a sync file system implementation (i. e. in enhanced-require).</p>\n<p>To join paths any plugin should use <code>this.join</code>. It normalizes the paths. There is a <code>this.normalize</code> too.</p>\n<p>A bailing async <code>forEach</code> implementation is available on <code>this.forEachBail(array, iterator, callback)</code>.</p>\n<p>To pass the request to other resolving plugins, use the <code>this.doResolve(types: String|String[], request: Request, message: String, callback)</code> method. <code>types</code> are multiple possible request types that are tested in order of preference.</p>\n<pre><code class="lang-js"><span class="token keyword">interface</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> String <span class="token comment">// The current directory of the request</span>\n  request<span class="token punctuation">:</span> String <span class="token comment">// The current request string</span>\n  query<span class="token punctuation">:</span> String <span class="token comment">// The query string of the request, if any</span>\n  module<span class="token punctuation">:</span> boolean <span class="token comment">// The request begins with a module</span>\n  directory<span class="token punctuation">:</span> boolean <span class="token comment">// The request points to a directory</span>\n  file<span class="token punctuation">:</span> boolean <span class="token comment">// The request points to a file</span>\n  resolved<span class="token punctuation">:</span> boolean <span class="token comment">// The request is resolved/done</span>\n  <span class="token comment">// undefined means false for boolean fields</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Examples</span>\n<span class="token comment">// from /home/user/project/file.js: require("../test?charset=ascii")</span>\n<span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">"/home/user/project"</span><span class="token punctuation">,</span>\n  request<span class="token punctuation">:</span> <span class="token string">"../test"</span><span class="token punctuation">,</span>\n  query<span class="token punctuation">:</span> <span class="token string">"?charset=ascii"</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// from /home/user/project/file.js: require("test/test/")</span>\n<span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">"/home/user/project"</span><span class="token punctuation">,</span>\n  request<span class="token punctuation">:</span> <span class="token string">"test/test/"</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  directory<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-context-string-request-string-" id="resolve-context-string-request-string-"></a><span class="text"><code>resolve(context: String, request: String)</code></span><a class="icon-link" href="#resolve-context-string-request-string-"></a></h2>\n<p>Before the resolving process starts.</p>\n<h2 class="header"><a class="anchor" href="#resolve-step-types-string-request-request-" id="resolve-step-types-string-request-request-"></a><span class="text"><code>resolve-step(types: String[], request: Request)</code></span><a class="icon-link" href="#resolve-step-types-string-request-request-"></a></h2>\n<p>Before a single step in the resolving process starts.</p>\n<h2 class="header"><a class="anchor" href="#module-request-request-async-waterfall" id="module-request-request-async-waterfall"></a><span class="text"><code>module(request: Request)</code> async waterfall</span><a class="icon-link" href="#module-request-request-async-waterfall"></a></h2>\n<p>A module request is found and should be resolved.</p>\n<h2 class="header"><a class="anchor" href="#directory-request-request-async-waterfall" id="directory-request-request-async-waterfall"></a><span class="text"><code>directory(request: Request)</code> async waterfall</span><a class="icon-link" href="#directory-request-request-async-waterfall"></a></h2>\n<p>A directory request is found and should be resolved.</p>\n<h2 class="header"><a class="anchor" href="#file-request-request-async-waterfall" id="file-request-request-async-waterfall"></a><span class="text"><code>file(request: Request)</code> async waterfall</span><a class="icon-link" href="#file-request-request-async-waterfall"></a></h2>\n<p>A file request is found and should be resolved.</p>\n<h2 class="header"><a class="anchor" href="#the-plugins-may-offer-more-extensions-points" id="the-plugins-may-offer-more-extensions-points"></a><span class="text">The plugins may offer more extensions points</span><a class="icon-link" href="#the-plugins-may-offer-more-extensions-points"></a></h2>\n<p>Here is a list what the default plugins in webpack offer. They are all <code>(request: Request)</code> async waterfall.</p>\n<p>The process for normal modules and contexts is <code>module -&gt; module-module -&gt; directory -&gt; file</code>.</p>\n<p>The process for loaders is <code>module -&gt; module-loader-module -&gt; module-module -&gt; directory -&gt; file</code>.</p>\n<h2 class="header"><a class="anchor" href="#module-module" id="module-module"></a><span class="text"><code>module-module</code></span><a class="icon-link" href="#module-module"></a></h2>\n<p>A module should be looked up in a specified directory. <code>path</code> contains the directory.</p>\n<h2 class="header"><a class="anchor" href="#module-loader-module-only-for-loaders-" id="module-loader-module-only-for-loaders-"></a><span class="text"><code>module-loader-module</code> (only for loaders)</span><a class="icon-link" href="#module-loader-module-only-for-loaders-"></a></h2>\n<p>Used before module templates are applied to the module name. The process continues with <code>module-module</code>.</p>\n',title:"Resolver"},title:"Resolver",url:"/api/resolver/"},{file:{attributes:{title:"Parser",group:"Plugins",sort:8,anchors:[{title:"program(ast) bailing",id:"program-ast-bailing"},{title:"statement(statement: Statement) bailing",id:"statement-statement-statement-bailing"},{title:"call (expr: Expression) bailing",id:"call-expr-expression-bailing"},{title:"expression (expr: Expression) bailing",id:"expression-expr-expression-bailing"},{title:"expression ?:(expr: Expression) bailing",id:"expression-expr-expression-bailing"},{title:"typeof (expr: Expression) bailing",id:"typeof-expr-expression-bailing"},{title:"statement if(statement: Statement) bailing",id:"statement-if-statement-statement-bailing"},{title:"label (statement: Statement) bailing",id:"label-statement-statement-bailing"},{title:"var (statement: Statement) bailing",id:"var-statement-statement-bailing"},{title:"evaluate (expr: Expression) bailing",id:"evaluate-expr-expression-bailing"},{title:"evaluate typeof (expr: Expression) bailing",id:"evaluate-typeof-expr-expression-bailing"},{title:"evaluate Identifier (expr: Expression) bailing",id:"evaluate-identifier-expr-expression-bailing"},{title:"evaluate defined Identifier (expr: Expression) bailing",id:"evaluate-defined-identifier-expr-expression-bailing"},{title:"evaluate CallExpression .(expr: Expression) bailing",id:"evaluate-callexpression-expr-expression-bailing"}],contributors:[],related:[]},body:'<p>The parser instance takes a String and callback and will return an expression when there&#39;s a match.</p>\n<pre><code class="lang-javascript">compiler<span class="token punctuation">.</span>parser<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"var rewire"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//if you original module has \'var rewire\'</span>\n    <span class="token comment">//you now have a handle on the expresssion object</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#program-ast-bailing" id="program-ast-bailing"></a><span class="text"><code>program(ast)</code> bailing</span><a class="icon-link" href="#program-ast-bailing"></a></h2>\n<p>General purpose plugin interface for the AST of a code fragment.</p>\n<h2 class="header"><a class="anchor" href="#statement-statement-statement-bailing" id="statement-statement-statement-bailing"></a><span class="text"><code>statement(statement: Statement)</code> bailing</span><a class="icon-link" href="#statement-statement-statement-bailing"></a></h2>\n<p>General purpose plugin interface for the statements of the code fragment.</p>\n<h2 class="header"><a class="anchor" href="#call-expr-expression-bailing" id="call-expr-expression-bailing"></a><span class="text"><code>call &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#call-expr-expression-bailing"></a></h2>\n<p><code>abc(1)</code> =&gt; <code>call abc</code></p>\n<p><code>a.b.c(1)</code> =&gt; <code>call a.b.c</code></p>\n<h2 class="header"><a class="anchor" href="#expression-expr-expression-bailing" id="expression-expr-expression-bailing"></a><span class="text"><code>expression &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#expression-expr-expression-bailing"></a></h2>\n<p><code>abc</code> =&gt; <code>expression abc</code></p>\n<p><code>a.b.c</code> =&gt; <code>expression a.b.c</code></p>\n<h2 class="header"><a class="anchor" href="#expression-expr-expression-bailing" id="expression-expr-expression-bailing"></a><span class="text"><code>expression ?:(expr: Expression)</code> bailing</span><a class="icon-link" href="#expression-expr-expression-bailing"></a></h2>\n<p><code>(abc ? 1 : 2)</code> =&gt; <code>expression ?!</code></p>\n<p>Return a boolean value to omit parsing of the wrong path.</p>\n<h2 class="header"><a class="anchor" href="#typeof-expr-expression-bailing" id="typeof-expr-expression-bailing"></a><span class="text"><code>typeof &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#typeof-expr-expression-bailing"></a></h2>\n<p><code>typeof a.b.c</code> =&gt; <code>typeof a.b.c</code></p>\n<h2 class="header"><a class="anchor" href="#statement-if-statement-statement-bailing" id="statement-if-statement-statement-bailing"></a><span class="text"><code>statement if(statement: Statement)</code> bailing</span><a class="icon-link" href="#statement-if-statement-statement-bailing"></a></h2>\n<p><code>if(abc) {}</code> =&gt; <code>statement if</code></p>\n<p>Return a boolean value to omit parsing of the wrong path.</p>\n<h2 class="header"><a class="anchor" href="#label-statement-statement-bailing" id="label-statement-statement-bailing"></a><span class="text"><code>label &lt;labelname&gt;(statement: Statement)</code> bailing</span><a class="icon-link" href="#label-statement-statement-bailing"></a></h2>\n<p><code>xyz: abc</code> =&gt; <code>label xyz</code></p>\n<h2 class="header"><a class="anchor" href="#var-statement-statement-bailing" id="var-statement-statement-bailing"></a><span class="text"><code>var &lt;name&gt;(statement: Statement)</code> bailing</span><a class="icon-link" href="#var-statement-statement-bailing"></a></h2>\n<p><code>var abc, def</code> =&gt; <code>var abc</code> + <code>var def</code></p>\n<p>Return <code>false</code> to not add the variable to the known definitions.</p>\n<h2 class="header"><a class="anchor" href="#evaluate-expr-expression-bailing" id="evaluate-expr-expression-bailing"></a><span class="text"><code>evaluate &lt;expression type&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-expr-expression-bailing"></a></h2>\n<p>Evaluate an expression.</p>\n<h2 class="header"><a class="anchor" href="#evaluate-typeof-expr-expression-bailing" id="evaluate-typeof-expr-expression-bailing"></a><span class="text"><code>evaluate typeof &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-typeof-expr-expression-bailing"></a></h2>\n<p>Evaluate the type of an identifier.</p>\n<h2 class="header"><a class="anchor" href="#evaluate-identifier-expr-expression-bailing" id="evaluate-identifier-expr-expression-bailing"></a><span class="text"><code>evaluate Identifier &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-identifier-expr-expression-bailing"></a></h2>\n<p>Evaluate a identifier that is a free var.</p>\n<h2 class="header"><a class="anchor" href="#evaluate-defined-identifier-expr-expression-bailing" id="evaluate-defined-identifier-expr-expression-bailing"></a><span class="text"><code>evaluate defined Identifier &lt;identifier&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-defined-identifier-expr-expression-bailing"></a></h2>\n<p>Evaluate a identifier that is a defined var.</p>\n<h2 class="header"><a class="anchor" href="#evaluate-callexpression-expr-expression-bailing" id="evaluate-callexpression-expr-expression-bailing"></a><span class="text"><code>evaluate CallExpression .&lt;property&gt;(expr: Expression)</code> bailing</span><a class="icon-link" href="#evaluate-callexpression-expr-expression-bailing"></a></h2>\n<p>Evaluate a call to a member function of a successfully evaluated expression.</p>\n',title:"Parser"},title:"Parser",url:"/api/parser/"},{file:{attributes:{title:"Templates",group:"Plugins",sort:8,anchors:[{title:"MainTemplate",id:"maintemplate"},{title:"startup(source, module, hash)",id:"startup-source-module-hash-"},{title:"ModuleTemplate",id:"moduletemplate"},{title:"ChunkTemplate",id:"chunktemplate"},{title:"FunctionModuleTemplate",id:"functionmoduletemplate"},{title:"HotUpdateChunkTemplate",id:"hotupdatechunktemplate"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#maintemplate" id="maintemplate"></a><span class="text">MainTemplate</span><a class="icon-link" href="#maintemplate"></a></h2>\n<h3 class="header"><a class="anchor" href="#startup-source-module-hash-" id="startup-source-module-hash-"></a><span class="text"><code>startup(source, module, hash)</code></span><a class="icon-link" href="#startup-source-module-hash-"></a></h3>\n<pre><code class="lang-js">compilation<span class="token punctuation">.</span>mainTemplate<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'startup\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> module<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'__ReactStyle__\'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> originName <span class="token operator">=</span> module<span class="token punctuation">.</span>origins <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>origins<span class="token punctuation">.</span>length <span class="token operator">?</span> module<span class="token punctuation">.</span>origins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">:</span> <span class="token string">\'main\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token string">\'if (typeof window !== "undefined") {\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'  window.__ReactStyle__ = \'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>classNames<span class="token punctuation">[</span>originName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\';\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'}\'</span>\n    <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> source<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> source<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#moduletemplate" id="moduletemplate"></a><span class="text">ModuleTemplate</span><a class="icon-link" href="#moduletemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>ModuleTemplate</code>... </div></blockquote><h2 class="header"><a class="anchor" href="#chunktemplate" id="chunktemplate"></a><span class="text">ChunkTemplate</span><a class="icon-link" href="#chunktemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>ChunkTemplate</code>... </div></blockquote><h2 class="header"><a class="anchor" href="#functionmoduletemplate" id="functionmoduletemplate"></a><span class="text">FunctionModuleTemplate</span><a class="icon-link" href="#functionmoduletemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>FunctionModuleTemplate</code>... </div></blockquote><h2 class="header"><a class="anchor" href="#hotupdatechunktemplate" id="hotupdatechunktemplate"></a><span class="text">HotUpdateChunkTemplate</span><a class="icon-link" href="#hotupdatechunktemplate"></a></h2>\n<blockquote class="todo"><div class="tip-content"> Document the <code>HotUpdateChunkTemplate</code>... </div></blockquote>',title:"Templates"},title:"Templates",url:"/api/template/"}]},{title:"Guides",url:"guides",pages:[{file:{attributes:{title:"Installation",sort:1,contributors:["bebraw","pksjce","simon04"],group:"-",anchors:[{title:"Pre-requisites",id:"pre-requisites"},{title:"Local Installation",id:"local-installation"},{title:"Global Installation",id:"global-installation"},{title:"Bleeding Edge",id:"bleeding-edge"}],related:[]},body:'<p>This guide goes through the various methods used to install webpack.</p>\n<h2 class="header"><a class="anchor" href="#pre-requisites" id="pre-requisites"></a><span class="text">Pre-requisites</span><a class="icon-link" href="#pre-requisites"></a></h2>\n<p>Before we begin, make sure you have a fresh version of <a href="https://nodejs.org/en/">Node.js</a> installed. The current Long Term Support (LTS) release is an ideal starting point. You may run into a variety of issues with the older versions as they may be missing functionality webpack and/or its related packages require.</p>\n<h2 class="header"><a class="anchor" href="#local-installation" id="local-installation"></a><span class="text">Local Installation</span><a class="icon-link" href="#local-installation"></a></h2>\n<p>The latest webpack release is:</p>\n<p><a href="https://github.com/webpack/webpack/releases"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="GitHub release"></a></p>\n<p>To install the latest release or a specific version, run one of the following commands:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack\nnpm <span class="token function">install</span> --save-dev webpack@<span class="token operator">&lt;</span>version<span class="token operator">></span>\n</code></pre>\n<p>Installing locally is what we recommend for most projects. This makes it easier to upgrade projects individually when breaking changes are introduced. Typically webpack is run via one or more <a href="https://docs.npmjs.com/misc/scripts">npm scripts</a> which will look for a webpack installation in your local <code>node_modules</code> directory:</p>\n<pre><code class="lang-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.config.js"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> To run the local installation of webpack you can access its bin version as <code>node_modules/.bin/webpack</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#global-installation" id="global-installation"></a><span class="text">Global Installation</span><a class="icon-link" href="#global-installation"></a></h2>\n<p>The following NPM installation will make <code>webpack</code> available globally:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --global webpack\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Note that this is <strong>not a recommended practice</strong>. Installing globally locks you down to a specific version of webpack and could fail in projects that use a different version. </div></blockquote><h2 class="header"><a class="anchor" href="#bleeding-edge" id="bleeding-edge"></a><span class="text">Bleeding Edge</span><a class="icon-link" href="#bleeding-edge"></a></h2>\n<p>If you are enthusiastic about using the latest that webpack has to offer, you can install beta versions or even directly from the webpack repository using the following commands:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> webpack@beta\nnpm <span class="token function">install</span> webpack/webpack<span class="token comment">#&lt;tagname/branchname></span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Take caution when installing these bleeding edge releases! They may still contain bugs and therefore should not be used in production. </div></blockquote>',title:"Installation"},title:"Installation",url:"/guides/installation/"},{file:{attributes:{title:"Getting Started",sort:2,contributors:["TheDutchCoder","Vanguard90","aaronang","bebraw","chrisVillanueva","cntanglijun","jecoopr","johnstew","simon04","sudarsangp","varunjayaraman"],group:"-",anchors:[{title:"Basic Setup",id:"basic-setup"},{title:"Creating a Bundle",id:"creating-a-bundle"},{title:"Modules",id:"modules"},{title:"Using a Configuration",id:"using-a-configuration"},{title:"NPM Scripts",id:"npm-scripts"},{title:"Conclusion",id:"conclusion"}],related:[]},body:'<p>As you may already know, webpack is used to compile JavaScript modules. Once <a href="/guides/installation">installed</a>, you can interface with webpack either from its <a href="/api/cli">CLI</a> or <a href="/api/node">API</a>. If you&#39;re still new to webpack, please read through the <a href="/concepts">core concepts</a> and <a href="/comparison">this comparison</a> to learn why you might use it over the other tools that are out in the community.</p>\n<h2 class="header"><a class="anchor" href="#basic-setup" id="basic-setup"></a><span class="text">Basic Setup</span><a class="icon-link" href="#basic-setup"></a></h2>\n<p>First let&#39;s create a directory, initialize npm, and <a href="/guides/installation#local-installation">install webpack locally</a>:</p>\n<pre><code class="lang-bash"><span class="token function">mkdir</span> webpack-demo <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> webpack-demo\nnpm init -y\nnpm <span class="token function">install</span> --save-dev webpack\n</code></pre>\n<p>Now we&#39;ll create the following directory structure and contents:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- index.html</span>\n<span class="token inserted">+ |- /src</span>\n<span class="token inserted">+   |- index.js</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Lodash, currently included via a script, is required for this line to work</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>index.html</strong></p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Getting Started<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/lodash@4.16.6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>In this example, there are implicit dependencies between the <code>&lt;script&gt;</code> tags. Our <code>index.js</code> file depends on <code>lodash</code> being included in the page before it runs. This is because <code>index.js</code> never declared a need for <code>lodash</code>; it just assumes that the global variable <code>_</code> exists.</p>\n<p>There are problems with managing JavaScript projects this way:</p>\n<ul>\n<li>It is not immediately apparent that the script depends on an external library.</li>\n<li>If a dependency is missing, or included in the wrong order, the application will not function properly.</li>\n<li>If a dependency is included but not used, the browser will be forced to download unnecessary code.</li>\n</ul>\n<p>Let&#39;s use webpack to manage these scripts instead.</p>\n<h2 class="header"><a class="anchor" href="#creating-a-bundle" id="creating-a-bundle"></a><span class="text">Creating a Bundle</span><a class="icon-link" href="#creating-a-bundle"></a></h2>\n<p>First we&#39;ll tweak our directory structure slightly, separating the &quot;source&quot; code (<code>/src</code>) from our &quot;distribution&quot; code (<code>/dist</code>). The  &quot;source&quot; code is the code that we&#39;ll write and edit. The &quot;distribution&quot; code is the minimized and optimized <code>output</code> of our build process that will eventually be loaded in the browser:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- /dist</span>\n<span class="token inserted">+   |- index.html</span>\n<span class="token deleted">- |- index.html</span>\n  |- /src\n    |- index.js\n</code></pre>\n<p>To bundle the <code>lodash</code> dependency with <code>index.js</code>, we&#39;ll need to install the library locally...</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save lodash\n</code></pre>\n<p>and then import it in our script...</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ import _ from \'lodash\';</span>\n+\n  function component() {\n    var element = document.createElement(\'div\');\n\n<span class="token deleted">-   // Lodash, currently included via a script, is required for this line to work</span>\n<span class="token inserted">+   // Lodash, now imported by this script</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>Now, since we&#39;ll be bundling our scripts, we have to update our <code>index.html</code> file. Let&#39;s remove the lodash <code>&lt;script&gt;</code>, as we now <code>import</code> it, and modify the other <code>&lt;script&gt;</code> tag to load the bundle, instead of the raw <code>/src</code> file:</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n   &lt;head>\n     &lt;title>Getting Started&lt;/title>\n<span class="token deleted">-    &lt;script src="https://unpkg.com/lodash@4.16.6">&lt;/script></span>\n   &lt;/head>\n   &lt;body>\n<span class="token deleted">-    &lt;script src="./src/index.js">&lt;/script></span>\n<span class="token inserted">+    &lt;script src="bundle.js">&lt;/script></span>\n   &lt;/body>\n  &lt;/html>\n</code></pre>\n<p>In this setup, <code>index.js</code> explicitly requires <code>lodash</code> to be present, and binds it as <code>_</code> (no global scope pollution). By stating what dependencies a module needs, webpack can use this information to build a dependency graph. It then uses the graph to generate an optimized bundle where scripts will be executed in the correct order.</p>\n<p>With that said, let&#39;s run <code>npx webpack</code> with our script as the <a href="/concepts/entry-points">entry point</a> and <code>bundle.js</code> as the <a href="/concepts/output">output</a>. The <code>npx</code> command, which ships with Node 8.2 or higher, runs the webpack binary (<code>./node_modules/.bin/webpack</code>) of the webpack package we installed in the beginning:</p>\n<pre><code class="lang-bash">npx webpack src/index.js dist/bundle.js\n\nHash: 857f878815ce63ad5b4f\nVersion: webpack 3.9.1\nTime: 332ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 222 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Your output may vary a bit, but if the build is successful then you are good to go. </div></blockquote><p>Open <code>index.html</code> in your browser and, if everything went right, you should see the following text: &#39;Hello webpack&#39;.</p>\n<h2 class="header"><a class="anchor" href="#modules" id="modules"></a><span class="text">Modules</span><a class="icon-link" href="#modules"></a></h2>\n<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a> statements have been standardized in <a href="https://babeljs.io/learn-es2015/">ES2015</a>. Although they are not supported in most browsers yet, webpack does support them out of the box.</p>\n<p>Behind the scenes, webpack actually &quot;transpiles&quot; the code so that older browsers can also run it. If you inspect <code>dist/bundle.js</code>, you might be able to see how webpack does this, it&#39;s quite ingenious! Besides <code>import</code> and <code>export</code>, webpack supports various other module syntaxes as well, see <a href="/api/module-methods">Module API</a> for more information.</p>\n<p>Note that webpack will not alter any code other than <code>import</code> and <code>export</code> statements. If you are using other <a href="http://es6-features.org/">ES2015 features</a>, make sure to <a href="/loaders/#transpiling">use a transpiler</a> such as <a href="https://babeljs.io/">Babel</a> or <a href="https://buble.surge.sh/guide/">Bublé</a> via webpack&#39;s <a href="/concepts/loaders/">loader system</a>.</p>\n<h2 class="header"><a class="anchor" href="#using-a-configuration" id="using-a-configuration"></a><span class="text">Using a Configuration</span><a class="icon-link" href="#using-a-configuration"></a></h2>\n<p>Most projects will need a more complex setup, which is why webpack supports a <a href="/concepts/configuration">configuration file</a>. This is much more efficient than having to type in a lot of commands in the terminal, so let&#39;s create one to replace the CLI options used above:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- webpack.config.js</span>\n  |- /dist\n    |- index.html\n  |- /src\n    |- index.js\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Now, let&#39;s run the build again but instead using our new configuration:</p>\n<pre><code class="lang-bash">npx webpack --config webpack.config.js\n\nHash: 857f878815ce63ad5b4f\nVersion: webpack 3.9.1\nTime: 298ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 222 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Note that when calling <code>webpack</code> via its path on windows, you must use backslashes instead, e.g. <code>node_modules\\.bin\\webpack --config webpack.config.js</code>. </div></blockquote><blockquote class="tip"><div class="tip-content"> If a <code>webpack.config.js</code> is present, the <code>webpack</code> command picks it up by default. We use the <code>--config</code> option here only to show that you can pass a config of any name. This will be useful for more complex configurations that need to be split into multiple files. </div></blockquote><p>A configuration file allows far more flexibility than simple CLI usage. We can specify loader rules, plugins, resolve options and many other enhancements this way. See the <a href="/configuration">configuration documentation</a> to learn more.</p>\n<h2 class="header"><a class="anchor" href="#npm-scripts" id="npm-scripts"></a><span class="text">NPM Scripts</span><a class="icon-link" href="#npm-scripts"></a></h2>\n<p>Given it&#39;s not particularly fun to run a local copy of webpack from the CLI, we can set up a little shortcut. Let&#39;s adjust our <em>package.json</em> by adding an <a href="https://docs.npmjs.com/misc/scripts">npm script</a>:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Now the <code>npm run build</code> command can be used in place of the <code>npx</code> command we used earlier. Note that within <code>scripts</code> we can reference locally installed npm packages by name the same way we did with <code>npx</code>. This convention is the standard in most npm-based projects because it allows all contributors to use the same set of common scripts (each with flags like <code>--config</code> if necessary).</p>\n<p>Now run the following command and see if your script alias works:</p>\n<pre><code class="lang-bash">npm run build\n\nHash: 857f878815ce63ad5b4f\nVersion: webpack 3.9.1\nTime: 294ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 222 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Custom parameters can be passed to webpack by adding two dashes between the <code>npm run build</code> command and your parameters, e.g. <code>npm run build -- --colors</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>Now that you have a basic build together you should move on to the next guide <a href="/guides/asset-management"><code>Asset Management</code></a> to learn how to manage assets like images and fonts with webpack. At this point, your project should look like this:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n  |- bundle.js\n  |- index.html\n|- /src\n  |- index.js\n|- /node_modules\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> If you&#39;re using npm 5, you&#39;ll probably also see a <code>package-lock.json</code> file in your directory. </div></blockquote><p>If you want to learn more about webpack&#39;s design, you can check out the <a href="/concepts">basic concepts</a> and <a href="/configuration">configuration</a> pages. Furthermore, the <a href="/api">API</a> section digs into the various interfaces webpack offers.</p>\n',title:"Getting Started"},title:"Getting Started",url:"/guides/getting-started/"},{file:{attributes:{title:"Asset Management",sort:3,contributors:["TheDutchCoder","michael-ciniawsky","skipjack","sudarsangp"],group:"-",anchors:[{title:"Setup",id:"setup"},{title:"Loading CSS",id:"loading-css"},{title:"Loading Images",id:"loading-images"},{title:"Loading Fonts",id:"loading-fonts"},{title:"Loading Data",id:"loading-data"},{title:"Global Assets",id:"global-assets"},{title:"Wrapping up",id:"wrapping-up"},{title:"Next guide",id:"next-guide"},{title:"Further Reading",id:"further-reading"}],related:[]},body:'<p>If you&#39;ve been following the guides from the start, you will now have a small project that shows &quot;Hello webpack&quot;. Now let&#39;s try to incorporate some other assets, like images, to see how they can be handled.</p>\n<p>Prior to webpack, front-end developers would use tools like grunt and gulp to process these assets and move them from their <code>/src</code> folder into their <code>/dist</code> or <code>/build</code> directory. The same idea was used for JavaScript modules, but tools like webpack will <strong>dynamically bundle</strong> all dependencies (creating what&#39;s known as a <a href="/concepts/dependency-graph">dependency graph</a>). This is great because every module now <em>explicitly states its dependencies</em> and we&#39;ll avoid bundling modules that aren&#39;t in use.</p>\n<p>One of the coolest webpack features is that you can also <em>include any other type of file</em>, besides JavaScript, for which there is a loader. This means that the same benefits listed above for JavaScript (e.g. explicit dependencies) can be applied to everything used in building a website or web app. Let&#39;s start with CSS, as you may already be familiar with that setup.</p>\n<h2 class="header"><a class="anchor" href="#setup" id="setup"></a><span class="text">Setup</span><a class="icon-link" href="#setup"></a></h2>\n<p>Let&#39;s make a minor change to our project before we get started:</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n    &lt;head>\n<span class="token deleted">-    &lt;title>Getting Started&lt;/title></span>\n<span class="token inserted">+    &lt;title>Asset Management&lt;/title></span>\n    &lt;/head>\n    &lt;body>\n      &lt;script src="./bundle.js">&lt;/script>\n    &lt;/body>\n  &lt;/html>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#loading-css" id="loading-css"></a><span class="text">Loading CSS</span><a class="icon-link" href="#loading-css"></a></h2>\n<p>In order to <code>import</code> a CSS file from within a JavaScript module, you need to install and add the <a href="/loaders/style-loader">style-loader</a> and <a href="/loaders/css-loader">css-loader</a> to your <a href="/configuration/module"><code>module</code> configuration</a>:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev style-loader css-loader\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.css$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'style-loader\',</span>\n<span class="token inserted">+           \'css-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   }</span>\n  };\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> webpack uses a regular expression to determine which files it should look for and serve to a specific loader. In this case any file that ends with <code>.css</code> will be served to the <code>style-loader</code> and the <code>css-loader</code>. </div></blockquote><p>This enables you to <code>import &#39;./style.css&#39;</code> into the file that depends on that styling. Now, when that module is run, a <code>&lt;style&gt;</code> tag with the stringified css will be inserted into the <code>&lt;head&gt;</code> of your html file.</p>\n<p>Let&#39;s try it out by adding a new <code>style.css</code> file to our project and import it in our <code>index.js</code>:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- style.css</span>\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>src/style.css</strong></p>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">.hello</span> </span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import \'./style.css\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.classList.add(\'hello\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>Now run your build command:</p>\n<pre><code class="lang-bash">npm run build\n\nHash: 9a3abfc96300ef87880f\nVersion: webpack 2.6.1\nTime: 834ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  560 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/style.css 1 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./~/css-loader<span class="token operator">!</span>./src/style.css 191 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./~/css-loader/lib/css-base.js 2.26 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./~/style-loader/lib/addStyles.js 8.7 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> ./~/style-loader/lib/urls.js 3.01 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>6<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>7<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>8<span class="token punctuation">]</span> ./src/index.js 351 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>Open up <code>index.html</code> in your browser again and you should see that <code>Hello webpack</code> is now styled in red. To see what webpack did, inspect the page (don&#39;t view the page source, as it won&#39;t show you the result) and look at the page&#39;s head tags. It should contain our style block that we imported in <code>index.js</code>.</p>\n<p>Note that you can, and in most cases should, <a href="/plugins/extract-text-webpack-plugin">split your CSS</a> for better load times in production. On top of that, loaders exist for pretty much any flavor of CSS you can think of -- <a href="/loaders/postcss-loader">postcss</a>, <a href="/loaders/sass-loader">sass</a>, and <a href="/loaders/less-loader">less</a> to name a few.</p>\n<h2 class="header"><a class="anchor" href="#loading-images" id="loading-images"></a><span class="text">Loading Images</span><a class="icon-link" href="#loading-images"></a></h2>\n<p>So now we&#39;re pulling in our CSS, but what about our images like backgrounds and icons? Using the <a href="/loaders/file-loader">file-loader</a> we can easily incorporate those in our system as well:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev file-loader\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ]\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(png|svg|jpg|gif)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'file-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n      ]\n    }\n  };\n</code></pre>\n<p>Now, when you <code>import MyImage from &#39;./my-image.png&#39;</code>, that image will be processed and added to your <code>output</code> directory <em>and</em> the <code>MyImage</code> variable will contain the final url of that image after processing. When using the <a href="/loaders/css-loader">css-loader</a>, as shown above, a similar process will occur for <code>url(&#39;./my-image.png&#39;)</code> within your CSS. The loader will recognize this is a local file, and replace the <code>&#39;./my-image.png&#39;</code> path with the final path to the image in your <code>output</code> directory. The <a href="/loaders/html-loader">html-loader</a> handles <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code> in the same manner.</p>\n<p>Let&#39;s add an image to our project and see how this works, you can use any image you like:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- icon.png</span>\n    |- style.css\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import \'./style.css\';\n<span class="token inserted">+ import Icon from \'./icon.png\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n    element.classList.add(\'hello\');\n\n<span class="token inserted">+   // Add the image to our existing div.</span>\n<span class="token inserted">+   var myIcon = new Image();</span>\n<span class="token inserted">+   myIcon.src = Icon;</span>\n+\n<span class="token inserted">+   element.appendChild(myIcon);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>src/style.css</strong></p>\n<pre><code class="lang-diff">  .hello {\n    color: red;\n<span class="token inserted">+   background: url(\'./icon.png\');</span>\n  }\n</code></pre>\n<p>Let&#39;s create a new build and open up the index.html file again:</p>\n<pre><code class="lang-bash">npm run build\n\nHash: 854865050ea3c1c7f237\nVersion: webpack 2.6.1\nTime: 895ms\n                               Asset     Size  Chunks                    Chunk Names\n5c999da72346a995e7e2718865d019c8.png  11.3 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n                           bundle.js   561 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/icon.png 82 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/style.css 1 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./~/css-loader<span class="token operator">!</span>./src/style.css 242 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./~/css-loader/lib/css-base.js 2.26 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> ./~/style-loader/lib/addStyles.js 8.7 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>6<span class="token punctuation">]</span> ./~/style-loader/lib/urls.js 3.01 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>7<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>8<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>9<span class="token punctuation">]</span> ./src/index.js 503 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>If all went well, you should now see your icon as a repeating background, as well as an <code>img</code> element beside our <code>Hello webpack</code> text. If you inspect this element, you&#39;ll see that the actual filename has changed to something like <code>5c999da72346a995e7e2718865d019c8.png</code>. This means webpack found our file in the <code>src</code> folder and processed it!</p>\n<blockquote class="tip"><div class="tip-content"> A logical next step from here is minifying and optimizing your images. Check out the <a href="https://github.com/tcoopman/image-webpack-loader">image-webpack-loader</a> and <a href="/loaders/url-loader">url-loader</a> for more on how you can enhance your image loading process. </div></blockquote><h2 class="header"><a class="anchor" href="#loading-fonts" id="loading-fonts"></a><span class="text">Loading Fonts</span><a class="icon-link" href="#loading-fonts"></a></h2>\n<p>So what about other assets like fonts? The file and url loaders will take any file you load through them and output it to your build directory. This means we can use them for any kind of file, including fonts. Let&#39;s update our <code>webpack.config.js</code> to handle font files:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ]\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            \'file-loader\'\n          ]\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(woff|woff2|eot|ttf|otf)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'file-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n      ]\n    }\n  };\n</code></pre>\n<p>Add some font files to your project:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- my-font.woff</span>\n<span class="token inserted">+   |- my-font.woff2</span>\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p>With the loader configured and fonts in place, you can use incorporate them via an <code>@font-face</code> declaration. The local <code>url(...)</code> directive will be picked up by webpack just as it was with the image:</p>\n<p><strong>src/style.css</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ @font-face {</span>\n<span class="token inserted">+   font-family: \'MyFont\';</span>\n<span class="token inserted">+   src:  url(\'./my-font.woff2\') format(\'woff2\'),</span>\n<span class="token inserted">+         url(\'./my-font.woff\') format(\'woff\');</span>\n<span class="token inserted">+   font-weight: 600;</span>\n<span class="token inserted">+   font-style: normal;</span>\n<span class="token inserted">+ }</span>\n\n  .hello {\n    color: red;\n<span class="token inserted">+   font-family: \'MyFont\';</span>\n    background: url(\'./icon.png\');\n  }\n</code></pre>\n<p>Now run a new build and let&#39;s see if webpack handled our fonts:</p>\n<pre><code class="lang-bash">npm run build\n\nHash: b4aef94169088c79ed1c\nVersion: webpack 2.6.1\nTime: 775ms\n                                Asset     Size  Chunks                    Chunk Names\n 5c999da72346a995e7e2718865d019c8.png  11.3 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n11aebbbd407bcc3ab1e914ca0238d24d.woff   221 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n                            bundle.js   561 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/icon.png 82 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./src/style.css 1 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./~/css-loader<span class="token operator">!</span>./src/style.css 420 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./~/css-loader/lib/css-base.js 2.26 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> ./src/MyFont.woff 83 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>6<span class="token punctuation">]</span> ./~/style-loader/lib/addStyles.js 8.7 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>7<span class="token punctuation">]</span> ./~/style-loader/lib/urls.js 3.01 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>8<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>9<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n  <span class="token punctuation">[</span>10<span class="token punctuation">]</span> ./src/index.js 503 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>Open up <code>index.html</code> again and see if our <code>Hello webpack</code> text has changed to the new font. If all is well, you should see the changes.</p>\n<h2 class="header"><a class="anchor" href="#loading-data" id="loading-data"></a><span class="text">Loading Data</span><a class="icon-link" href="#loading-data"></a></h2>\n<p>Another useful asset that can be loaded is data, like JSON files, CSVs, TSVs, and XML. Support for JSON is actually built-in, similar to NodeJS, meaning <code>import Data from &#39;./data.json&#39;</code> will work by default. To import CSVs, TSVs, and XML you could use the <a href="https://github.com/theplatapi/csv-loader">csv-loader</a> and <a href="https://github.com/gisikw/xml-loader">xml-loader</a>. Let&#39;s handle loading all three:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev csv-loader xml-loader\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            \'style-loader\',\n            \'css-loader\'\n          ]\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            \'file-loader\'\n          ]\n        },\n        {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/,\n          use: [\n            \'file-loader\'\n          ]\n        },\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.(csv|tsv)$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'csv-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.xml$/,</span>\n<span class="token inserted">+         use: [</span>\n<span class="token inserted">+           \'xml-loader\'</span>\n<span class="token inserted">+         ]</span>\n<span class="token inserted">+       }</span>\n      ]\n    }\n  };\n</code></pre>\n<p>Add some data files to your project:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token inserted">+   |- data.xml</span>\n    |- my-font.woff\n    |- my-font.woff2\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>src/data.xml</strong></p>\n<pre><code class="lang-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Call Cindy on Tuesday<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>Now you can <code>import</code> any one of those four types of data (JSON, CSV, TSV, XML) and the <code>Data</code> variable you import it to will contain parsed JSON for easy consumption:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import \'./style.css\';\n  import Icon from \'./icon.png\';\n<span class="token inserted">+ import Data from \'./data.xml\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n    element.classList.add(\'hello\');\n\n    // Add the image to our existing div.\n    var myIcon = new Image();\n    myIcon.src = Icon;\n\n    element.appendChild(myIcon);\n\n<span class="token inserted">+   console.log(Data);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>When you open <code>index.html</code> and look at your console in your developer tools, you should be able to see your imported data being logged to the console!</p>\n<blockquote class="tip"><div class="tip-content"> This can be especially helpful when implementing some sort of data visualization using a tool like <a href="https://github.com/d3">d3</a>. Instead of making an ajax request and parsing the data at runtime you can load it into your module during the build process so that the parsed data is ready to go as soon as the module hits the browser. </div></blockquote><h2 class="header"><a class="anchor" href="#global-assets" id="global-assets"></a><span class="text">Global Assets</span><a class="icon-link" href="#global-assets"></a></h2>\n<p>The coolest part of everything mentioned above, is that loading assets this way allows you to group modules and assets together in a more intuitive way. Instead of relying on a global <code>/assets</code> directory that contains everything, you can group assets with the code that uses them. For example, a structure like this can be very useful:</p>\n<pre><code class="lang-diff"><span class="token deleted">- |- /assets</span>\n<span class="token inserted">+ |– /components</span>\n<span class="token inserted">+ |  |– /my-component</span>\n<span class="token inserted">+ |  |  |– index.jsx</span>\n<span class="token inserted">+ |  |  |– index.css</span>\n<span class="token inserted">+ |  |  |– icon.svg</span>\n<span class="token inserted">+ |  |  |– img.png</span>\n</code></pre>\n<p>This setup makes your code a lot more portable as everything that is closely coupled now lives together. Let&#39;s say you want to use <code>/my-component</code> in another project, simply copy or move it into the <code>/components</code> directory over there. As long as you&#39;ve installed any <em>external dependencies</em> and your <em>configuration has the same loaders</em> defined, you should be good to go.</p>\n<p>However, let&#39;s say you&#39;re locked into your old ways or you have some assets that are shared between multiple components (views, templates, modules, etc.). It&#39;s still possible to store these assets in a base directory and even use <a href="/configuration/resolve#resolve-alias">aliasing</a> to make them easier to <code>import</code>.</p>\n<h2 class="header"><a class="anchor" href="#wrapping-up" id="wrapping-up"></a><span class="text">Wrapping up</span><a class="icon-link" href="#wrapping-up"></a></h2>\n<p>For the next guides we won&#39;t be using all the different assets we&#39;ve used in this guide, so let&#39;s do some cleanup so we&#39;re prepared for the next piece of the guides <a href="https://webpack.js.org/guides/output-management/">Output Management</a>:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n<span class="token deleted">-   |- data.xml</span>\n<span class="token deleted">-   |- my-font.woff</span>\n<span class="token deleted">-   |- my-font.woff2</span>\n<span class="token deleted">-   |- icon.png</span>\n<span class="token deleted">-   |- style.css</span>\n    |- index.js\n  |- /node_modules\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n<span class="token deleted">-   module: {</span>\n<span class="token deleted">-     rules: [</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.css$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'style-loader\',</span>\n<span class="token deleted">-           \'css-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(png|svg|jpg|gif)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'file-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(woff|woff2|eot|ttf|otf)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'file-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.(csv|tsv)$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'csv-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       },</span>\n<span class="token deleted">-       {</span>\n<span class="token deleted">-         test: /\\.xml$/,</span>\n<span class="token deleted">-         use: [</span>\n<span class="token deleted">-           \'xml-loader\'</span>\n<span class="token deleted">-         ]</span>\n<span class="token deleted">-       }</span>\n<span class="token deleted">-     ]</span>\n<span class="token deleted">-   }</span>\n  };\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token deleted">- import \'./style.css\';</span>\n<span class="token deleted">- import Icon from \'./icon.png\';</span>\n<span class="token deleted">- import Data from \'./data.xml\';</span>\n-\n  function component() {\n    var element = document.createElement(\'div\');\n-\n<span class="token deleted">-   // Lodash, now imported by this script</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token deleted">-   element.classList.add(\'hello\');</span>\n-\n<span class="token deleted">-   // Add the image to our existing div.</span>\n<span class="token deleted">-   var myIcon = new Image();</span>\n<span class="token deleted">-   myIcon.src = Icon;</span>\n-\n<span class="token deleted">-   element.appendChild(myIcon);</span>\n-\n<span class="token deleted">-   console.log(Data);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<h2 class="header"><a class="anchor" href="#next-guide" id="next-guide"></a><span class="text">Next guide</span><a class="icon-link" href="#next-guide"></a></h2>\n<p>Let&#39;s move on to <a href="https://webpack.js.org/guides/output-management/">Output Management</a></p>\n<h2 class="header"><a class="anchor" href="#further-reading" id="further-reading"></a><span class="text">Further Reading</span><a class="icon-link" href="#further-reading"></a></h2>\n<ul>\n<li><a href="https://survivejs.com/webpack/loading/fonts/">Loading Fonts</a> on SurviveJS</li>\n</ul>\n',title:"Asset Management"},title:"Asset Management",url:"/guides/asset-management/"},{file:{attributes:{title:"Output Management",sort:4,contributors:["JGJP","TheDutchCoder","skipjack","sudarsangp"],group:"-",anchors:[{title:"Preparation",id:"preparation"},{title:"Setting up HtmlWebpackPlugin",id:"setting-up-htmlwebpackplugin"},{title:"Cleaning up the /dist folder",id:"cleaning-up-the-dist-folder"},{title:"The Manifest",id:"the-manifest"},{title:"Conclusion",id:"conclusion"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> This guide extends on code examples found in the <a href="/guides/asset-management"><code>Asset Management</code></a> guide. </div></blockquote><p>So far we&#39;ve manually included all our assets in our <code>index.html</code> file, but as your application grows and once you start <a href="/guides/caching">using hashes in filenames</a> and outputting <a href="/guides/code-splitting">multiple bundles</a>, it will be difficult to keep managing your <code>index.html</code> file manually. However, a few plugins exist that will make this process much easier to manage.</p>\n<h2 class="header"><a class="anchor" href="#preparation" id="preparation"></a><span class="text">Preparation</span><a class="icon-link" href="#preparation"></a></h2>\n<p>First, let&#39;s adjust our project a little bit:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- print.js</span>\n  |- /node_modules\n</code></pre>\n<p>Let&#39;s add some logic to our <code>src/print.js</code> file:</p>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'I get called from print.js!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>And use that function in our <code>src/index.js</code> file:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import printMe from \'./print.js\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n<span class="token inserted">+   var btn = document.createElement(\'button\');</span>\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n<span class="token inserted">+   btn.innerHTML = \'Click me and check the console!\';</span>\n<span class="token inserted">+   btn.onclick = printMe;</span>\n+\n<span class="token inserted">+   element.appendChild(btn);</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>Let&#39;s also update our <code>dist/index.html</code> file, in preparation for webpack to split out entries:</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n    &lt;head>\n<span class="token deleted">-     &lt;title>Asset Management&lt;/title></span>\n<span class="token inserted">+     &lt;title>Output Management&lt;/title></span>\n<span class="token inserted">+     &lt;script src="./print.bundle.js">&lt;/script></span>\n    &lt;/head>\n    &lt;body>\n<span class="token deleted">-     &lt;script src="./bundle.js">&lt;/script></span>\n<span class="token inserted">+     &lt;script src="./app.bundle.js">&lt;/script></span>\n    &lt;/body>\n  &lt;/html>\n</code></pre>\n<p>Now adjust the config. We&#39;ll be adding our <code>src/print.js</code> as a new entry point (<code>print</code>) and we&#39;ll change the output as well, so that it will dynamically generate bundle names, based on the entry point names:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n<span class="token deleted">-   entry: \'./src/index.js\',</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     app: \'./src/index.js\',</span>\n<span class="token inserted">+     print: \'./src/print.js\'</span>\n<span class="token inserted">+   },</span>\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Let&#39;s run <code>npm run build</code> and see what this generates:</p>\n<pre><code class="lang-bash">Hash: aa305b0f3373c63c9051\nVersion: webpack 3.0.0\nTime: 536ms\n          Asset     Size  Chunks                    Chunk Names\n  app.bundle.js   545 kB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\nprint.bundle.js  2.74 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 84 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 403 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>We can see that webpack generates our <code>print.bundle.js</code> and <code>app.bundle.js</code> files, which we also specified in our <code>index.html</code> file. if you open <code>index.html</code> in your browser, you can see what happens when you click the button.</p>\n<p>But what would happen if we changed the name of one of our entry points, or even added a new one? The generated bundles would be renamed on a build, but our <code>index.html</code> file would still reference the old names. Let&#39;s fix that with the <a href="/plugins/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a>.</p>\n<h2 class="header"><a class="anchor" href="#setting-up-htmlwebpackplugin" id="setting-up-htmlwebpackplugin"></a><span class="text">Setting up HtmlWebpackPlugin</span><a class="icon-link" href="#setting-up-htmlwebpackplugin"></a></h2>\n<p>First install the plugin and adjust the <code>webpack.config.js</code> file:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev html-webpack-plugin\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const HtmlWebpackPlugin = require(\'html-webpack-plugin\');</span>\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new HtmlWebpackPlugin({</span>\n<span class="token inserted">+       title: \'Output Management\'</span>\n<span class="token inserted">+     })</span>\n<span class="token inserted">+   ],</span>\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Before we do a build, you should know that the <code>HtmlWebpackPlugin</code> by default will generate its own <code>index.html</code> file, even though we already have one in the <code>dist/</code> folder. This means that it will replace our <code>index.html</code> file with a newly generated one. Let&#39;s see what happens when we do an <code>npm run build</code>:</p>\n<pre><code class="lang-bash">Hash: 81f82697c19b5f49aebd\nVersion: webpack 2.6.1\nTime: 854ms\n           Asset       Size  Chunks                    Chunk Names\n print.bundle.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  print\n   app.bundle.js    2.81 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         app\n      index.html  249 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/index.js 172 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n       <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./~/html-webpack-plugin/lib/loader.js<span class="token operator">!</span>./~/html-webpack-plugin/default_index.ejs 538 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>If you open <code>index.html</code> in your code editor, you&#39;ll see that the <code>HtmlWebpackPlugin</code> has created an entirely new file for you and that all the bundles are automatically added.</p>\n<p>If you want to learn more about all the features and options that the <code>HtmlWebpackPlugin</code> provides, then you should read up on it on the <a href="https://github.com/jantimon/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> repo.</p>\n<p>You can also take a look at <a href="https://github.com/jaketrent/html-webpack-template"><code>html-webpack-template</code></a> which provides a couple of extra features in addition to the default template.</p>\n<h2 class="header"><a class="anchor" href="#cleaning-up-the-dist-folder" id="cleaning-up-the-dist-folder"></a><span class="text">Cleaning up the <code>/dist</code> folder</span><a class="icon-link" href="#cleaning-up-the-dist-folder"></a></h2>\n<p>As you might have noticed over the past guides and code example, our <code>/dist</code> folder has become quite cluttered. Webpack will generate the files and put them in the <code>/dist</code> folder for you, but it doesn&#39;t keep track of which files are actually in use by your project.</p>\n<p>In general it&#39;s good practice to clean the <code>/dist</code> folder before each build, so that only used files will be generated. Let&#39;s take care of that.</p>\n<p>A popular plugin to manage this is the <a href="https://www.npmjs.com/package/clean-webpack-plugin"><code>clean-webpack-plugin</code></a> so let&#39;s install and configure it.</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> clean-webpack-plugin --save-dev\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n<span class="token inserted">+ const CleanWebpackPlugin = require(\'clean-webpack-plugin\');</span>\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    plugins: [\n<span class="token inserted">+     new CleanWebpackPlugin([\'dist\']),</span>\n      new HtmlWebpackPlugin({\n        title: \'Output Management\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Now run an <code>npm run build</code> and inspect the <code>/dist</code> folder. If everything went well you should now only see the files generated from the build and no more old files!</p>\n<h2 class="header"><a class="anchor" href="#the-manifest" id="the-manifest"></a><span class="text">The Manifest</span><a class="icon-link" href="#the-manifest"></a></h2>\n<p>You might be wondering how webpack and its plugins seem to &quot;know&quot; what files are being generated. The answer is in the manifest that webpack keeps to track how all the modules map to the output bundles. If you&#39;re interested in managing webpack&#39;s <a href="/configuration/output"><code>output</code></a> in other ways, the manifest would be a good place to start.</p>\n<p>The manifest data can be extracted into a json file for easy consumption using the <a href="https://github.com/danethurber/webpack-manifest-plugin"><code>WebpackManifestPlugin</code></a>.</p>\n<p>We won&#39;t go through a full example of how to use this plugin within your projects, but you can read up on <a href="/concepts/manifest">the concept page</a> and the <a href="/guides/caching">caching guide</a> to find out how this ties into long term caching.</p>\n<h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>Now that you&#39;ve learned about dynamically adding bundles to your HTML, let&#39;s dive into the <a href="/guides/development">development guide</a>. Or, if you want to dig into more advanced topics, we would recommend heading over to the <a href="/guides/code-splitting">code splitting guide</a>.</p>\n',title:"Output Management"},title:"Output Management",url:"/guides/output-management/"},{file:{attributes:{title:"Development",sort:5,contributors:["SpaceK33z","TheDutchCoder","fvgs","rafde"],group:"-",anchors:[{title:"Using source maps",id:"using-source-maps"},{title:"Choosing a Development Tool",id:"choosing-a-development-tool"},{title:"Using Watch Mode",id:"using-watch-mode"},{title:"Using webpack-dev-server",id:"using-webpack-dev-server"},{title:"Using webpack-dev-middleware",id:"using-webpack-dev-middleware"},{title:"Adjusting Your Text Editor",id:"adjusting-your-text-editor"},{title:"Conclusion",id:"conclusion"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> This guide extends on code examples found in the <a href="/guides/output-management">Output Management</a> guide. </div></blockquote><p>If you&#39;ve been following the guides, you should have a solid understanding of some of the webpack basics. Before we continue, let&#39;s look into setting up a development environment to make our lives a little easier.</p>\n<blockquote class="warning"><div class="tip-content"> The tools in this guide are <strong>only meant for development</strong>, please <strong>avoid</strong> using them in production!! </div></blockquote><h2 class="header"><a class="anchor" href="#using-source-maps" id="using-source-maps"></a><span class="text">Using source maps</span><a class="icon-link" href="#using-source-maps"></a></h2>\n<p>When webpack bundles your source code, it can become difficult to track down errors and warnings to their original location. For example, if you bundle three source files (<code>a.js</code>, <code>b.js</code>, and <code>c.js</code>) into one bundle (<code>bundle.js</code>) and one of the source files contains an error, the stack trace will simply point to <code>bundle.js</code>. This isn&#39;t always helpful as you probably want to know exactly which source file the error came from.</p>\n<p>In order to make it easier to track down errors and warnings, JavaScript offers <a href="http://blog.teamtreehouse.com/introduction-source-maps">source maps</a>, which maps your compiled code back to your original source code. If an error originates from <code>b.js</code>, the source map will tell you exactly that.</p>\n<p>There are a lot of <a href="/configuration/devtool">different options</a> available when it comes to source maps, be sure to check them out so you can configure them to your needs.</p>\n<p>For this guide, let&#39;s use the <code>inline-source-map</code> option, which is good for illustrative purposes (though not for production):</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Development\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Now let&#39;s make sure we have something to debug, so let&#39;s create an error in our <code>print.js</code> file:</p>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-diff">  export default function printMe() {\n<span class="token deleted">-   console.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   cosnole.log(\'I get called from print.js!\');</span>\n  }\n</code></pre>\n<p>Run an <code>npm run build</code>, it should compile to something like this:</p>\n<pre><code class="lang-bash">Hash: 7bf68ca15f1f2690e2d1\nVersion: webpack 3.1.0\nTime: 1224ms\n          Asset       Size  Chunks                    Chunk Names\n  app.bundle.js    1.44 MB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\nprint.bundle.js    6.43 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n     index.html  248 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 84 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 403 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>Now open the resulting <code>index.html</code> file in your browser. Click the button and look in your console where the error is displayed. The error should say something like this:</p>\n<pre><code class="lang-bash"> Uncaught ReferenceError: cosnole is not defined\n    at HTMLButtonElement.printMe <span class="token punctuation">(</span>print.js:2<span class="token punctuation">)</span>\n</code></pre>\n<p>We can see that the error also contains a reference to the file (<code>print.js</code>) and line number (2) where the error occurred. This is great, because now we know exactly where to look in order to fix the issue.</p>\n<h2 class="header"><a class="anchor" href="#choosing-a-development-tool" id="choosing-a-development-tool"></a><span class="text">Choosing a Development Tool</span><a class="icon-link" href="#choosing-a-development-tool"></a></h2>\n<blockquote class="warning"><div class="tip-content"> Some text editors have a &quot;safe write&quot; function that might interfere with some of the following tools. Read <a href="#adjusting-your-text-editor">Adjusting Your text Editor</a> for a solution to these issues. </div></blockquote><p>It quickly becomes a hassle to manually run <code>npm run build</code> every time you want to compile your code.</p>\n<p>There are a couple of different options available in webpack that help you automatically compile your code whenever it changes:</p>\n<ol>\n<li>webpack&#39;s Watch Mode</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n</ol>\n<p>In most cases, you probably would want to use <code>webpack-dev-server</code>, but let&#39;s explore all of the above options.</p>\n<h3 class="header"><a class="anchor" href="#using-watch-mode" id="using-watch-mode"></a><span class="text">Using Watch Mode</span><a class="icon-link" href="#using-watch-mode"></a></h3>\n<p>You can instruct webpack to &quot;watch&quot; all files within your dependency graph for changes. If one of these files is updated, the code will be recompiled so you don&#39;t have to run the full build manually.</p>\n<p>Let&#39;s add an npm script that will start webpack&#39;s Watch Mode:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n<span class="token inserted">+     "watch": "webpack --watch",</span>\n      "build": "webpack"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>You can now run <code>npm run watch</code> from the command line to see that webpack compiles your code, but doesn&#39;t exit to the command line. This is because the script is still watching your files.</p>\n<p>Now, with webpack watching your files, let&#39;s remove the error we introduced earlier:</p>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-diff">  export default function printMe() {\n<span class="token deleted">-   cosnole.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   console.log(\'I get called from print.js!\');</span>\n  }\n</code></pre>\n<p>Now save your file and check the terminal window. You should see that webpack automatically recompiles the changed module!</p>\n<p>The only downside is that you have to refresh your browser in order to see the changes. It would be much nicer if that would happen automatically as well, so let&#39;s try <code>webpack-dev-server</code> which will do exactly that.</p>\n<h3 class="header"><a class="anchor" href="#using-webpack-dev-server" id="using-webpack-dev-server"></a><span class="text">Using webpack-dev-server</span><a class="icon-link" href="#using-webpack-dev-server"></a></h3>\n<p>The <code>webpack-dev-server</code> provides you with a simple web server and the ability to use live reloading. Let&#39;s set it up:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack-dev-server\n</code></pre>\n<p>Change your config file to tell the dev server where to look for files:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    devtool: \'inline-source-map\',\n<span class="token inserted">+   devServer: {</span>\n<span class="token inserted">+     contentBase: \'./dist\'</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Development\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>This tells <code>webpack-dev-server</code> to serve the files from the <code>dist</code> directory on <code>localhost:8080</code>.</p>\n<p>Let&#39;s add a script to easily run the dev server as well:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n      "watch": "webpack --progress --watch",\n<span class="token inserted">+     "start": "webpack-dev-server --open",</span>\n      "build": "webpack"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>Now we can run <code>npm start</code> from the command line and we will see our browser automatically loading up our page. If you now change any of the source files and save them, the web server will automatically reload after the code has been compiled. Give it a try!</p>\n<p>The <code>webpack-dev-server</code> comes with many configurable options. Head over to the <a href="/configuration/dev-server">documentation</a> to learn more.</p>\n<blockquote class="tip"><div class="tip-content"> Now that your server is working, you might want to give <a href="/guides/hot-module-replacement">Hot Module Replacement</a> a try! </div></blockquote><h3 class="header"><a class="anchor" href="#using-webpack-dev-middleware" id="using-webpack-dev-middleware"></a><span class="text">Using webpack-dev-middleware</span><a class="icon-link" href="#using-webpack-dev-middleware"></a></h3>\n<p><code>webpack-dev-middleware</code> is a wrapper that will emit files processed by webpack to a server. This is used in <code>webpack-dev-server</code> internally, however it&#39;s available as a separate package to allow more custom setups if desired. We&#39;ll take a look at an example that combines webpack-dev-middleware with an express server.</p>\n<p>Let&#39;s install <code>express</code> and <code>webpack-dev-middleware</code> so we can get started:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev express webpack-dev-middleware\n</code></pre>\n<p>Now we need to make some adjustments to our webpack configuration file in order to make sure the middleware will function correctly:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    devtool: \'inline-source-map\',\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Output Management\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\'),\n<span class="token inserted">+     publicPath: \'/\'</span>\n    }\n  };\n</code></pre>\n<p>The <code>publicPath</code> will be used within our server script as well in order to make sure files are served correctly on <code>http://localhost:3000</code>, the port number we&#39;ll specify later. The next step is setting up our custom <code>express</code> server:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n<span class="token inserted">+ |- server.js</span>\n  |- /dist\n  |- /src\n    |- index.js\n    |- print.js\n  |- /node_modules\n</code></pre>\n<p><strong>server.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpackDevMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-middleware\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span>\n<span class="token comment">// configuration file as a base.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">webpackDevMiddleware</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  publicPath<span class="token punctuation">:</span> config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Serve the files on port 3000.</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Example app listening on port 3000!\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Now add an npm script to make it a little easier to run the server:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1",\n      "watch": "webpack --progress --watch",\n      "start": "webpack-dev-server --open",\n<span class="token inserted">+     "server": "node server.js",</span>\n      "build": "webpack"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "express": "^4.15.3",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "webpack-dev-middleware": "^1.12.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>Now in your terminal run <code>npm run server</code>, it should give you an output similar to this:</p>\n<pre><code class="lang-bash">Example app listening on port 3000<span class="token operator">!</span>\nwebpack built 27b137af6d9d8668c373 <span class="token keyword">in</span> 1198ms\nHash: 27b137af6d9d8668c373\nVersion: webpack 3.0.0\nTime: 1198ms\n          Asset       Size  Chunks                    Chunk Names\n  app.bundle.js    1.44 MB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\nprint.bundle.js    6.57 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n     index.html  306 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 116 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 403 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> ./node_modules/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n         Asset    Size  Chunks  Chunk Names\n    index.html  544 kB       0\n       <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./node_modules/html-webpack-plugin/lib/loader.js<span class="token operator">!</span>./node_modules/html-webpack-plugin/default_index.ejs 538 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./node_modules/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\nwebpack: Compiled successfully.\n</code></pre>\n<p>Now fire up your browser and go to <code>http://localhost:3000</code>, you should see your webpack app running and functioning!</p>\n<blockquote class="tip"><div class="tip-content"> If you would like to know more about how Hot Module Replacement works, we recommend you read the <a href="/guides/hot-module-replacement/">Hot Module Replacement</a> guide. </div></blockquote><h2 class="header"><a class="anchor" href="#adjusting-your-text-editor" id="adjusting-your-text-editor"></a><span class="text">Adjusting Your Text Editor</span><a class="icon-link" href="#adjusting-your-text-editor"></a></h2>\n<p>When using automatic compilation of your code, you could run into issues when saving your files. Some editors have a &quot;safe write&quot; feature that can potentially interfere with recompilation.</p>\n<p>To disable this feature in some common editors, see the list below:</p>\n<ul>\n<li><strong>Sublime Text 3</strong> - Add <code>atomic_save: &quot;false&quot;</code> to your user preferences.</li>\n<li><strong>IntelliJ</strong> - use search in the preferences to find &quot;safe write&quot; and disable it.</li>\n<li><strong>Vim</strong> - add <code>:set backupcopy=yes</code> to your settings.</li>\n<li><strong>WebStorm</strong> - uncheck Use <code>&quot;safe write&quot;</code> in <code>Preferences &gt; Appearance &amp; Behavior &gt; System Settings</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>Now that you&#39;ve learned how to automatically compile your code and run a simple development server, you can check out the next guide, which will cover <a href="/guides/hot-module-replacement">Hot Module Replacement</a>.</p>\n',title:"Development"},title:"Development",url:"/guides/development/"},{file:{attributes:{title:"Hot Module Replacement",sort:6,contributors:["aiduryagin","bdwain","caryli","drpicox","gdi2290","jhnns","jmreidy","joshsantos","rohannair","sararubin","sbaidon","skipjack","xgirma"],related:[{title:"Concepts - Hot Module Replacement",url:"/concepts/hot-module-replacement"},{title:"API - Hot Module Replacement",url:"/api/hot-module-replacement"}],group:"-",anchors:[{title:"Enabling HMR",id:"enabling-hmr"},{title:"Via the Node.js API",id:"via-the-node-js-api"},{title:"Gotchas",id:"gotchas"},{title:"HMR with Stylesheets",id:"hmr-with-stylesheets"},{title:"Other Code and Frameworks",id:"other-code-and-frameworks"}]},body:'<blockquote class="tip"><div class="tip-content"> This guide extends on code examples found in the <a href="/guides/development">Development</a> guide. </div></blockquote><p>Hot Module Replacement (or HMR) is one of the most useful features offered by webpack. It allows all kinds of modules to be updated at runtime without the need for a full refresh. This page focuses on <strong>implementation</strong> while the <a href="/concepts/hot-module-replacement">concepts page</a> gives more details on how it works and why it&#39;s useful.</p>\n<blockquote class="warning"><div class="tip-content"> <strong>HMR</strong> is not intended for use in production, meaning it should only be used in development. See the <a href="/guides/production">building for production guide</a> for more information. </div></blockquote><h2 class="header"><a class="anchor" href="#enabling-hmr" id="enabling-hmr"></a><span class="text">Enabling HMR</span><a class="icon-link" href="#enabling-hmr"></a></h2>\n<p>This feature is great for productivity. All we need to do is update our <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> configuration, and use webpack&#39;s built in HMR plugin. We&#39;ll also remove the entry point for <code>print.js</code> as it will now be consumed by the <code>index.js</code> module.</p>\n<blockquote class="tip"><div class="tip-content"> If you took the route of using <code>webpack-dev-middleware</code> instead of <code>webpack-dev-server</code>, please use the <a href="https://github.com/glenjamin/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> package to enable HMR on your custom server or application. </div></blockquote><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n\n  module.exports = {\n    entry: {\n<span class="token deleted">-      app: \'./src/index.js\',</span>\n<span class="token deleted">-      print: \'./src/print.js\'</span>\n<span class="token inserted">+      app: \'./src/index.js\'</span>\n    },\n    devtool: \'inline-source-map\',\n    devServer: {\n      contentBase: \'./dist\',\n<span class="token inserted">+     hot: true</span>\n    },\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Hot Module Replacement\'\n      }),\n<span class="token inserted">+     new webpack.NamedModulesPlugin(),</span>\n<span class="token inserted">+     new webpack.HotModuleReplacementPlugin()</span>\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> You can use the CLI to modify the <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> configuration with the following command: <code>webpack-dev-server --hotOnly</code>. </div></blockquote><p>Note that we&#39;ve also added the <code>NamedModulesPlugin</code> to make it easier to see which dependencies are being patched. To start, we&#39;ll get the dev server up and running by executing an <code>npm start</code> from the command line.</p>\n<p>Now let&#39;s update the <code>index.js</code> file so that when a change inside <code>print.js</code> is detected we tell webpack to accept the updated module.</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n  function component() {\n    var element = document.createElement(\'div\');\n    var btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n<span class="token inserted">+ if (module.hot) {</span>\n<span class="token inserted">+   module.hot.accept(\'./print.js\', function() {</span>\n<span class="token inserted">+     console.log(\'Accepting the updated printMe module!\');</span>\n<span class="token inserted">+     printMe();</span>\n<span class="token inserted">+   })</span>\n<span class="token inserted">+ }</span>\n</code></pre>\n<p>Start changing the <code>console.log</code> statement in <code>print.js</code>, and you should see the following output in the browser console.</p>\n<p><strong>print.js</strong></p>\n<pre><code class="lang-diff">  export default function printMe() {\n<span class="token deleted">-   console.log(\'I get called from print.js!\');</span>\n<span class="token inserted">+   console.log(\'Updating print.js...\')</span>\n  }\n</code></pre>\n<p><strong>console</strong></p>\n<pre><code class="lang-diff">[HMR] Waiting for update signal from WDS...\nmain.js:4395 [WDS] Hot Module Replacement enabled.\n<span class="token inserted">+ 2main.js:4395 [WDS] App updated. Recompiling...</span>\n<span class="token inserted">+ main.js:4395 [WDS] App hot update...</span>\n<span class="token inserted">+ main.js:4330 [HMR] Checking for updates on the server...</span>\n<span class="token inserted">+ main.js:10024 Accepting the updated printMe module!</span>\n<span class="token inserted">+ 0.4b8ee77….hot-update.js:10 Updating print.js...</span>\n<span class="token inserted">+ main.js:4330 [HMR] Updated modules:</span>\n<span class="token inserted">+ main.js:4330 [HMR]  - 20</span>\n<span class="token inserted">+ main.js:4330 [HMR] Consider using the NamedModulesPlugin for module names.</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#via-the-node-js-api" id="via-the-node-js-api"></a><span class="text">Via the Node.js API</span><a class="icon-link" href="#via-the-node-js-api"></a></h2>\n<p>When using Webpack Dev Server with the Node.js API, don&#39;t put the dev server options on the webpack config object. Instead, pass them as a second parameter upon creation. For example:</p>\n<p><code>new WebpackDevServer(compiler, options)</code></p>\n<p>To enable HMR, you also need to modify your webpack configuration object to include the HMR entry points. The <code>webpack-dev-server</code> package includes a method called <code>addDevServerEntrypoints</code> which you can use to do this. Here&#39;s a small example of how that might look:</p>\n<p><strong>dev-server.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> webpackDevServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contentBase<span class="token punctuation">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n  hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  host<span class="token punctuation">:</span> <span class="token string">\'localhost\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwebpackDevServer<span class="token punctuation">.</span><span class="token function">addDevServerEntrypoints</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webpackDevServer</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'dev server listening on port 5000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> If you&#39;re <a href="/guides/development#using-webpack-dev-middleware">using <code>webpack-dev-middleware</code></a>, check out the <a href="https://github.com/glenjamin/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> package to enable HMR on your custom dev server. </div></blockquote><h2 class="header"><a class="anchor" href="#gotchas" id="gotchas"></a><span class="text">Gotchas</span><a class="icon-link" href="#gotchas"></a></h2>\n<p>Hot Module Replacement can be tricky. To show this, let&#39;s go back to our working example. If you go ahead and click the button on the example page, you will realize the console is printing the old <code>printMe</code> function.</p>\n<p>This is happening because the button&#39;s <code>onclick</code> event handler is still bound to the original <code>printMe</code> function.</p>\n<p>To make this work with HMR we need to update that binding to the new <code>printMe</code> function using <code>module.hot.accept</code>:</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n  function component() {\n    var element = document.createElement(\'div\');\n    var btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;  // onclick event is bind to the original printMe function\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n<span class="token deleted">- document.body.appendChild(component());</span>\n<span class="token inserted">+ let element = component(); // Store the element to re-render on print.js changes</span>\n<span class="token inserted">+ document.body.appendChild(element);</span>\n\n  if (module.hot) {\n    module.hot.accept(\'./print.js\', function() {\n      console.log(\'Accepting the updated printMe module!\');\n<span class="token deleted">-     printMe();</span>\n<span class="token inserted">+     document.body.removeChild(element);</span>\n<span class="token inserted">+     element = component(); // Re-render the "component" to update the click handler</span>\n<span class="token inserted">+     document.body.appendChild(element);</span>\n    })\n  }\n</code></pre>\n<p>This is just one example, but there are many others that can easily trip people up. Luckily, there are a lot of loaders out there (some of which are mentioned below) that will make hot module replacement much easier.</p>\n<h2 class="header"><a class="anchor" href="#hmr-with-stylesheets" id="hmr-with-stylesheets"></a><span class="text">HMR with Stylesheets</span><a class="icon-link" href="#hmr-with-stylesheets"></a></h2>\n<p>Hot Module Replacement with CSS is actually fairly straightforward with the help of the <code>style-loader</code>. This loader uses <code>module.hot.accept</code> behind the scenes to patch <code>&lt;style&gt;</code> tags when CSS dependencies are updated.</p>\n<p>First let&#39;s install both loaders with the following command:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev style-loader css-loader\n</code></pre>\n<p>Now let&#39;s update the configuration file to make use of the loader.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\'\n    },\n    devtool: \'inline-source-map\',\n    devServer: {\n      contentBase: \'./dist\',\n      hot: true\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: /\\.css$/,</span>\n<span class="token inserted">+         use: [\'style-loader\', \'css-loader\']</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\'])\n      new HtmlWebpackPlugin({\n        title: \'Hot Module Replacement\'\n      }),\n      new webpack.HotModuleReplacementPlugin()\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Hot loading stylesheets is as easy as importing them into a module:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  | - package.json\n  | - webpack.config.js\n  | - /dist\n    | - bundle.js\n  | - /src\n    | - index.js\n    | - print.js\n<span class="token inserted">+   | - styles.css</span>\n</code></pre>\n<p><strong>styles.css</strong></p>\n<pre><code class="lang-css"><span class="token selector">body </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n<span class="token inserted">+ import \'./styles.css\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n    var btn = document.createElement(\'button\');\n\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    btn.innerHTML = \'Click me and check the console!\';\n    btn.onclick = printMe;  // onclick event is bind to the original printMe function\n\n    element.appendChild(btn);\n\n    return element;\n  }\n\n  let element = component();\n  document.body.appendChild(element);\n\n  if (module.hot) {\n    module.hot.accept(\'./print.js\', function() {\n      console.log(\'Accepting the updated printMe module!\');\n      document.body.removeChild(element);\n      element = component(); // Re-render the "component" to update the click handler\n      document.body.appendChild(element);\n    })\n  }\n</code></pre>\n<p>Change the style on <code>body</code> to <code>background: red;</code> and you should immediately see the page&#39;s background color change without a full refresh.</p>\n<p><strong>styles.css</strong></p>\n<pre><code class="lang-diff">  body {\n<span class="token deleted">-   background: blue;</span>\n<span class="token inserted">+   background: red;</span>\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#other-code-and-frameworks" id="other-code-and-frameworks"></a><span class="text">Other Code and Frameworks</span><a class="icon-link" href="#other-code-and-frameworks"></a></h2>\n<p>There are many other loaders and examples out in the community to make HMR interact smoothly with a variety of frameworks and libraries...</p>\n<ul>\n<li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a>: Tweak react components in real time.</li>\n<li><a href="https://github.com/vuejs/vue-loader">Vue Loader</a>: This loader supports HMR for vue components out of the box.</li>\n<li><a href="https://github.com/fluxxu/elm-hot-loader">Elm Hot Loader</a>: Supports HMR for the Elm programming language.</li>\n<li><a href="https://survivejs.com/webpack/appendices/hmr-with-react/#configuring-hmr-with-redux">Redux HMR</a>: No loader or plugin necessary! A simple change to your main store file is all that&#39;s required.</li>\n<li><a href="https://github.com/AngularClass/angular-hmr">Angular HMR</a>: No loader necessary! A simple change to your main NgModule file is all that&#39;s required to have full control over the HMR APIs.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> If you know of any other loaders or plugins that help with or enhance Hot Module Replacement please submit a pull request to add to this list! </div></blockquote>',title:"Hot Module Replacement"},title:"Hot Module Replacement",url:"/guides/hot-module-replacement/"},{file:{attributes:{title:"Tree Shaking",sort:7,contributors:["MijaelWatts","alexjoverm","avant1","dmitriid","simon04","zacanger"],related:[{title:"Tree shaking with webpack 2, TypeScript and Babel",url:"https://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/"},{title:"Tree-shaking with webpack 2 and Babel 6",url:"http://www.2ality.com/2015/12/webpack-tree-shaking.html"},{title:"webpack 2 Tree Shaking Configuration",url:"https://medium.com/modus-create-front-end-development/webpack-2-tree-shaking-configuration-9f1de90f3233#.15tuaw71x"},{title:"Issue 2867",url:"https://github.com/webpack/webpack/issues/2867"},{title:"Issue 4784",url:"https://github.com/webpack/webpack/issues/4784"}],group:"-",anchors:[{title:"Add a Utility",id:"add-a-utility"},{title:"Minify the Output",id:"minify-the-output"},{title:"Caveats",id:"caveats"},{title:"Conclusion",id:"conclusion"}]},body:'<p><em>Tree shaking</em> is a term commonly used in the JavaScript context for dead-code elimination. It relies on the <a href="http://exploringjs.com/es6/ch_modules.html#static-module-structure">static structure</a> of ES2015 module syntax, i.e. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a>. The name and concept have been popularized by the ES2015 module bundler <a href="https://github.com/rollup/rollup">rollup</a>.</p>\n<p>The webpack 2 release came with built-in support for ES2015 modules (alias <em>harmony modules</em>) as well as unused module export detection.</p>\n<blockquote class="tip"><div class="tip-content"> The remainder of this guide will stem from <a href="/guides/getting-started">Getting Started</a>. If you haven&#39;t read through that guide already, please do so now. </div></blockquote><h2 class="header"><a class="anchor" href="#add-a-utility" id="add-a-utility"></a><span class="text">Add a Utility</span><a class="icon-link" href="#add-a-utility"></a></h2>\n<p>Let&#39;s add a new utility file to our project, <code>src/math.js</code>, that exports two functions:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n  |- bundle.js\n  |- index.html\n|- /src\n  |- index.js\n  |- math.js\n|- /node_modules\n</code></pre>\n<p><strong>src/math.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>With that in place, let&#39;s update our entry script to utilize one of these new methods and remove <code>lodash</code> for simplicity:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n<span class="token inserted">+ import { cube } from \'./math.js\';</span>\n\n  function component() {\n<span class="token deleted">-   var element = document.createElement(\'div\');</span>\n<span class="token inserted">+   var element = document.createElement(\'pre\');</span>\n\n<span class="token deleted">-   // Lodash, now imported by this script</span>\n<span class="token deleted">-   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n<span class="token inserted">+   element.innerHTML = [</span>\n<span class="token inserted">+     \'Hello webpack!\',</span>\n<span class="token inserted">+     \'5 cubed is equal to \' + cube(5)</span>\n<span class="token inserted">+   ].join(\'\\n\\n\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>Note that we <strong>did not <code>import</code> the <code>square</code> method</strong> from the <code>src/math.js</code> module. That function is what&#39;s known as &quot;dead code&quot;, meaning an unused <code>export</code> that should be dropped. Now let&#39;s run our npm script, <code>npm run build</code>, and inspect the output bundle:</p>\n<p><strong>dist/bundle.js (around lines 90 - 100)</strong></p>\n<pre><code class="lang-js"><span class="token comment">/* 1 */</span>\n<span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token string">"use strict"</span><span class="token punctuation">;</span>\n<span class="token comment">/* unused harmony export square */</span>\n<span class="token comment">/* harmony export (immutable) */</span> __webpack_exports__<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cube<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Note the <code>unused harmony export square</code> comment above. If you look at the code below it, you&#39;ll notice that <code>square</code> is not being exported, however, it is still included in the bundle. We&#39;ll fix that in the next section.</p>\n<h2 class="header"><a class="anchor" href="#minify-the-output" id="minify-the-output"></a><span class="text">Minify the Output</span><a class="icon-link" href="#minify-the-output"></a></h2>\n<p>So we&#39;ve cued up our &quot;dead code&quot; to be dropped by using the <code>import</code> and <code>export</code> syntax, but we still need to drop it from the bundle. To do that, we&#39;ll add a minifier that supports dead code removal -- the <a href="/plugins/uglifyjs-webpack-plugin"><code>UglifyJSPlugin</code></a> -- to our configuration...</p>\n<p>Let&#39;s start by installing it:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev uglifyjs-webpack-plugin\n</code></pre>\n<p>And then adding it into our config:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">const path = require(\'path\');\n<span class="token inserted">+ const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');</span>\n\nmodule.exports = {\n  entry: \'./src/index.js\',\n  output: {\n    filename: \'bundle.js\',\n    path: path.resolve(__dirname, \'dist\')\n<span class="token deleted">- }</span>\n<span class="token inserted">+ },</span>\n<span class="token inserted">+ plugins: [</span>\n<span class="token inserted">+   new UglifyJSPlugin()</span>\n<span class="token inserted">+ ]</span>\n};\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that the <code>--optimize-minimize</code> flag can be used to insert the <code>UglifyJsPlugin</code> as well. </div></blockquote><p>With that squared away, we can run another <code>npm run build</code> and see if anything has changed.</p>\n<p>Notice anything different about <code>dist/bundle.js</code>? Clearly the whole bundle is now minified and mangled, but, if you look carefully, you won&#39;t see the <code>square</code> function included but will see a mangled version of the <code>cube</code> function (<code>function r(e){return e*e*e}n.a=r</code>). With minification and tree shaking our bundle is now a few bytes smaller! While that may not seem like much in this contrived example, tree shaking can yield a significant decrease in bundle size when working on larger applications with complex dependency trees.</p>\n<h2 class="header"><a class="anchor" href="#caveats" id="caveats"></a><span class="text">Caveats</span><a class="icon-link" href="#caveats"></a></h2>\n<p>Please note that webpack doesn&#39;t perform tree-shaking by itself. It relies on third party tools like <a href="/plugins/uglifyjs-webpack-plugin/">UglifyJS</a> to perform actual dead code elimination. There are situations where tree-shaking may not be effective. For example, consider the following modules:</p>\n<p><strong>transforms.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mylib <span class="token keyword">from</span> <span class="token string">\'mylib\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> someVar <span class="token operator">=</span> mylib<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> someOtherVar <span class="token operator">=</span> mylib<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> someVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./transforms.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use `someVar`...</span>\n</code></pre>\n<p>In the code above webpack cannot determine whether or not the call to <code>mylib.transform</code> triggers any side-effects. As a result, it errs on the safe side and leaves <code>someOtherVar</code> in the bundled code.</p>\n<p>In general, when a tool cannot guarantee that a particular code path doesn&#39;t lead to side-effects, this code may remain in the generated bundle even if you are sure it shouldn&#39;t. Common situations include invoking a function from a third-party module that webpack and/or the minifier cannot inspect, re-exporting functions imported from third-party modules, etc.</p>\n<p>The code used in this guide assumes you perform tree-shaking using UglifyJS plugin. However, there are other tools such as <a href="https://github.com/erikdesjardins/webpack-rollup-loader">webpack-rollup-loader</a> or <a href="/plugins/babel-minify-webpack-plugin">Babel Minify Webpack Plugin</a> that may produce different results depending on your setup.</p>\n<h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>So, what we&#39;ve learned is that in order to take advantage of <em>tree shaking</em>, you must...</p>\n<ul>\n<li>Use ES2015 module syntax (i.e. <code>import</code> and <code>export</code>).</li>\n<li>Include a minifier that supports dead code removal (e.g. the <code>UglifyJSPlugin</code>).</li>\n</ul>\n<p>You can imagine your application as a tree. The source code and libraries you actually use represent the green, living leaves of the tree. Dead code represents the brown, dead leaves of the tree that are consumed by autumn. In order to get rid of the dead leaves, you have to shake the tree, causing them to fall.</p>\n<p>If you are interested in more ways to optimize your output, please jump to the next guide for details on building for <a href="/guides/production">production</a>.</p>\n',title:"Tree Shaking"},title:"Tree Shaking",url:"/guides/tree-shaking/"},{file:{attributes:{title:"Production",sort:8,contributors:["bring2dip","chrisVillanueva","henriquea","kelset","kisnows","markerikson","rajagopal4890","redian","simon04","skipjack","swapnilmishra","xgirma","xgqfrms"],group:"-",anchors:[{title:"Setup",id:"setup"},{title:"NPM Scripts",id:"npm-scripts"},{title:"Minification",id:"minification"},{title:"Source Mapping",id:"source-mapping"},{title:"Specify the Environment",id:"specify-the-environment"},{title:"Split CSS",id:"split-css"},{title:"CLI Alternatives",id:"cli-alternatives"}],related:[]},body:'<p>In this guide we&#39;ll dive into some of the best practices and utilities for building a production site or application.</p>\n<blockquote class="tip"><div class="tip-content"> This walkthrough stems from <a href="/guides/tree-shaking">Tree Shaking</a> and <a href="/guides/development">Development</a>. Please ensure you are familiar with the concepts/setup introduced in those guides before continuing on. </div></blockquote><h2 class="header"><a class="anchor" href="#setup" id="setup"></a><span class="text">Setup</span><a class="icon-link" href="#setup"></a></h2>\n<p>The goals of <em>development</em> and <em>production</em> builds differ greatly. In <em>development</em>, we want strong source mapping and a localhost server with live reloading or hot module replacement. In <em>production</em>, our goals shift to a focus on minified bundles, lighter weight source maps, and optimized assets to improve load time. With this logical separation at hand, we typically recommend writing <strong>separate webpack configurations</strong> for each environment.</p>\n<p>While we will separate the <em>production</em> and <em>development</em> specific bits out, note that we&#39;ll still maintain a &quot;common&quot; configuration to keep things DRY. In order to merge these configurations together, we&#39;ll use a utility called <a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a>. With the &quot;common&quot; configuration in place, we won&#39;t have to duplicate code within the environment-specific configurations.</p>\n<p>Let&#39;s start by installing <code>webpack-merge</code> and splitting out the bits we&#39;ve already worked on in previous guides:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack-merge\n</code></pre>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token deleted">- |- webpack.config.js</span>\n<span class="token inserted">+ |- webpack.common.js</span>\n<span class="token inserted">+ |- webpack.dev.js</span>\n<span class="token inserted">+ |- webpack.prod.js</span>\n  |- /dist\n  |- /src\n    |- index.js\n    |- math.js\n  |- /node_modules\n</code></pre>\n<p><strong>webpack.common.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const path = require(\'path\');</span>\n<span class="token inserted">+ const CleanWebpackPlugin = require(\'clean-webpack-plugin\');</span>\n<span class="token inserted">+ const HtmlWebpackPlugin = require(\'html-webpack-plugin\');</span>\n+\n<span class="token inserted">+ module.exports = {</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     app: \'./src/index.js\'</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new CleanWebpackPlugin([\'dist\']),</span>\n<span class="token inserted">+     new HtmlWebpackPlugin({</span>\n<span class="token inserted">+       title: \'Production\'</span>\n<span class="token inserted">+     })</span>\n<span class="token inserted">+   ],</span>\n<span class="token inserted">+   output: {</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n<span class="token inserted">+     path: path.resolve(__dirname, \'dist\')</span>\n<span class="token inserted">+   }</span>\n<span class="token inserted">+ };</span>\n</code></pre>\n<p><strong>webpack.dev.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const merge = require(\'webpack-merge\');</span>\n<span class="token inserted">+ const common = require(\'./webpack.common.js\');</span>\n+\n<span class="token inserted">+ module.exports = merge(common, {</span>\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n<span class="token inserted">+   devServer: {</span>\n<span class="token inserted">+     contentBase: \'./dist\'</span>\n<span class="token inserted">+   }</span>\n<span class="token inserted">+ });</span>\n</code></pre>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const merge = require(\'webpack-merge\');</span>\n<span class="token inserted">+ const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');</span>\n<span class="token inserted">+ const common = require(\'./webpack.common.js\');</span>\n+\n<span class="token inserted">+ module.exports = merge(common, {</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new UglifyJSPlugin()</span>\n<span class="token inserted">+   ]</span>\n<span class="token inserted">+ });</span>\n</code></pre>\n<p>In <code>webpack.common.js</code>, we now have our <code>entry</code> and <code>output</code> setup configured and we&#39;ve included any plugins that are required for both environments. In <code>webpack.dev.js</code>, we&#39;ve added the recommended <code>devtool</code> for that environment (strong source mapping), as well as our simple <code>devServer</code> configuration. Finally, in <code>webpack.prod.js</code>, we included the <code>UglifyJSPlugin</code> which was first introduced by the <a href="/guides/tree-shaking">tree shaking</a> guide.</p>\n<p>Note the use of <code>merge()</code> in the environment-specific configurations to easily include our common configuration in <code>dev</code> and <code>prod</code>. The <code>webpack-merge</code> tool offers a variety of advanced features for merging but for our use case we won&#39;t need any of that.</p>\n<h2 class="header"><a class="anchor" href="#npm-scripts" id="npm-scripts"></a><span class="text">NPM Scripts</span><a class="icon-link" href="#npm-scripts"></a></h2>\n<p>Now let&#39;s repoint our <code>scripts</code> to the new configurations. We&#39;ll use the <em>development</em> one for our <code>webpack-dev-server</code>, <code>npm start</code>, script and the <em>production</em> one for our <code>npm run build</code> script:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n<span class="token deleted">-     "start": "webpack-dev-server --open",</span>\n<span class="token inserted">+     "start": "webpack-dev-server --open --config webpack.dev.js",</span>\n<span class="token deleted">-     "build": "webpack"</span>\n<span class="token inserted">+     "build": "webpack --config webpack.prod.js"</span>\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.17",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "express": "^4.15.3",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "webpack-dev-middleware": "^1.12.0",\n      "webpack-dev-server": "^2.9.1",\n      "webpack-merge": "^4.1.0",\n      "xml-loader": "^1.2.1"\n    }\n  }\n</code></pre>\n<p>Feel free to run those scripts and see how the output changes as we continue adding to our <em>production</em> configuration.</p>\n<h2 class="header"><a class="anchor" href="#minification" id="minification"></a><span class="text">Minification</span><a class="icon-link" href="#minification"></a></h2>\n<p>Note that while the <a href="/plugins/uglifyjs-webpack-plugin"><code>UglifyJSPlugin</code></a> is a great place to start for minification, there are other options out there. Here are a few more popular ones:</p>\n<ul>\n<li><a href="https://github.com/webpack-contrib/babel-minify-webpack-plugin"><code>BabelMinifyWebpackPlugin</code></a></li>\n<li><a href="https://github.com/roman01la/webpack-closure-compiler"><code>ClosureCompilerPlugin</code></a></li>\n</ul>\n<p>If you decide to try another, just make sure your new choice also drops dead code as described in the <a href="/guides/tree-shaking">tree shaking</a> guide.</p>\n<h2 class="header"><a class="anchor" href="#source-mapping" id="source-mapping"></a><span class="text">Source Mapping</span><a class="icon-link" href="#source-mapping"></a></h2>\n<p>We encourage you to have source maps enabled in production, as they are useful for debugging as well as running benchmark tests. That said, you should choose one with a fairly quick build speed that&#39;s recommended for production use (see <a href="/configuration/devtool"><code>devtool</code></a>). For this guide, we&#39;ll use the <code>source-map</code> option in <em>production</em> as opposed to the <code>inline-source-map</code> we used in <em>development</em>:</p>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="lang-diff">  const merge = require(\'webpack-merge\');\n  const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');\n  const common = require(\'./webpack.common.js\');\n\n  module.exports = merge(common, {\n<span class="token inserted">+   devtool: \'source-map\',</span>\n    plugins: [\n<span class="token deleted">-     new UglifyJSPlugin()</span>\n<span class="token inserted">+     new UglifyJSPlugin({</span>\n<span class="token inserted">+       sourceMap: true</span>\n<span class="token inserted">+     })</span>\n    ]\n  })\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Avoid <code>inline-***</code> and <code>eval-***</code> use in production as they can increase bundle size and reduce the overall performance. </div></blockquote><h2 class="header"><a class="anchor" href="#specify-the-environment" id="specify-the-environment"></a><span class="text">Specify the Environment</span><a class="icon-link" href="#specify-the-environment"></a></h2>\n<p>Many libraries will key off the <code>process.env.NODE_ENV</code> variable to determine what should be included in the library. For example, when not in <em>production</em> some libraries may add additional logging and testing to make debugging easier. However, with <code>process.env.NODE_ENV === &#39;production&#39;</code> they might drop or add significant portions of code to optimize how things run for your actual users. We can use webpack&#39;s built in <a href="/plugins/define-plugin"><code>DefinePlugin</code></a> to define this variable for all our dependencies:</p>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ const webpack = require(\'webpack\');</span>\n  const merge = require(\'webpack-merge\');\n  const UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\');\n  const common = require(\'./webpack.common.js\');\n\n  module.exports = merge(common, {\n    devtool: \'source-map\',\n    plugins: [\n      new UglifyJSPlugin({\n        sourceMap: true\n      }),\n<span class="token inserted">+     new webpack.DefinePlugin({</span>\n<span class="token inserted">+       \'process.env.NODE_ENV\': JSON.stringify(\'production\')</span>\n<span class="token inserted">+     })</span>\n    ]\n  })\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Technically, <code>NODE_ENV</code> is a system environment variable that Node.js exposes into running scripts. It is used by convention to determine dev-vs-prod behavior by server tools, build scripts, and client-side libraries. Contrary to expectations, <code>process.env.NODE_ENV</code> is not set to <code>&quot;production&quot;</code> <strong>within</strong> the build script <code>webpack.config.js</code>, see <a href="https://github.com/webpack/webpack/issues/2537">#2537</a>. Thus, conditionals like <code>process.env.NODE_ENV === &#39;production&#39; ? &#39;[name].[hash].bundle.js&#39; : &#39;[name].bundle.js&#39;</code> within webpack configurations do not work as expected. </div></blockquote><p>If you&#39;re using a library like <a href="https://facebook.github.io/react/"><code>react</code></a>, you should actually see a significant drop in bundle size after adding this plugin. Also note that any of our local <code>/src</code> code can key off of this as well, so the following check would be valid:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import { cube } from \'./math.js\';\n+\n<span class="token inserted">+ if (process.env.NODE_ENV !== \'production\') {</span>\n<span class="token inserted">+   console.log(\'Looks like we are in development mode!\');</span>\n<span class="token inserted">+ }</span>\n\n  function component() {\n    var element = document.createElement(\'pre\');\n\n    element.innerHTML = [\n      \'Hello webpack!\',\n      \'5 cubed is equal to \' + cube(5)\n    ].join(\'\\n\\n\');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<h2 class="header"><a class="anchor" href="#split-css" id="split-css"></a><span class="text">Split CSS</span><a class="icon-link" href="#split-css"></a></h2>\n<p>As mentioned in <strong>Asset Management</strong> at the end of the <a href="/guides/asset-management#loading-css">Loading CSS</a> section, it is typically best practice to split your CSS out to a separate file using the <code>ExtractTextPlugin</code>. There are some good examples of how to do this in the plugin&#39;s <a href="/plugins/extract-text-webpack-plugin">documentation</a>. The <code>disable</code> option can be used in combination with the <code>--env</code> flag to allow inline loading in development, which is recommended for Hot Module Replacement and build speed.</p>\n<h2 class="header"><a class="anchor" href="#cli-alternatives" id="cli-alternatives"></a><span class="text">CLI Alternatives</span><a class="icon-link" href="#cli-alternatives"></a></h2>\n<p>Some of what has been described above is also achievable via the command line. For example, the <code>--optimize-minimize</code> flag will include the <code>UglifyJSPlugin</code> behind the scenes. The <code>--define process.env.NODE_ENV=&quot;&#39;production&#39;&quot;</code> will do the same for the <code>DefinePlugin</code> instance described above. And, <code>webpack -p</code> will automatically invoke both those flags and thus the plugins to be included.</p>\n<p>While these short hand methods are nice, we usually recommend just using the configuration as it&#39;s better to understand exactly what is being done for you in both cases. The configuration also gives you more control on fine tuning other options within both plugins.</p>\n',title:"Production"},title:"Production",url:"/guides/production/"},{file:{attributes:{title:"Code Splitting",sort:9,contributors:["TheDutchCoder","bartushek","chrisVillanueva","jakearchibald","johnstew","jonwheeler","levy9527","pastelsky","pksjce","rafde","rahulcs","rouzbeh84","shaodahong","shaunwallace","shinxi","simon04","skipjack","sudarsangp","tomtasche"],group:"-",anchors:[{title:"Entry Points",id:"entry-points"},{title:"Prevent Duplication",id:"prevent-duplication"},{title:"Dynamic Imports",id:"dynamic-imports"},{title:"Bundle Analysis",id:"bundle-analysis"},{title:"Next Steps",id:"next-steps"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> This guide extends the examples provided in <a href="/guides/getting-started">Getting Started</a> and <a href="/guides/output-management">Output Management</a>. Please make sure you are at least familiar with the examples provided in them. </div></blockquote><p>Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.</p>\n<p>There are three general approaches to code splitting available:</p>\n<ul>\n<li>Entry Points: Manually split code using <a href="/configuration/entry-context"><code>entry</code></a> configuration.</li>\n<li>Prevent Duplication: Use the <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> to dedupe and split chunks.</li>\n<li>Dynamic Imports: Split code via inline function calls within modules.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#entry-points" id="entry-points"></a><span class="text">Entry Points</span><a class="icon-link" href="#entry-points"></a></h2>\n<p>This is by far the easiest, and most intuitive, way to split code. However, it is more manual and has some pitfalls we will go over. Let&#39;s take a look at how we might split another module from the main bundle:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- another-module.js</span>\n|- /node_modules\n</code></pre>\n<p><strong>another-module.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Another\'</span><span class="token punctuation">,</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'loaded!\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    index<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n    another<span class="token punctuation">:</span> <span class="token string">\'./src/another-module.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">\'Code Splitting\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This will yield the following build result:</p>\n<pre><code class="lang-bash">Hash: 309402710a14167f42a8\nVersion: webpack 2.6.1\nTime: 570ms\n            Asset    Size  Chunks                    Chunk Names\n  index.bundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  index\nanother.bundle.js  544 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  another\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/another-module.js 87 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>As mentioned there are some pitfalls to this approach:</p>\n<ul>\n<li>If there are any duplicated modules between entry chunks they will be included in both bundles.</li>\n<li>It isn&#39;t as flexible and can&#39;t be used to dynamically split code with the core application logic.</li>\n</ul>\n<p>The first of these two points is definitely an issue for our example, as <code>lodash</code> is also imported within <code>./src/index.js</code> and will thus be duplicated in both bundles. Let&#39;s remove this duplication by using the <code>CommonsChunkPlugin</code>.</p>\n<h2 class="header"><a class="anchor" href="#prevent-duplication" id="prevent-duplication"></a><span class="text">Prevent Duplication</span><a class="icon-link" href="#prevent-duplication"></a></h2>\n<p>The <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> allows us to extract common dependencies into an existing entry chunk or an entirely new chunk. Let&#39;s use this to de-duplicate the <code>lodash</code> dependency from the previous example:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n  const HTMLWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      index: \'./src/index.js\',\n      another: \'./src/another-module.js\'\n    },\n    plugins: [\n      new HTMLWebpackPlugin({\n        title: \'Code Splitting\'\n<span class="token deleted">-     })</span>\n<span class="token inserted">+     }),</span>\n<span class="token inserted">+     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token inserted">+       name: \'common\' // Specify the common bundle\'s name.</span>\n<span class="token inserted">+     })</span>\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>With the <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> in place, we should now see the duplicate dependency removed from our <code>index.bundle.js</code>. The plugin should notice that we&#39;ve separated <code>lodash</code> out to a separate chunk and remove the dead weight from our main bundle. Let&#39;s do an <code>npm run build</code> to see if it worked:</p>\n<pre><code class="lang-bash">Hash: 70a59f8d46ff12575481\nVersion: webpack 2.6.1\nTime: 510ms\n            Asset       Size  Chunks                    Chunk Names\n  index.bundle.js  665 bytes       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         index\nanother.bundle.js  537 bytes       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         another\n common.bundle.js     547 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  common\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/another-module.js 87 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>Here are some other useful plugins and loaders provided by the community for splitting code:</p>\n<ul>\n<li><a href="/plugins/extract-text-webpack-plugin"><code>ExtractTextPlugin</code></a>: Useful for splitting CSS out from the main application.</li>\n<li><a href="/loaders/bundle-loader"><code>bundle-loader</code></a>: Used to split code and lazy load the resulting bundles.</li>\n<li><a href="https://github.com/gaearon/promise-loader"><code>promise-loader</code></a>: Similar to the <code>bundle-loader</code> but uses promises.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> The <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> is also used to split vendor modules from core application code using <a href="/plugins/commons-chunk-plugin/#explicit-vendor-chunk">explicit vendor chunks</a>. </div></blockquote><h2 class="header"><a class="anchor" href="#dynamic-imports" id="dynamic-imports"></a><span class="text">Dynamic Imports</span><a class="icon-link" href="#dynamic-imports"></a></h2>\n<p>Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and more preferable approach is use to the <a href="/api/module-methods#import-"><code>import()</code> syntax</a> that conforms to the <a href="https://github.com/tc39/proposal-dynamic-import">ECMAScript proposal</a> for dynamic imports. The legacy, webpack-specific approach is to use <a href="/api/module-methods#require-ensure"><code>require.ensure</code></a>. Let&#39;s try using the first of these two approaches...</p>\n<blockquote class="warning"><div class="tip-content"> <code>import()</code> calls use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promises</a> internally. If you use <code>import()</code> with older browsers, remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>. </div></blockquote><p>Before we start, let&#39;s remove the extra <a href="/concepts/entry-points/"><code>entry</code></a> and <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> from our config as they won&#39;t be needed for this next demonstration:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token deleted">- const webpack = require(\'webpack\');</span>\n  const HTMLWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n<span class="token inserted">+     index: \'./src/index.js\'</span>\n<span class="token deleted">-     index: \'./src/index.js\',</span>\n<span class="token deleted">-     another: \'./src/another-module.js\'</span>\n    },\n    plugins: [\n      new HTMLWebpackPlugin({\n        title: \'Code Splitting\'\n<span class="token deleted">-     }),</span>\n<span class="token inserted">+     })</span>\n<span class="token deleted">-     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token deleted">-       name: \'common\' // Specify the common bundle\'s name.</span>\n<span class="token deleted">-     })</span>\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n<span class="token inserted">+     chunkFilename: \'[name].bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Note the use of <code>chunkFilename</code>, which determines the name of non-entry chunk files. For more information on <code>chunkFilename</code>, see <a href="/configuration/output/#output-chunkfilename">output documentation</a>. We&#39;ll also update our project to remove the now unused files:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token deleted">- |- another-module.js</span>\n|- /node_modules\n</code></pre>\n<p>Now, instead of statically importing <code>lodash</code>, we&#39;ll use dynamic importing to separate a chunk:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n-\n<span class="token deleted">- function component() {</span>\n<span class="token inserted">+ function getComponent() {</span>\n<span class="token deleted">-   var element = document.createElement(\'div\');</span>\n-\n<span class="token deleted">-   // Lodash, now imported by this script</span>\n<span class="token deleted">-   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n<span class="token inserted">+   return import(/* webpackChunkName: "lodash" */ \'lodash\').then(_ => {</span>\n<span class="token inserted">+     var element = document.createElement(\'div\');</span>\n+\n<span class="token inserted">+     element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n+\n<span class="token inserted">+     return element;</span>\n+\n<span class="token inserted">+   }).catch(error => \'An error occurred while loading the component\');</span>\n  }\n\n<span class="token deleted">- document.body.appendChild(component());</span>\n<span class="token inserted">+ getComponent().then(component => {</span>\n<span class="token inserted">+   document.body.appendChild(component);</span>\n<span class="token inserted">+ })</span>\n</code></pre>\n<p>Note the use of <code>webpackChunkName</code> in the comment. This will cause our separate bundle to be named <code>lodash.bundle.js</code> instead of just <code>[id].bundle.js</code>. For more information on <code>webpackChunkName</code> and the other available options, see the <a href="/api/module-methods#import-"><code>import()</code> documentation</a>. Let&#39;s run webpack to see <code>lodash</code> separated out to a separate bundle:</p>\n<pre><code class="lang-bash">Hash: a27e5bf1dd73c675d5c9\nVersion: webpack 2.6.1\nTime: 544ms\n           Asset     Size  Chunks                    Chunk Names\nlodash.bundle.js   541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  lodash\n index.bundle.js  6.35 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         index\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 377 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>If you&#39;ve enabled <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code> functions</a> via a pre-processor like babel, note that you can simplify the code as <code>import()</code> statements just return promises:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- function getComponent() {</span>\n<span class="token inserted">+ async function getComponent() {</span>\n<span class="token deleted">-   return import(/* webpackChunkName: "lodash" */ \'lodash\').then(_ => {</span>\n<span class="token deleted">-     var element = document.createElement(\'div\');</span>\n-\n<span class="token deleted">-     element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n-\n<span class="token deleted">-     return element;</span>\n-\n<span class="token deleted">-   }).catch(error => \'An error occurred while loading the component\');</span>\n<span class="token inserted">+   var element = document.createElement(\'div\');</span>\n<span class="token inserted">+   const _ = await import(/* webpackChunkName: "lodash" */ \'lodash\');</span>\n+\n<span class="token inserted">+   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n+\n<span class="token inserted">+   return element;</span>\n  }\n\n  getComponent().then(component => {\n    document.body.appendChild(component);\n  });\n</code></pre>\n<h2 class="header"><a class="anchor" href="#bundle-analysis" id="bundle-analysis"></a><span class="text">Bundle Analysis</span><a class="icon-link" href="#bundle-analysis"></a></h2>\n<p>Once you start splitting your code, it can be useful to analyze the output to check where modules have ended up. The <a href="https://github.com/webpack/analyse">official analyze tool</a> is a good place to start. There are some other community-supported options out there as well:</p>\n<ul>\n<li><a href="https://alexkuz.github.io/webpack-chart/">webpack-chart</a>: Interactive pie chart for webpack stats.</li>\n<li><a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a>: Visualize and analyze your bundles to see which modules are taking up space and which might be duplicates.</li>\n<li><a href="https://github.com/th0r/webpack-bundle-analyzer">webpack-bundle-analyzer</a>: A plugin and CLI utility that represents bundle content as convenient interactive zoomable treemap.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#next-steps" id="next-steps"></a><span class="text">Next Steps</span><a class="icon-link" href="#next-steps"></a></h2>\n<p>See <a href="/guides/lazy-loading">Lazy Loading</a> for a more concrete example of how <code>import()</code> can be used in a real application and <a href="/guides/caching">Caching</a> to learn how to split code more effectively.</p>\n',title:"Code Splitting"},title:"Code Splitting",url:"/guides/code-splitting/"},{file:{attributes:{title:"Lazy Loading",sort:10,contributors:["chrisVillanueva","iammerrick","skipjack"],related:[{title:"Lazy Loading ES2015 Modules in the Browser",url:"https://dzone.com/articles/lazy-loading-es2015-modules-in-the-browser"}],group:"-",anchors:[{title:"Example",id:"example"},{title:"Frameworks",id:"frameworks"}]},body:'<blockquote class="tip"><div class="tip-content"> This guide is a small follow-up to <a href="/guides/code-splitting">Code Splitting</a>. If you have not yet read through that guide, please do so now. </div></blockquote><p>Lazy, or &quot;on demand&quot;, loading is a great way to optimize your site or application. This practice essentially involves splitting your code at logical breakpoints, and then loading it once the user has done something that requires, or will require, a new block of code. This speeds up the initial load of the application and lightens its overall weight as some blocks may never even be loaded.</p>\n<h2 class="header"><a class="anchor" href="#example" id="example"></a><span class="text">Example</span><a class="icon-link" href="#example"></a></h2>\n<p>Let&#39;s take the example from <a href="/guides/code-splitting#dynamic-imports">Code Splitting</a> and tweak it a bit to demonstrate this concept even more. The code there does cause a separate chunk, <code>lodash.bundle.js</code>, to be generated and technically &quot;lazy-loads&quot; it as soon as the script is run. The trouble is that no user interaction is required to load the bundle -- meaning that every time the page is loaded, the request will fire. This doesn&#39;t help us too much and will impact performance negatively.</p>\n<p>Let&#39;s try something different. We&#39;ll add an interaction to log some text to the console when the user clicks a button. However, we&#39;ll wait to load that code (<code>print.js</code>) until the interaction occurs for the first time. To do this we&#39;ll go back and rework the <a href="/guides/code-splitting#dynamic-imports">final <em>Dynamic Imports</em> example</a> from <em>Code Splitting</em> and leave <code>lodash</code> in the main chunk.</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- print.js</span>\n|- /node_modules\n</code></pre>\n<p><strong>src/print.js</strong></p>\n<pre><code class="lang-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'The print.js module has loaded! See the network tab in dev tools...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Button Clicked: Here\\\'s "some text"!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ import _ from \'lodash\';</span>\n+\n<span class="token deleted">- async function getComponent() {</span>\n<span class="token inserted">+ function component() {</span>\n    var element = document.createElement(\'div\');\n<span class="token deleted">-   const _ = await import(/* webpackChunkName: "lodash" */ \'lodash\');</span>\n<span class="token inserted">+   var button = document.createElement(\'button\');</span>\n<span class="token inserted">+   var br = document.createElement(\'br\');</span>\n\n<span class="token inserted">+   button.innerHTML = \'Click me and look at the console!\';</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.appendChild(br);</span>\n<span class="token inserted">+   element.appendChild(button);</span>\n+\n<span class="token inserted">+   // Note that because a network request is involved, some indication</span>\n<span class="token inserted">+   // of loading would need to be shown in a production-level site/app.</span>\n<span class="token inserted">+   button.onclick = e => import(/* webpackChunkName: "print" */ \'./print\').then(module => {</span>\n<span class="token inserted">+     var print = module.default;</span>\n+\n<span class="token inserted">+     print();</span>\n<span class="token inserted">+   });</span>\n\n    return element;\n  }\n\n<span class="token deleted">- getComponent().then(component => {</span>\n<span class="token deleted">-   document.body.appendChild(component);</span>\n<span class="token deleted">- });</span>\n<span class="token inserted">+ document.body.appendChild(component());</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Note that when using <code>import()</code> on ES6 modules you must reference the <code>.default</code> property as it&#39;s the actual <code>module</code> object that will be returned when the promise is resolved. </div></blockquote><p>Now let&#39;s run webpack and check out our new lazy-loading functionality:</p>\n<pre><code class="lang-bash">Hash: e0f95cc0bda81c2a1340\nVersion: webpack 3.0.0\nTime: 1378ms\n          Asset       Size  Chunks                    Chunk Names\nprint.bundle.js  417 bytes       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\nindex.bundle.js     548 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  index\n     index.html  189 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 742 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/print.js 165 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<h2 class="header"><a class="anchor" href="#frameworks" id="frameworks"></a><span class="text">Frameworks</span><a class="icon-link" href="#frameworks"></a></h2>\n<p>Many frameworks and libraries have their own recommendations on how this should be accomplished within their methodologies. Here are a few examples:</p>\n<ul>\n<li>React: <a href="https://reacttraining.com/react-router/web/guides/code-splitting">Code Splitting and Lazy Loading</a></li>\n<li>Vue: <a href="https://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/">Lazy Load in Vue using Webpack&#39;s code splitting</a></li>\n</ul>\n',title:"Lazy Loading"},title:"Lazy Loading",url:"/guides/lazy-loading/"},{file:{attributes:{title:"Caching",sort:11,contributors:["dannycjones","jouni-kantola","okonet","skipjack"],related:[{title:"Predictable Long Term Caching",url:"https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31"},{title:"Long Term Caching of Static Assets",url:"https://medium.com/@okonetchnikov/long-term-caching-of-static-assets-with-webpack-1ecb139adb95#.vtwnssps4"},{title:"Webpack & Caching",url:"https://gist.github.com/sokra/ff1b0290282bfa2c037bdb6dcca1a7aa"},{title:"Advanced Webpack Presentation",url:"https://presentations.survivejs.com/advanced-webpack/"},{title:"Issue 1315",url:"https://github.com/webpack/webpack/issues/1315"},{title:"Issue 652",url:"https://github.com/webpack/webpack.js.org/issues/652"}],group:"-",anchors:[{title:"Output Filenames",id:"output-filenames"},{title:"Extracting Boilerplate",id:"extracting-boilerplate"},{title:"Module Identifiers",id:"module-identifiers"},{title:"Conclusion",id:"conclusion"}]},body:'<blockquote class="tip"><div class="tip-content"> The examples in this guide stem from <a href="/guides/getting-started">getting started</a>, <a href="/guides/output-management">output management</a> and <a href="/guides/code-splitting">code splitting</a>. </div></blockquote><p>So we&#39;re using webpack to bundle our modular application which yields a deployable <code>/dist</code> directory. Once the contents of <code>/dist</code> have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called <a href="http://searchstorage.techtarget.com/definition/cache">caching</a>. This allows sites to load faster with less unnecessary network traffic, however it can also cause headaches when you need new code to be picked up.</p>\n<p>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their contents has changed.</p>\n<h2 class="header"><a class="anchor" href="#output-filenames" id="output-filenames"></a><span class="text">Output Filenames</span><a class="icon-link" href="#output-filenames"></a></h2>\n<p>A simple way to ensure the browser picks up changed files is by using <code>output.filename</code> <a href="/configuration/output#output-filename">substitutions</a>. The <code>[hash]</code> substitution can be used to include a build-specific hash in the filename, however it&#39;s even better to use the <code>[chunkhash]</code> substitution which includes a chunk-specific hash in the filename.</p>\n<p>Let&#39;s get our project set up using the example from <a href="/guides/getting-started">getting started</a> with the <code>plugins</code> from <a href="/guides/output-management">output management</a>, so we don&#39;t have to deal with maintaining our <code>index.html</code> file manually:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n<span class="token deleted">-       title: \'Output Management\'</span>\n<span class="token inserted">+       title: \'Caching\'</span>\n      })\n    ],\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].[chunkhash].js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Running our build script, <code>npm run build</code>, with this configuration should produce the following output:</p>\n<pre><code class="lang-bash">Hash: f7a289a94c5e4cd1e566\nVersion: webpack 3.5.1\nTime: 835ms\n                       Asset       Size  Chunks                    Chunk Names\nmain.7e2c49a622975ebd9b7e.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  197 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n     1 asset\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>As you can see the bundle&#39;s name now reflects its content (via the hash). If we run another build without making any changes, we&#39;d expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</p>\n<pre><code class="lang-bash">Hash: f7a289a94c5e4cd1e566\nVersion: webpack 3.5.1\nTime: 835ms\n                       Asset       Size  Chunks                    Chunk Names\nmain.205199ab45963f6a62ec.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  197 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 216 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n     1 asset\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</p>\n<blockquote class="warning"><div class="tip-content"> Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe. </div></blockquote><h2 class="header"><a class="anchor" href="#extracting-boilerplate" id="extracting-boilerplate"></a><span class="text">Extracting Boilerplate</span><a class="icon-link" href="#extracting-boilerplate"></a></h2>\n<p>As we learned in <a href="/guides/code-splitting">code splitting</a>, the <a href="/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> can be used to split modules out into separate bundles. A lesser-known feature of the <code>CommonsChunkPlugin</code> is extracting webpack&#39;s boilerplate and manifest which can change with every build. By specifying a name not mentioned in the <code>entry</code> configuration, the plugin will automatically extract what we want into a separate bundle:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Caching\'\n<span class="token deleted">-     })</span>\n<span class="token inserted">+     }),</span>\n<span class="token inserted">+     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token inserted">+       name: \'manifest\'</span>\n<span class="token inserted">+     })</span>\n    ],\n    output: {\n      filename: \'[name].[chunkhash].js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Let&#39;s run another build to see the extracted <code>manifest</code> bundle:</p>\n<pre><code class="lang-bash">Hash: 80552632979856ddab34\nVersion: webpack 3.3.0\nTime: 1512ms\n                           Asset       Size  Chunks                    Chunk Names\n    main.5ec8e954e32d66dee1aa.js     542 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\nmanifest.719796322be98041fff2.js    5.82 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  275 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/index.js 336 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>It&#39;s also good practice to extract third-party libraries, such as <code>lodash</code> or <code>react</code>, to a separate <code>vendor</code> chunk as they are less likely to change than our local source code. This step will allow clients to request even less from the server to stay up to date. This can be done by using a combination of a new <code>entry</code> point along with another <code>CommonsChunkPlugin</code> instance:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n  const webpack = require(\'webpack\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n<span class="token deleted">-   entry: \'./src/index.js\',</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     main: \'./src/index.js\',</span>\n<span class="token inserted">+     vendor: [</span>\n<span class="token inserted">+       \'lodash\'</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Caching\'\n      }),\n<span class="token inserted">+     new webpack.optimize.CommonsChunkPlugin({</span>\n<span class="token inserted">+       name: \'vendor\'</span>\n<span class="token inserted">+     }),</span>\n      new webpack.optimize.CommonsChunkPlugin({\n        name: \'manifest\'\n      })\n    ],\n    output: {\n      filename: \'[name].[chunkhash].js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Note that order matters here. The <code>&#39;vendor&#39;</code> instance of the <code>CommonsChunkPlugin</code> must be included prior to the <code>&#39;manifest&#39;</code> instance. </div></blockquote><p>Let&#39;s run another build to see our new <code>vendor</code> bundle:</p>\n<pre><code class="lang-bash">Hash: 69eb92ebf8935413280d\nVersion: webpack 3.3.0\nTime: 1502ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.8196d409d2f988123318.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.0ac0ae2d4a11214ccd19.js  791 bytes       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.004a1114de8bcf026622.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 336 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<h2 class="header"><a class="anchor" href="#module-identifiers" id="module-identifiers"></a><span class="text">Module Identifiers</span><a class="icon-link" href="#module-identifiers"></a></h2>\n<p>Let&#39;s add another module, <code>print.js</code>, to our project:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- print.js</span>\n|- /node_modules\n</code></pre>\n<p><strong>print.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ export default function print(text) {</span>\n<span class="token inserted">+   console.log(text);</span>\n<span class="token inserted">+ };</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import Print from \'./print\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>Running another build, we would expect only our <code>main</code> bundle&#39;s hash to change, however...</p>\n<pre><code class="lang-bash">Hash: d38a06644fdbb898d795\nVersion: webpack 3.3.0\nTime: 1445ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.a7561fb0e9a071baadb9.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.b746e3eb72875af2caa9.js    1.22 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.1400d5af64fc1b7b3a45.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 421 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> ./src/print.js 62 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>5<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>... we can see that all three have. This is because each <a href="/api/module-variables#module-id-commonjs-"><code>module.id</code></a> is incremented based on resolving order by default. Meaning when the order of resolving is changed, the IDs will be changed as well. So, to recap:</p>\n<ul>\n<li>The <code>main</code> bundle changed because of its new content.</li>\n<li>The <code>vendor</code> bundle changed because its <code>module.id</code> was changed.</li>\n<li>And, the <code>manifest</code> bundle changed because it now contains a reference to a new module.</li>\n</ul>\n<p>The first and last are expected -- it&#39;s the <code>vendor</code> hash we want to fix. Luckily, there are two plugins we can use to resolve this issue. The first is the <a href="/plugins/named-modules-plugin"><code>NamedModulesPlugin</code></a>, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the <a href="/plugins/hashed-module-ids-plugin"><code>HashedModuleIdsPlugin</code></a>, which is recommended for production builds:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: {\n      main: \'./src/index.js\',\n      vendor: [\n        \'lodash\'\n      ]\n    },\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Caching\'\n      }),\n<span class="token inserted">+     new webpack.HashedModuleIdsPlugin(),</span>\n      new webpack.optimize.CommonsChunkPlugin({\n        name: \'vendor\'\n      }),\n      new webpack.optimize.CommonsChunkPlugin({\n        name: \'manifest\'\n      })\n    ],\n    output: {\n      filename: \'[name].[chunkhash].js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>Now, despite any new local dependencies, our <code>vendor</code> hash should stay consistent between builds:</p>\n<pre><code class="lang-bash">Hash: 1f49b42afb9a5acfbaff\nVersion: webpack 3.3.0\nTime: 1372ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.eed6dcc3b30cfa138aaa.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.d103ac311788fcb7e329.js    1.22 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.d2a6dc1ccece13f5a164.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3Di9<span class="token punctuation">]</span> ./src/print.js 62 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3IRH<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>DuR2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>lVK7<span class="token punctuation">]</span> ./src/index.js 421 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>And let&#39;s modify our <code>src/index.js</code> to temporarily remove that extra dependency:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n<span class="token deleted">- import Print from \'./print\';</span>\n<span class="token inserted">+ // import Print from \'./print\';</span>\n\n  function component() {\n    var element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token deleted">-   element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n<span class="token inserted">+   // element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>And finally run our build again:</p>\n<pre><code class="lang-bash">Hash: 37e1358f135c0b992f72\nVersion: webpack 3.3.0\nTime: 1557ms\n                           Asset       Size  Chunks                    Chunk Names\n  vendor.eed6dcc3b30cfa138aaa.js     541 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.fc7f38e648da79db2aba.js  891 bytes       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\nmanifest.bb5820632fb66c3fb357.js    5.85 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         manifest\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3IRH<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>DuR2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> multi lodash 28 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>lVK7<span class="token punctuation">]</span> ./src/index.js 427 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\n</code></pre>\n<p>We can see that both builds yielded <code>eed6dcc3b30cfa138aaa</code> in the <code>vendor</code> bundle&#39;s filename.</p>\n<h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>Caching gets messy. Plain and simple. However the walk-through above should give you a running start to deploying consistent, cachable assets. See the <em>Further Reading</em> section below to learn more.</p>\n',title:"Caching"},title:"Caching",url:"/guides/caching/"},{file:{attributes:{title:"Authoring Libraries",sort:12,contributors:["5angel","johnstew","marioacc","pksjce","simon04"],group:"-",anchors:[{title:"Authoring a Library",id:"authoring-a-library"},{title:"Base Configuration",id:"base-configuration"},{title:"Externalize Lodash",id:"externalize-lodash"},{title:"External Limitations",id:"external-limitations"},{title:"Expose the Library",id:"expose-the-library"},{title:"Final Steps",id:"final-steps"}],related:[]},body:'<p>Aside from applications, webpack can also be used to bundle JavaScript libraries. The following guide is meant for library authors looking to streamline their bundling strategy.</p>\n<h2 class="header"><a class="anchor" href="#authoring-a-library" id="authoring-a-library"></a><span class="text">Authoring a Library</span><a class="icon-link" href="#authoring-a-library"></a></h2>\n<p>Let&#39;s assume that you are writing a small library ,<code>webpack-numbers</code>, that allows users to convert the numbers 1 through 5 from their numeric representation to a textual one and vice-versa, e.g. 2 to &#39;two&#39;.</p>\n<p>The basic project structure may look like this:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+  |- webpack.config.js</span>\n<span class="token inserted">+  |- package.json</span>\n<span class="token inserted">+  |- /src</span>\n<span class="token inserted">+    |- index.js</span>\n<span class="token inserted">+    |- ref.json</span>\n</code></pre>\n<p>Initialize npm, install webpack and lodash:</p>\n<pre><code class="lang-bash">npm init -y\nnpm <span class="token function">install</span> --save-dev webpack lodash\n</code></pre>\n<p><strong>src/ref.json</strong></p>\n<pre><code class="lang-javascript"><span class="token punctuation">[</span><span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"One"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Two"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Three"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Four"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Five"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">"num"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">"word"</span><span class="token punctuation">:</span> <span class="token string">"Zero"</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'./ref.json\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span>accum<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token punctuation">:</span> accum<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span>accum<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&amp;&amp;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token punctuation">:</span> accum<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The usage specification for the library use will be as follows:</p>\n<pre><code class="lang-js"><span class="token comment">// ES2015 module import</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> webpackNumbers <span class="token keyword">from</span> <span class="token string">\'webpack-numbers\'</span><span class="token punctuation">;</span>\n<span class="token comment">// CommonJS module require</span>\n<span class="token keyword">var</span> webpackNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-numbers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// ES2015 and CommonJS module use</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// AMD module require</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'webpackNumbers\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> webpackNumbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// AMD module use</span>\n  webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The consumer also can use the library by loading it via a script tag:</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/webpack-numbers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n  // ...\n  // Global variable\n  webpackNumbers.wordToNum(\'Five\')\n  // Property in the window object\n  window.webpackNumbers.wordToNum(\'Five\')\n  // ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>Note that we can also configure it to expose the library in the following ways:</p>\n<ul>\n<li>Property in the global object, for node.</li>\n<li>Property in the <code>this</code> object.</li>\n</ul>\n<p>For full library configuration and code please refer to <a href="https://github.com/kalcifer/webpack-library-example">webpack-library-example</a>.</p>\n<h2 class="header"><a class="anchor" href="#base-configuration" id="base-configuration"></a><span class="text">Base Configuration</span><a class="icon-link" href="#base-configuration"></a></h2>\n<p>Now let&#39;s bundle this library in a way that will achieve the following goals:</p>\n<ul>\n<li>Without bundling <code>lodash</code>, but requiring it to be loaded by the consumer using <code>externals</code>.</li>\n<li>Setting the library name as <code>webpack-numbers</code>.</li>\n<li>Exposing the library as a variable called <code>webpackNumbers</code>.</li>\n<li>Being able to access the library inside Node.js.</li>\n</ul>\n<p>Also, the consumer should be able to access the library the following ways:</p>\n<ul>\n<li>ES2015 module. i.e. <code>import webpackNumbers from &#39;webpack-numbers&#39;</code>.</li>\n<li>CommonJS module. i.e. <code>require(&#39;webpack-numbers&#39;)</code>.</li>\n<li>Global variable when included through <code>script</code> tag.</li>\n</ul>\n<p>We can start with this basic webpack configuration:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'webpack-numbers.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#externalize-lodash" id="externalize-lodash"></a><span class="text">Externalize Lodash</span><a class="icon-link" href="#externalize-lodash"></a></h2>\n<p>Now, if you run <code>webpack</code>, you will find that a largish bundle is created. If you inspect the file, you&#39;ll see that lodash has been bundled along with your code. In this case, we&#39;d prefer to treat <code>lodash</code> as a <code>peerDependency</code>. Meaning that the consumer should already have <code>lodash</code> installed. Hence you would want to give up control of this external library to the consumer of your library.</p>\n<p>This can be done using the <code>externals</code> configuration:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      path: path.resolve(__dirname, \'dist\'),\n      filename: \'webpack-numbers.js\'\n<span class="token deleted">-   }</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   externals: {</span>\n<span class="token inserted">+     lodash: {</span>\n<span class="token inserted">+       commonjs: \'lodash\',</span>\n<span class="token inserted">+       commonjs2: \'lodash\',</span>\n<span class="token inserted">+       amd: \'lodash\',</span>\n<span class="token inserted">+       root: \'_\'</span>\n<span class="token inserted">+     }</span>\n<span class="token inserted">+   }</span>\n  };\n</code></pre>\n<p>This means that your library expects a dependency named <code>lodash</code> to be available in the consumer&#39;s environment.</p>\n<blockquote class="tip"><div class="tip-content"> Note that if you only plan on using your library as a dependency in another webpack bundle, you may specify <code>externals</code> as an array. </div></blockquote><h2 class="header"><a class="anchor" href="#external-limitations" id="external-limitations"></a><span class="text">External Limitations</span><a class="icon-link" href="#external-limitations"></a></h2>\n<p>For libraries that use several files from a dependency:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> A <span class="token keyword">from</span> <span class="token string">\'library/one\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> B <span class="token keyword">from</span> <span class="token string">\'library/two\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n</code></pre>\n<p>You won&#39;t be able to exclude them from bundle by specifying <code>library</code> in the externals. You&#39;ll either need to exclude them one by one or by using a regular expression.</p>\n<pre><code class="lang-js">externals<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'library/one\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'library/two\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// Everything that starts with "library/"</span>\n  <span class="token regex">/^library\\/.+$/</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#expose-the-library" id="expose-the-library"></a><span class="text">Expose the Library</span><a class="icon-link" href="#expose-the-library"></a></h2>\n<p>For widespread use of the library, we would like it to be compatible in different environments, i.e. CommonJS, AMD, Node.js and as a global variable. To make your library available for consumption, add the <code>library</code> property inside <code>output</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      path: path.resolve(__dirname, \'dist\'),\n<span class="token deleted">-     filename: \'webpack-numbers.js\'</span>\n<span class="token inserted">+     filename: \'webpack-numbers.js\',</span>\n<span class="token inserted">+     library: \'webpackNumbers\'</span>\n    },\n    externals: {\n      lodash: {\n        commonjs: \'lodash\',\n        commonjs2: \'lodash\',\n        amd: \'lodash\',\n        root: \'_\'\n      }\n    }\n  };\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that the <code>library</code> setup is tied to the <code>entry</code> configuration. For most libraries, specifying a single entry point is sufficient. While <a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">multi-part libraries</a> are possible, it is simpler to expose partial exports through an <a href="https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file">index script</a> that serves as a single entry point. Using an <code>array</code> as an <code>entry</code> point for a library is <strong>not recommended</strong>. </div></blockquote><p>This exposes your library bundle available as a global variable named <code>webpackNumbers</code> when imported. To make the library compatible with other environments, add <code>libraryTarget</code> property to the config. This will add the different options about how the library can be exposed.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  var path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      path: path.resolve(__dirname, \'dist\'),\n      filename: \'webpack-numbers.js\',\n<span class="token deleted">-     library: \'webpackNumbers\'</span>\n<span class="token inserted">+     library: \'webpackNumbers\',</span>\n<span class="token inserted">+     libraryTarget: \'umd\'</span>\n    },\n    externals: {\n      lodash: {\n        commonjs: \'lodash\',\n        commonjs2: \'lodash\',\n        amd: \'lodash\',\n        root: \'_\'\n      }\n    }\n  };\n</code></pre>\n<p>You can expose the library in the following ways:</p>\n<ul>\n<li>Variable: as a global variable made available by a <code>script</code> tag (<code>libraryTarget:&#39;var&#39;</code>).</li>\n<li>This: available through the <code>this</code> object (<code>libraryTarget:&#39;this&#39;</code>).</li>\n<li>Window: available trough the <code>window</code> object, in the browser (<code>libraryTarget:&#39;window&#39;</code>).</li>\n<li>UMD: available after AMD or CommonJS <code>require</code> (<code>libraryTarget:&#39;umd&#39;</code>).</li>\n</ul>\n<p>If <code>library</code> is set and <code>libraryTarget</code> is not, <code>libraryTarget</code> defaults to <code>var</code> as specified in the <a href="/configuration/output">output configuration documentation</a>. See <a href="/configuration/output#output-librarytarget"><code>output.libraryTarget</code></a> there for a detailed list of all available options.</p>\n<blockquote class="warning"><div class="tip-content"> With webpack 3.5.5, using <code>libraryTarget: { root:&#39;_&#39; }</code> doesn&#39;t work properly (as stated in <a href="https://github.com/webpack/webpack/issues/4824">issue 4824</a>). However, you can set <code>libraryTarget: { var: &#39;_&#39; }</code> to expect the library as a global variable. </div></blockquote><h3 class="header"><a class="anchor" href="#final-steps" id="final-steps"></a><span class="text">Final Steps</span><a class="icon-link" href="#final-steps"></a></h3>\n<p>Optimize your output for production by following the steps in the <a href="/guides/production">production guide</a>. Let&#39;s also add the path to your generated bundle as the package&#39;s <code>main</code> field in with our <code>package.json</code></p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Or, to add as standard module as per <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage">this guide</a>:</p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"src/index.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The key <code>main</code> refers to the <a href="https://docs.npmjs.com/files/package.json#main">standard from <code>package.json</code></a>, and <code>module</code> to <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md">a</a> <a href="https://github.com/rollup/rollup/wiki/pkg.module">proposal</a> to allow the JavaScript ecosystem upgrade to use ES2015 modules without breaking backwards compatibility.</p>\n<blockquote class="warning"><div class="tip-content"> The <code>module</code> property should point to a script that utilizes ES2015 module syntax but no other syntax features that aren&#39;t yet supported by browsers or node. This enables </div></blockquote><p>Now you can <a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">publish it as an npm package</a> and find it at <a href="https://unpkg.com/#/">unpkg.com</a> to distribute it to your users.</p>\n<blockquote class="tip"><div class="tip-content"> To expose stylesheets associated with your library, the <a href="/plugins/extract-text-webpack-plugin"><code>ExtractTextPlugin</code></a> should be used. Users can then consume and load these as they would any other stylesheet. </div></blockquote>',title:"Authoring Libraries"},title:"Authoring Libraries",url:"/guides/author-libraries/"},{file:{attributes:{title:"Shimming",sort:13,contributors:["jeremenichelli","jhnns","pksjce","simon04","svyandun"],related:[{title:"Reward modern browser users script",url:"https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7#c665"},{title:"useBuiltIns in babel-preset-env",url:"https://github.com/babel/babel-preset-env#usebuiltins"}],group:"-",anchors:[{title:"Shimming Globals",id:"shimming-globals"},{title:"Granular Shimming",id:"granular-shimming"},{title:"Global Exports",id:"global-exports"},{title:"Loading Polyfills",id:"loading-polyfills"},{title:"Further Optimizations",id:"further-optimizations"},{title:"Node Built-Ins",id:"node-built-ins"},{title:"Other Utilities",id:"other-utilities"}]},body:'<p>The <code>webpack</code> compiler can understand modules written as ES2015 modules, CommonJS or AMD. However, some third party libraries may expect global dependencies (e.g. <code>$</code> for <code>jQuery</code>). The libraries might also create globals which need to be exported. These &quot;broken modules&quot; are one instance where <em>shimming</em> comes into play.</p>\n<blockquote class="warning"><div class="tip-content"> <strong>We don&#39;t recommend using globals!</strong> The whole concept behind webpack is to allow more modular front-end development. This means writing isolated modules that are well contained and do not rely on hidden dependencies (e.g. globals). Please use these features only when necessary. </div></blockquote><p>Another instance where <em>shimming</em> can be useful is when you want to <a href="https://en.wikipedia.org/wiki/Polyfill">polyfill</a> browser functionality to support more users. In this case, you may only want to deliver those polyfills to the browsers that need patching (i.e. load them on demand).</p>\n<p>The following article will walk through both of these use cases.</p>\n<blockquote class="tip"><div class="tip-content"> For simplicity, this guide stems from the examples in <a href="/guides/getting-started">Getting Started</a>. Please make sure you are familiar with the setup there before moving on. </div></blockquote><h2 class="header"><a class="anchor" href="#shimming-globals" id="shimming-globals"></a><span class="text">Shimming Globals</span><a class="icon-link" href="#shimming-globals"></a></h2>\n<p>Let&#39;s start with the first use case of shimming global variables. Before we do anything let&#39;s take another look at our project:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules\n</code></pre>\n<p>Remember that <code>lodash</code> package we were using? For demonstration purposes, let&#39;s say we wanted to instead provide this as a global throughout our application. To do this, we can use the <code>ProvidePlugin</code>.</p>\n<p>The <a href="/plugins/provide-plugin"><code>ProvidePlugin</code></a> makes a package available as a variable in every module compiled through webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let&#39;s go ahead by removing the <code>import</code> statement for <code>lodash</code> and instead providing it via the plugin:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import _ from \'lodash\';</span>\n-\n  function component() {\n    var element = document.createElement(\'div\');\n\n<span class="token deleted">-   // Lodash, now imported by this script</span>\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n<span class="token inserted">+ const webpack = require(\'webpack\');</span>\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n<span class="token deleted">-   }</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     new webpack.ProvidePlugin({</span>\n<span class="token inserted">+       _: \'lodash\'</span>\n<span class="token inserted">+     })</span>\n<span class="token inserted">+   ]</span>\n  };\n</code></pre>\n<p>What we&#39;ve essentially done here is tell webpack...</p>\n<blockquote>\n<p>If you encounter at least one instance of the variable <code>lodash</code>, include the <code>lodash</code> package and provide it to the modules that need it.</p>\n</blockquote>\n<p>If we run a build, we should still see the same output:</p>\n<pre><code class="lang-bash">Hash: f450fa59fa951c68c416\nVersion: webpack 2.2.0\nTime: 343ms\n    Asset    Size  Chunks                    Chunk Names\nbundle.js  544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./~/lodash/lodash.js 540 kB <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/index.js 189 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n</code></pre>\n<p>We can also use the <code>ProvidePlugin</code> to expose a single export of a module by configuring it with an &quot;array path&quot; (e.g. <code>[module, child, ...children?]</code>). So let&#39;s imagine we only wanted to provide the <code>join</code> method from <code>lodash</code> wherever it&#39;s invoked:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  function component() {\n    var element = document.createElement(\'div\');\n\n<span class="token deleted">-   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');</span>\n<span class="token inserted">+   element.innerHTML = join([\'Hello\', \'webpack\'], \' \');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n<span class="token deleted">-       _: \'lodash\'</span>\n<span class="token inserted">+       join: [\'lodash\', \'join\']</span>\n      })\n    ]\n  };\n</code></pre>\n<p>This would go nicely with <a href="/guides/tree-shaking">Tree Shaking</a> as the rest of the <code>lodash</code> library should get dropped.</p>\n<h2 class="header"><a class="anchor" href="#granular-shimming" id="granular-shimming"></a><span class="text">Granular Shimming</span><a class="icon-link" href="#granular-shimming"></a></h2>\n<p>Some legacy modules rely on <code>this</code> being the <code>window</code> object. Let&#39;s update our <code>index.js</code> so this is the case:</p>\n<pre><code class="lang-diff">  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n+\n<span class="token inserted">+   // Assume we are in the context of `window`</span>\n<span class="token inserted">+   this.alert(\'Hmmm, this probably isn\\\'t a great idea...\')</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p>This becomes a problem when the module is executed in a CommonJS context where <code>this</code> is equal to <code>module.exports</code>. In this case you can override <code>this</code> using the <a href="/loaders/imports-loader/"><code>imports-loader</code></a>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n<span class="token inserted">+   module: {</span>\n<span class="token inserted">+     rules: [</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: require.resolve(\'index.js\'),</span>\n<span class="token inserted">+         use: \'imports-loader?this=>window\'</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     ]</span>\n<span class="token inserted">+   },</span>\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: [\'lodash\', \'join\']\n      })\n    ]\n  };\n</code></pre>\n<h2 class="header"><a class="anchor" href="#global-exports" id="global-exports"></a><span class="text">Global Exports</span><a class="icon-link" href="#global-exports"></a></h2>\n<p>Let&#39;s say a library creates a global variable that it expects its consumers to use. We can add a small module to our setup to demonstrate this:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- globals.js</span>\n  |- /node_modules\n</code></pre>\n<p><strong>src/globals.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token string">\'blah.txt\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> helpers <span class="token operator">=</span> <span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'test something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parse<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'parse something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Now, while you&#39;d likely never do this in your own source code, you may encounter a dated library you&#39;d like to use that contains similar code to what&#39;s shown above. In this case, we can use <a href="/loaders/exports-loader/"><code>exports-loader</code></a>, to export that global variable as a normal module export. For instance, in order to export <code>file</code> as <code>file</code> and <code>helpers.parse</code> as <code>parse</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve(\'index.js\'),\n          use: \'imports-loader?this=>window\'\n<span class="token deleted">-       }</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+       {</span>\n<span class="token inserted">+         test: require.resolve(\'globals.js\'),</span>\n<span class="token inserted">+         use: \'exports-loader?file,parse=helpers.parse\'</span>\n<span class="token inserted">+       }</span>\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: [\'lodash\', \'join\']\n      })\n    ]\n  };\n</code></pre>\n<p>Now from within our entry script (i.e. <code>src/index.js</code>), we could <code>import { file, parse } from &#39;./globals.js&#39;;</code> and all should work smoothly.</p>\n<h2 class="header"><a class="anchor" href="#loading-polyfills" id="loading-polyfills"></a><span class="text">Loading Polyfills</span><a class="icon-link" href="#loading-polyfills"></a></h2>\n<p>Almost everything we&#39;ve discussed thus far has been in relation to handling legacy packages. Let&#39;s move on to our second topic: <strong>polyfills</strong>.</p>\n<p>There&#39;s a lot of ways to load polyfills. For example, to include the <a href="https://babeljs.io/docs/usage/polyfill/"><code>babel-polyfill</code></a> we might simply:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save babel-polyfill\n</code></pre>\n<p>and <code>import</code> it so as to include it in our main bundle:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token inserted">+ import \'babel-polyfill\';</span>\n+\n  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that we aren&#39;t binding the <code>import</code> to a variable. This is because polyfills simply run on their own, prior to the rest of the code base, allowing us to then assume certain native functionality exists. </div></blockquote><p>Now while this is one approach, <strong>including polyfills in the main bundle is not recommended</strong> because this penalizes modern browsers users by making them download a bigger file with unneeded scripts.</p>\n<p>Let&#39;s move our <code>import</code> to a new file and add the <a href="https://github.com/github/fetch"><code>whatwg-fetch</code></a> polyfill:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save whatwg-fetch\n</code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff"><span class="token deleted">- import \'babel-polyfill\';</span>\n-\n  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n</code></pre>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n  |- /src\n    |- index.js\n    |- globals.js\n<span class="token inserted">+   |- polyfills.js</span>\n  |- /node_modules\n</code></pre>\n<p><strong>src/polyfills.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> <span class="token string">\'babel-polyfill\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'whatwg-fetch\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const webpack = require(\'webpack\');\n\n  module.exports = {\n<span class="token deleted">-   entry: \'./src/index.js\',</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     polyfills: \'./src/polyfills.js\',</span>\n<span class="token inserted">+     index: \'./src/index.js\'</span>\n<span class="token inserted">+   },</span>\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n      path: path.resolve(__dirname, \'dist\')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve(\'index.js\'),\n          use: \'imports-loader?this=>window\'\n        },\n        {\n          test: require.resolve(\'globals.js\'),\n          use: \'exports-loader?file,parse=helpers.parse\'\n        }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: [\'lodash\', \'join\']\n      })\n    ]\n  };\n</code></pre>\n<p>With that in place, we can add the logic to conditionally load our new <code>polyfills.bundle.js</code> file. How you make this decision depends on the technologies and browsers you need to support. We&#39;ll just do some simple testing to determine whether our polyfills are needed:</p>\n<p><strong>dist/index.html</strong></p>\n<pre><code class="lang-diff">  &lt;html>\n    &lt;head>\n      &lt;title>Getting Started&lt;/title>\n<span class="token inserted">+     &lt;script></span>\n<span class="token inserted">+       var modernBrowser = (</span>\n<span class="token inserted">+         \'fetch\' in window &amp;&amp;</span>\n<span class="token inserted">+         \'assign\' in Object</span>\n<span class="token inserted">+       );</span>\n+\n<span class="token inserted">+       if ( !modernBrowser ) {</span>\n<span class="token inserted">+         var scriptElement = document.createElement(\'script\');</span>\n+\n<span class="token inserted">+         scriptElement.async = false;</span>\n<span class="token inserted">+         scriptElement.src = \'/polyfills.bundle.js\';</span>\n<span class="token inserted">+         document.head.appendChild(scriptElement);</span>\n<span class="token inserted">+       }</span>\n<span class="token inserted">+     &lt;/script></span>\n    &lt;/head>\n    &lt;body>\n      &lt;script src="index.bundle.js">&lt;/script>\n    &lt;/body>\n  &lt;/html>\n</code></pre>\n<p>Now we can <code>fetch</code> some data within our entry script:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="lang-diff">  function component() {\n    var element = document.createElement(\'div\');\n\n    element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n+\n<span class="token inserted">+ fetch(\'https://jsonplaceholder.typicode.com/users\')</span>\n<span class="token inserted">+   .then(response => response.json())</span>\n<span class="token inserted">+   .then(json => {</span>\n<span class="token inserted">+     console.log(\'We retrieved some data! AND we\\\'re confident it will work on a variety of browser distributions.\')</span>\n<span class="token inserted">+     console.log(json)</span>\n<span class="token inserted">+   })</span>\n<span class="token inserted">+   .catch(error => console.error(\'Something went wrong when fetching this data: \', error))</span>\n</code></pre>\n<p>If we run our build, another <code>polyfills.bundle.js</code> file will be emitted and everything should still run smoothly in the browser. Note that this set up could likely be improved upon but it should give you a good idea of how you can provide polyfills only to the users that actually need them.</p>\n<h2 class="header"><a class="anchor" href="#further-optimizations" id="further-optimizations"></a><span class="text">Further Optimizations</span><a class="icon-link" href="#further-optimizations"></a></h2>\n<p>The <code>babel-preset-env</code> package uses <a href="https://github.com/ai/browserslist">browserslist</a> to transpile only what is not supported in your browsers matrix. This preset comes with the <code>useBuiltIns</code> option, <code>false</code> by default, which converts your global <code>babel-polyfill</code> import to a more granular feature by feature <code>import</code> pattern:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-start\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-end\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.timers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.immediate\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.dom.iterable\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>See <a href="https://github.com/babel/babel-preset-env">the repository</a> for more information.</p>\n<h2 class="header"><a class="anchor" href="#node-built-ins" id="node-built-ins"></a><span class="text">Node Built-Ins</span><a class="icon-link" href="#node-built-ins"></a></h2>\n<p>Node built-ins, like <code>process</code>, can be polyfilled right directly from your configuration file without the use of any special loaders or plugins. See the <a href="/configuration/node">node configuration page</a> for more information and examples.</p>\n<h2 class="header"><a class="anchor" href="#other-utilities" id="other-utilities"></a><span class="text">Other Utilities</span><a class="icon-link" href="#other-utilities"></a></h2>\n<p>There are a few other tools that can help when dealing with legacy modules.</p>\n<p>The <a href="/loaders/script-loader/"><code>script-loader</code></a> evaluates code in the global context, similar to inclusion via a <code>script</code> tag. In this mode, every normal library should work. <code>require</code>, <code>module</code>, etc. are undefined.</p>\n<blockquote class="warning"><div class="tip-content"> When using the <code>script-loader</code>, the module is added as a string to the bundle. It is not minimized by <code>webpack</code>, so use a minimized version. There is also no <code>devtool</code> support for libraries added by this loader. </div></blockquote><p>When there is no AMD/CommonJS version of the module and you want to include the <code>dist</code>, you can flag this module in <a href="/configuration/module/#module-noparse"><code>noParse</code></a>. This will cause webpack to include the module without parsing it or resolving <code>require()</code> and <code>import</code> statements. This practice is also used to improve the build performance.</p>\n<blockquote class="warning"><div class="tip-content"> Any feature requiring the AST, like the <code>ProvidePlugin</code>, will not work. </div></blockquote><p>Lastly, there are some modules that support different <a href="/concepts/modules">module styles</a> like AMD, CommonJS and legacy. In most of these cases, they first check for <code>define</code> and then use some quirky code to export properties. In these cases, it could help to force the CommonJS path by setting <code>define=&gt;false</code> via the <a href="/loaders/imports-loader/"><code>imports-loader</code></a>.</p>\n',title:"Shimming"},title:"Shimming",url:"/guides/shimming/"},{file:{attributes:{title:"TypeScript",sort:14,contributors:["kkamali","morsdyce","mtrivera"],group:"-",anchors:[{title:"Basic Setup",id:"basic-setup"},{title:"Loader",id:"loader"},{title:"Source Maps",id:"source-maps"},{title:"Using Third Party Libraries",id:"using-third-party-libraries"},{title:"Importing Other Assets",id:"importing-other-assets"},{title:"Build Performance",id:"build-performance"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> This guide stems from the <a href="/guides/getting-started/"><em>Getting Started</em></a> guide. </div></blockquote><p><a href="https://www.typescriptlang.org">TypeScript</a> is a typed superset of JavaScript that compiles to plain JavaScript. In this guide we will learn how to integrate TypeScript with webpack.</p>\n<h2 class="header"><a class="anchor" href="#basic-setup" id="basic-setup"></a><span class="text">Basic Setup</span><a class="icon-link" href="#basic-setup"></a></h2>\n<p>First install the TypeScript compiler and loader by running:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev typescript ts-loader\n</code></pre>\n<p>Now we&#39;ll modify the directory structure &amp; the configuration files:</p>\n<p><strong>project</strong></p>\n<pre><code class="lang-diff">  webpack-demo\n  |- package.json\n<span class="token inserted">+ |- tsconfig.json</span>\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n    |- index.js\n<span class="token inserted">+   |- index.ts</span>\n  |- /node_modules\n</code></pre>\n<p><strong>tsconfig.json</strong></p>\n<p>Let&#39;s set up a simple configuration to support JSX and compile TypeScript down to ES5...</p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist/"</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>See <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript&#39;s documentation</a> to learn more about <code>tsconfig.json</code> configuration options.</p>\n<p>To learn more about webpack configuration, see the <a href="/concepts/configuration/">configuration concepts</a>.</p>\n<p>Now let&#39;s configure webpack to handle TypeScript:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.ts\'</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This will direct webpack to <em>enter</em> through <code>./index.ts</code>, <em>load</em> all <code>.ts</code> and <code>.tsx</code> files through the <code>ts-loader</code>, and <em>output</em> a <code>bundle.js</code> file in our current directory.</p>\n<h2 class="header"><a class="anchor" href="#loader" id="loader"></a><span class="text">Loader</span><a class="icon-link" href="#loader"></a></h2>\n<p><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a></p>\n<p>We use <code>ts-loader</code> in this guide as it makes enabling additional webpack features, such as importing other web assets, a bit easier.</p>\n<h2 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source Maps</span><a class="icon-link" href="#source-maps"></a></h2>\n<p>To learn more about source maps, see the <a href="/guides/development">development guide</a>.</p>\n<p>To enable source maps, we must configure TypeScript to output inline source maps to our compiled JavaScript files. The following line must be added to our TypeScript configuration:</p>\n<p><strong>tsconfig.json</strong></p>\n<pre><code class="lang-diff">  {\n    "compilerOptions": {\n      "outDir": "./dist/",\n<span class="token inserted">+     "sourceMap": true,</span>\n      "noImplicitAny": true,\n      "module": "commonjs",\n      "target": "es5",\n      "jsx": "react",\n      "allowJs": true\n    }\n  }\n</code></pre>\n<p>Now we need to tell webpack to extract these source maps and into our final bundle:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n\n  module.exports = {\n    entry: \'./src/index.ts\',\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n    module: {\n      rules: [\n        {\n          test: /\\.tsx?$/,\n          use: \'ts-loader\',\n          exclude: /node_modules/\n        }\n      ]\n    },\n    resolve: {\n      extensions: [ \'.tsx\', \'.ts\', \'.js\' ]\n    },\n    output: {\n      filename: \'bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>See the <a href="/configuration/devtool/">devtool documentation</a> for more information.</p>\n<h2 class="header"><a class="anchor" href="#using-third-party-libraries" id="using-third-party-libraries"></a><span class="text">Using Third Party Libraries</span><a class="icon-link" href="#using-third-party-libraries"></a></h2>\n<p>When installing third party libraries from npm, it is important to remember to install the typing definition for that library. These definitions can be found at <a href="http://microsoft.github.io/TypeSearch/">TypeSearch</a>.</p>\n<p>For example if we want to install lodash we can run the following command to get the typings for it:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev @types/lodash\n</code></pre>\n<p>For more information see <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/">this blog post</a>.</p>\n<h2 class="header"><a class="anchor" href="#importing-other-assets" id="importing-other-assets"></a><span class="text">Importing Other Assets</span><a class="icon-link" href="#importing-other-assets"></a></h2>\n<p>To use non-code assets with TypeScript, we need to defer the type for these imports. This requires a <code>custom.d.ts</code> file which signifies custom definitions for TypeScript in our project. Let&#39;s set up a declaration for <code>.svg</code> files:</p>\n<p><strong>custom.d.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.svg"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> content<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Here we declare a new module for SVGs by specifying any import that ends in <code>.svg</code> and defining the module&#39;s <code>content</code> as <code>any</code>. We could be more explicit about it being a url by defining the type as string. The same concept applies to other assets including CSS, SCSS, JSON and more.</p>\n<h2 class="header"><a class="anchor" href="#build-performance" id="build-performance"></a><span class="text">Build Performance</span><a class="icon-link" href="#build-performance"></a></h2>\n<blockquote class="warning"><div class="tip-content"> This may degrade build performance. </div></blockquote><p>See the <a href="/guides/build-performance/">Build Performance</a> guide on build tooling.</p>\n',title:"TypeScript"},title:"TypeScript",url:"/guides/typescript/"},{file:{attributes:{title:"Progressive Web Application",sort:14,contributors:["johnnyreilly"],group:"-",anchors:[{title:"We Don't Work Offline Now",id:"we-don-t-work-offline-now"},{title:"Adding Workbox",id:"adding-workbox"},{title:"Registering Our Service Worker",id:"registering-our-service-worker"},{title:"Conclusion",id:"conclusion"}],related:[]},body:'<blockquote class="tip"><div class="tip-content"> This guide extends on code examples found in the <a href="/guides/output-management">Output Management</a> guide. </div></blockquote><p>Progressive Web Applications (or PWAs) are web apps that deliver an experience similar to native applications. There are many things that can contribute to that. Of these, the most significant is the ability for an app to be able to function when <strong>offline</strong>. This is achieved through the use of a web technology called <a href="https://developers.google.com/web/fundamentals/primers/service-workers/">Service Workers</a>.</p>\n<p>This section will focus on adding an offline experience to our app. We&#39;ll achieve this using a Google project called <a href="https://github.com/GoogleChrome/workbox">Workbox</a> which provides tools that help make offline support for web apps easier to setup.</p>\n<h2 class="header"><a class="anchor" href="#we-don-t-work-offline-now" id="we-don-t-work-offline-now"></a><span class="text">We Don&#39;t Work Offline Now</span><a class="icon-link" href="#we-don-t-work-offline-now"></a></h2>\n<p>So far, we&#39;ve been viewing the output by going directly to the local file system. Typically though, a real user accesses a web app over a network; their browser talking to a <strong>server</strong> which will serve up the required assets (e.g. <code>.html</code>, <code>.js</code>, and <code>.css</code> files).</p>\n<p>So let&#39;s test what the current experience is like using a simple server. Let&#39;s use the <a href="https://www.npmjs.com/package/http-server">http-server</a> package: <code>npm install http-server --save-dev</code>. We&#39;ll also amend the <code>scripts</code> section of our <code>package.json</code> to add in a <code>start</code> script:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-diff">{\n  ...\n  "scripts": {\n<span class="token deleted">-    "build": "webpack"</span>\n<span class="token inserted">+    "build": "webpack",</span>\n<span class="token inserted">+    "start": "http-server dist"</span>\n  },\n  ...\n}\n</code></pre>\n<p>If you haven&#39;t previously done so, run the command <code>npm run build</code> to build your project. Then run the command <code>npm start</code>. This should produce the following output:</p>\n<pre><code class="lang-bash"><span class="token operator">></span> http-server dist\n\nStarting up http-server, serving dist\nAvailable on:\n  http://xx.x.x.x:8080\n  http://127.0.0.1:8080\n  http://xxx.xxx.x.x:8080\nHit CTRL-C to stop the server\n</code></pre>\n<p>If you open your browser to <code>http://localhost:8080</code> (i.e. <code>http://127.0.0.1</code>) you should see your webpack application being served up from the <code>dist</code> directory. If you stop the server and refresh, the webpack application is no longer available.  </p>\n<p>This is what we aim to change. Once we reach the end of this module we should be able to stop the server, hit refresh and still see our application.</p>\n<h2 class="header"><a class="anchor" href="#adding-workbox" id="adding-workbox"></a><span class="text">Adding Workbox</span><a class="icon-link" href="#adding-workbox"></a></h2>\n<p>Let&#39;s add the Workbox webpack plugin and adjust the <code>webpack.config.js</code> file:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> workbox-webpack-plugin --save-dev\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-diff">  const path = require(\'path\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n  const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n<span class="token inserted">+ const WorkboxPlugin = require(\'workbox-webpack-plugin\');</span>\n\n  module.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n  plugins: [\n    new CleanWebpackPlugin([\'dist\']),\n    new HtmlWebpackPlugin({\n<span class="token deleted">-     title: \'Output Management\'</span>\n<span class="token inserted">+     title: \'Progressive Web Application\'</span>\n<span class="token deleted">-   })</span>\n<span class="token inserted">+   }),</span>\n<span class="token inserted">+   new WorkboxPlugin({</span>\n<span class="token inserted">+     // these options encourage the ServiceWorkers to get in there fast </span>\n<span class="token inserted">+     // and not allow any straggling "old" SWs to hang around</span>\n<span class="token inserted">+     clientsClaim: true,</span>\n<span class="token inserted">+     skipWaiting: true</span>\n<span class="token inserted">+   })</span>\n  ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n  };\n</code></pre>\n<p>With that in place, let&#39;s see what happens when we do an <code>npm run build</code>:</p>\n<pre><code class="lang-bash">clean-webpack-plugin: /mnt/c/Source/webpack-follow-along/dist has been removed.\nHash: 6588e31715d9be04be25\nVersion: webpack 3.10.0\nTime: 782ms\n                                                Asset       Size  Chunks                    Chunk Names\n                                        app.bundle.js     545 kB    0, 1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  app\n                                      print.bundle.js    2.74 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\n                                           index.html  254 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nprecache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js  268 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n                                                sw.js       1 kB          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>0<span class="token punctuation">]</span> ./src/print.js 87 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>1<span class="token punctuation">]</span> ./src/index.js 477 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n   <span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module\nChild html-webpack-plugin <span class="token keyword">for</span> <span class="token string">"index.html"</span><span class="token keyword">:</span>\n     1 asset\n       <span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 509 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n       <span class="token punctuation">[</span>3<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 517 bytes <span class="token punctuation">{</span>0<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n        + 2 hidden modules\n</code></pre>\n<p>As you can see, we now have 2 extra files being generated; <code>sw.js</code> and the more verbose <code>precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js</code>. <code>sw.js</code> is the Service Worker file and <code>precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js</code> is a file that <code>sw.js</code> requires so it can run. Your own generated files will likely be different; but you should have an <code>sw.js</code> file there.</p>\n<p>So we&#39;re now at the happy point of having produced a Service Worker. What&#39;s next?</p>\n<h2 class="header"><a class="anchor" href="#registering-our-service-worker" id="registering-our-service-worker"></a><span class="text">Registering Our Service Worker</span><a class="icon-link" href="#registering-our-service-worker"></a></h2>\n<p>Let&#39;s allow our Service Worker to come out and play by registering it. We&#39;ll do that by adding the registration code below:</p>\n<p><strong>index.js</strong></p>\n<pre><code class="lang-diff">  import _ from \'lodash\';\n  import printMe from \'./print.js\';\n\n<span class="token inserted">+ if (\'serviceWorker\' in navigator) {</span>\n<span class="token inserted">+   window.addEventListener(\'load\', () => {</span>\n<span class="token inserted">+     navigator.serviceWorker.register(\'/sw.js\').then(registration => {</span>\n<span class="token inserted">+       console.log(\'SW registered: \', registration);</span>\n<span class="token inserted">+     }).catch(registrationError => {</span>\n<span class="token inserted">+       console.log(\'SW registration failed: \', registrationError);</span>\n<span class="token inserted">+     });</span>\n<span class="token inserted">+   });</span>\n<span class="token inserted">+ }</span>\n</code></pre>\n<p>Once more <code>npm run build</code> to build a version of the app including the registration code. Then serve it with <code>npm start</code>. Navigate to <code>http://localhost:8080</code> and take a look at the console. Somewhere in there you should see:</p>\n<pre><code class="lang-bash">SW registered\n</code></pre>\n<p>Now to test it. Stop your server and refresh your page. If your browser supports Service Workers then you should still be looking at your application. However, it has been served up by your Service Worker and <strong>not</strong> by the server.</p>\n<h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>You have built an offline app using the Workbox project. You&#39;ve started the journey of turning your web app into a PWA. You may now want to think about taking things further. A good resource to help you with that can be found <a href="https://developers.google.com/web/progressive-web-apps/">here</a>.</p>\n',title:"Progressive Web Application"},title:"Progressive Web Application",url:"/guides/progressive-web-application/"},{file:{attributes:{title:"Migrating Versions",sort:15,contributors:["bebraw","chrisVillanueva","domfarolino","frederikprijck","grgur","howdy39","jhnns","johnnyreilly","jouni-kantola","ndelangen","selbekk","sokra"],group:"-",anchors:[{title:"resolve.root, resolve.fallback, resolve.modulesDirectories",id:"resolve-root-resolve-fallback-resolve-modulesdirectories"},{title:"resolve.extensions",id:"resolve-extensions"},{title:"resolve.*",id:"resolve-"},{title:"module.loaders is now module.rules",id:"module-loaders-is-now-module-rules"},{title:"Chaining loaders",id:"chaining-loaders"},{title:"Automatic -loader module name extension removed",id:"automatic-loader-module-name-extension-removed"},{title:"json-loader is not required anymore",id:"json-loader-is-not-required-anymore"},{title:"Loaders in configuration resolve relative to context",id:"loaders-in-configuration-resolve-relative-to-context"},{title:"module.preLoaders and module.postLoaders were removed:",id:"module-preloaders-and-module-postloaders-were-removed-"},{title:"UglifyJsPlugin sourceMap",id:"uglifyjsplugin-sourcemap"},{title:"UglifyJsPlugin warnings",id:"uglifyjsplugin-warnings"},{title:"UglifyJsPlugin minimize loaders",id:"uglifyjsplugin-minimize-loaders"},{title:"DedupePlugin has been removed",id:"dedupeplugin-has-been-removed"},{title:"BannerPlugin - breaking change",id:"bannerplugin-breaking-change"},{title:"OccurrenceOrderPlugin is now on by default",id:"occurrenceorderplugin-is-now-on-by-default"},{title:"ExtractTextWebpackPlugin - breaking change",id:"extracttextwebpackplugin-breaking-change"},{title:"ExtractTextPlugin.extract",id:"extracttextplugin-extract"},{title:"new ExtractTextPlugin({options})",id:"new-extracttextplugin-options-"},{title:"Full dynamic requires now fail by default",id:"full-dynamic-requires-now-fail-by-default"},{title:"Using custom arguments in CLI and configuration",id:"using-custom-arguments-in-cli-and-configuration"},{title:"require.ensure and AMD require are asynchronous",id:"require-ensure-and-amd-require-are-asynchronous"},{title:"Loader configuration is through options",id:"loader-configuration-is-through-options"},{title:"What are options?",id:"what-are-options-"},{title:"LoaderOptionsPlugin context",id:"loaderoptionsplugin-context"},{title:"debug",id:"debug"},{title:"Code Splitting with ES2015",id:"code-splitting-with-es2015"},{title:"Dynamic expressions",id:"dynamic-expressions"},{title:"Mixing ES2015 with AMD and CommonJS",id:"mixing-es2015-with-amd-and-commonjs"},{title:"Hints",id:"hints"},{title:"Template strings",id:"template-strings"},{title:"Configuration Promise",id:"configuration-promise"},{title:"Advanced loader matching",id:"advanced-loader-matching"},{title:"More CLI options",id:"more-cli-options"},{title:"Loader changes",id:"loader-changes"},{title:"Cacheable",id:"cacheable"},{title:"Complex options",id:"complex-options"}],related:[]},body:'<p>The following sections describe the major changes from webpack 1 to 2.</p>\n<blockquote class="tip"><div class="tip-content"> Note that there were far fewer changes between 2 and 3, so that migration shouldn&#39;t be too bad. If you are running into issues, please see <a href="https://github.com/webpack/webpack/releases">the changelog</a> for details. </div></blockquote><blockquote class="warning"><div class="tip-content"> This content may be moved to the blog post in the near future as version 2 has been out for a while. On top of that, version 3 was recently released and version 4 is on the horizon. As noted above, folks should instead to refer to <a href="https://github.com/webpack/webpack/releases">the changelog</a> for migrations. </div></blockquote><h2 class="header"><a class="anchor" href="#resolve-root-resolve-fallback-resolve-modulesdirectories" id="resolve-root-resolve-fallback-resolve-modulesdirectories"></a><span class="text"><code>resolve.root</code>, <code>resolve.fallback</code>, <code>resolve.modulesDirectories</code></span><a class="icon-link" href="#resolve-root-resolve-fallback-resolve-modulesdirectories"></a></h2>\n<p>These options were replaced by a single option <code>resolve.modules</code>. See <a href="/configuration/resolve">resolving</a> for more usage.</p>\n<pre><code class="lang-diff">  resolve: {\n<span class="token deleted">-   root: path.join(__dirname, "src")</span>\n<span class="token inserted">+   modules: [</span>\n<span class="token inserted">+     path.join(__dirname, "src"),</span>\n<span class="token inserted">+     "node_modules"</span>\n<span class="token inserted">+   ]</span>\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#resolve-extensions" id="resolve-extensions"></a><span class="text"><code>resolve.extensions</code></span><a class="icon-link" href="#resolve-extensions"></a></h2>\n<p>This option no longer requires passing an empty string. This behavior was moved to <code>resolve.enforceExtension</code>. See <a href="/configuration/resolve">resolving</a> for more usage.</p>\n<h2 class="header"><a class="anchor" href="#resolve-" id="resolve-"></a><span class="text"><code>resolve.*</code></span><a class="icon-link" href="#resolve-"></a></h2>\n<p>Several APIs were changed here. Not listed in detail as it&#39;s not commonly used. See <a href="/configuration/resolve">resolving</a> for details.</p>\n<h2 class="header"><a class="anchor" href="#module-loaders-is-now-module-rules" id="module-loaders-is-now-module-rules"></a><span class="text"><code>module.loaders</code> is now <code>module.rules</code></span><a class="icon-link" href="#module-loaders-is-now-module-rules"></a></h2>\n<p>The old loader configuration was superseded by a more powerful rules system, which allows configuration of loaders and more.\nFor compatibility reasons, the old <code>module.loaders</code> syntax is still valid and the old names are parsed.\nThe new naming conventions are easier to understand and are a good reason to upgrade the configuration to using <code>module.rules</code>.</p>\n<pre><code class="lang-diff">  module: {\n<span class="token deleted">-   loaders: [</span>\n<span class="token inserted">+   rules: [</span>\n      {\n        test: /\\.css$/,\n<span class="token deleted">-       loaders: [</span>\n<span class="token deleted">-         "style-loader",</span>\n<span class="token deleted">-         "css-loader?modules=true"</span>\n<span class="token inserted">+       use: [</span>\n<span class="token inserted">+         {</span>\n<span class="token inserted">+           loader: "style-loader"</span>\n<span class="token inserted">+         },</span>\n<span class="token inserted">+         {</span>\n<span class="token inserted">+           loader: "css-loader",</span>\n<span class="token inserted">+           options: {</span>\n<span class="token inserted">+             modules: true</span>\n<span class="token inserted">+           }</span>\n<span class="token inserted">+         }</span>\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: "babel-loader", // Do not use "use" here\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#chaining-loaders" id="chaining-loaders"></a><span class="text">Chaining loaders</span><a class="icon-link" href="#chaining-loaders"></a></h2>\n<p>Like in webpack 1, loaders can be chained to pass results from loader to loader. Using the <a href="/configuration/module#rule-use">rule.use</a>\n configuration option, <code>use</code> can be set to an array of loaders.\nIn webpack 1, loaders were commonly chained with <code>!</code>. This style is only supported using the legacy option <code>module.loaders</code>.</p>\n<pre><code class="lang-diff">  module: {\n<span class="token deleted">-   loaders: [{</span>\n<span class="token inserted">+   rules: [{</span>\n      test: /\\.less$/,\n<span class="token deleted">-     loader: "style-loader!css-loader!less-loader"</span>\n<span class="token inserted">+     use: [</span>\n<span class="token inserted">+       "style-loader",</span>\n<span class="token inserted">+       "css-loader",</span>\n<span class="token inserted">+       "less-loader"</span>\n<span class="token inserted">+     ]</span>\n    }]\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#automatic-loader-module-name-extension-removed" id="automatic-loader-module-name-extension-removed"></a><span class="text">Automatic <code>-loader</code> module name extension removed</span><a class="icon-link" href="#automatic-loader-module-name-extension-removed"></a></h2>\n<p>It is not possible anymore to omit the <code>-loader</code> extension when referencing loaders:</p>\n<pre><code class="lang-diff">  module: {\n    rules: [\n      {\n        use: [\n<span class="token deleted">-         "style",</span>\n<span class="token inserted">+         "style-loader",</span>\n<span class="token deleted">-         "css",</span>\n<span class="token inserted">+         "css-loader",</span>\n<span class="token deleted">-         "less",</span>\n<span class="token inserted">+         "less-loader",</span>\n        ]\n      }\n    ]\n  }\n</code></pre>\n<p>You can still opt-in to the old behavior with the <code>resolveLoader.moduleExtensions</code> configuration option, but this is not recommended.</p>\n<pre><code class="lang-diff"><span class="token inserted">+ resolveLoader: {</span>\n<span class="token inserted">+   moduleExtensions: ["-loader"]</span>\n<span class="token inserted">+ }</span>\n</code></pre>\n<p>See <a href="https://github.com/webpack/webpack/issues/2986">#2986</a> for the reason behind this change.</p>\n<h2 class="header"><a class="anchor" href="#json-loader-is-not-required-anymore" id="json-loader-is-not-required-anymore"></a><span class="text"><code>json-loader</code> is not required anymore</span><a class="icon-link" href="#json-loader-is-not-required-anymore"></a></h2>\n<p>When no loader has been configured for a JSON file, webpack will automatically try to load the JSON\nfile with the <a href="https://github.com/webpack/json-loader"><code>json-loader</code></a>.</p>\n<pre><code class="lang-diff">  module: {\n    rules: [\n<span class="token deleted">-     {</span>\n<span class="token deleted">-       test: /\\.json/,</span>\n<span class="token deleted">-       loader: "json-loader"</span>\n<span class="token deleted">-     }</span>\n    ]\n  }\n</code></pre>\n<p><a href="https://github.com/webpack/webpack/issues/3363">We decided to do this</a> in order to iron out environment differences\n  between webpack, node.js and browserify.</p>\n<h2 class="header"><a class="anchor" href="#loaders-in-configuration-resolve-relative-to-context" id="loaders-in-configuration-resolve-relative-to-context"></a><span class="text">Loaders in configuration resolve relative to context</span><a class="icon-link" href="#loaders-in-configuration-resolve-relative-to-context"></a></h2>\n<p>In <strong>webpack 1</strong>, configured loaders resolve relative to the matched file. However, in <strong>webpack 2</strong>, configured loaders resolve relative to the <code>context</code> option.</p>\n<p>This solves some problems with duplicate modules caused by loaders when using <code>npm link</code> or referencing modules outside of the <code>context</code>.</p>\n<p>You may remove some hacks to work around this:</p>\n<pre><code class="lang-diff">  module: {\n    rules: [\n      {\n        // ...\n<span class="token deleted">-       loader: require.resolve("my-loader")</span>\n<span class="token inserted">+       loader: "my-loader"</span>\n      }\n    ]\n  },\n  resolveLoader: {\n<span class="token deleted">-   root: path.resolve(__dirname, "node_modules")</span>\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#module-preloaders-and-module-postloaders-were-removed-" id="module-preloaders-and-module-postloaders-were-removed-"></a><span class="text"><code>module.preLoaders</code> and <code>module.postLoaders</code> were removed:</span><a class="icon-link" href="#module-preloaders-and-module-postloaders-were-removed-"></a></h2>\n<pre><code class="lang-diff">  module: {\n<span class="token deleted">-   preLoaders: [</span>\n<span class="token inserted">+   rules: [</span>\n      {\n        test: /\\.js$/,\n<span class="token inserted">+       enforce: "pre",</span>\n        loader: "eslint-loader"\n      }\n    ]\n  }\n</code></pre>\n<h2 class="header"><a class="anchor" href="#uglifyjsplugin-sourcemap" id="uglifyjsplugin-sourcemap"></a><span class="text"><code>UglifyJsPlugin</code> sourceMap</span><a class="icon-link" href="#uglifyjsplugin-sourcemap"></a></h2>\n<p>The <code>sourceMap</code> option of the <code>UglifyJsPlugin</code> now defaults to <code>false</code> instead of <code>true</code>. This means that if you are using source maps for minimized code or want correct line numbers for uglifyjs warnings, you need to set <code>sourceMap: true</code> for <code>UglifyJsPlugin</code>.</p>\n<pre><code class="lang-diff">  devtool: "source-map",\n  plugins: [\n    new UglifyJsPlugin({\n<span class="token inserted">+     sourceMap: true</span>\n    })\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#uglifyjsplugin-warnings" id="uglifyjsplugin-warnings"></a><span class="text"><code>UglifyJsPlugin</code> warnings</span><a class="icon-link" href="#uglifyjsplugin-warnings"></a></h2>\n<p>The <code>compress.warnings</code> option of the <code>UglifyJsPlugin</code> now defaults to <code>false</code> instead of <code>true</code>.\nThis means that if you want to see uglifyjs warnings, you need to set <code>compress.warnings</code> to <code>true</code>.</p>\n<pre><code class="lang-diff">  devtool: "source-map",\n  plugins: [\n    new UglifyJsPlugin({\n<span class="token inserted">+     compress: {</span>\n<span class="token inserted">+       warnings: true</span>\n<span class="token inserted">+     }</span>\n    })\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#uglifyjsplugin-minimize-loaders" id="uglifyjsplugin-minimize-loaders"></a><span class="text"><code>UglifyJsPlugin</code> minimize loaders</span><a class="icon-link" href="#uglifyjsplugin-minimize-loaders"></a></h2>\n<p><code>UglifyJsPlugin</code> no longer switches loaders into minimize mode. The <code>minimize: true</code> setting needs to be passed via loader options in the long-term. See loader documentation for relevant options.</p>\n<p>The minimize mode for loaders will be removed in webpack 3 or later.</p>\n<p>To keep compatibility with old loaders, loaders can be switched to minimize mode via plugin:</p>\n<pre><code class="lang-diff">  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     minimize: true</span>\n<span class="token inserted">+   })</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#dedupeplugin-has-been-removed" id="dedupeplugin-has-been-removed"></a><span class="text"><code>DedupePlugin</code> has been removed</span><a class="icon-link" href="#dedupeplugin-has-been-removed"></a></h2>\n<p><code>webpack.optimize.DedupePlugin</code> isn&#39;t needed anymore. Remove it from your configuration.</p>\n<h2 class="header"><a class="anchor" href="#bannerplugin-breaking-change" id="bannerplugin-breaking-change"></a><span class="text"><code>BannerPlugin</code> - breaking change</span><a class="icon-link" href="#bannerplugin-breaking-change"></a></h2>\n<p><code>BannerPlugin</code> no longer accepts two parameters, but a single options object.</p>\n<pre><code class="lang-diff">  plugins: [\n<span class="token deleted">-    new webpack.BannerPlugin(\'Banner\', {raw: true, entryOnly: true});</span>\n<span class="token inserted">+    new webpack.BannerPlugin({banner: \'Banner\', raw: true, entryOnly: true});</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#occurrenceorderplugin-is-now-on-by-default" id="occurrenceorderplugin-is-now-on-by-default"></a><span class="text"><code>OccurrenceOrderPlugin</code> is now on by default</span><a class="icon-link" href="#occurrenceorderplugin-is-now-on-by-default"></a></h2>\n<p>The <code>OccurrenceOrderPlugin</code> is now enabled by default and has been renamed (<code>OccurenceOrderPlugin</code> in webpack 1).\nThus make sure to remove the plugin from your configuration:</p>\n<pre><code class="lang-diff">  plugins: [\n    // webpack 1\n<span class="token deleted">-   new webpack.optimize.OccurenceOrderPlugin()</span>\n    // webpack 2\n<span class="token deleted">-   new webpack.optimize.OccurrenceOrderPlugin()</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#extracttextwebpackplugin-breaking-change" id="extracttextwebpackplugin-breaking-change"></a><span class="text"><code>ExtractTextWebpackPlugin</code> - breaking change</span><a class="icon-link" href="#extracttextwebpackplugin-breaking-change"></a></h2>\n<p><a href="https://github.com/webpack/extract-text-webpack-plugin">ExtractTextPlugin</a> requires version 2 to work with webpack 2.</p>\n<p><code>npm install --save-dev extract-text-webpack-plugin</code></p>\n<p>The configuration changes for this plugin are mainly syntactical.</p>\n<h3 class="header"><a class="anchor" href="#extracttextplugin-extract" id="extracttextplugin-extract"></a><span class="text"><code>ExtractTextPlugin.extract</code></span><a class="icon-link" href="#extracttextplugin-extract"></a></h3>\n<pre><code class="lang-diff">module: {\n  rules: [\n    {\n      test: /.css$/,\n<span class="token deleted">-      loader: ExtractTextPlugin.extract("style-loader", "css-loader", { publicPath: "/dist" })</span>\n<span class="token inserted">+      use: ExtractTextPlugin.extract({</span>\n<span class="token inserted">+        fallback: "style-loader",</span>\n<span class="token inserted">+        use: "css-loader",</span>\n<span class="token inserted">+        publicPath: "/dist"</span>\n<span class="token inserted">+      })</span>\n    }\n  ]\n}\n</code></pre>\n<h3 class="header"><a class="anchor" href="#new-extracttextplugin-options-" id="new-extracttextplugin-options-"></a><span class="text"><code>new ExtractTextPlugin({options})</code></span><a class="icon-link" href="#new-extracttextplugin-options-"></a></h3>\n<pre><code class="lang-diff">plugins: [\n<span class="token deleted">-  new ExtractTextPlugin("bundle.css", { allChunks: true, disable: false })</span>\n<span class="token inserted">+  new ExtractTextPlugin({</span>\n<span class="token inserted">+    filename: "bundle.css",</span>\n<span class="token inserted">+    disable: false,</span>\n<span class="token inserted">+    allChunks: true</span>\n<span class="token inserted">+  })</span>\n]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#full-dynamic-requires-now-fail-by-default" id="full-dynamic-requires-now-fail-by-default"></a><span class="text">Full dynamic requires now fail by default</span><a class="icon-link" href="#full-dynamic-requires-now-fail-by-default"></a></h2>\n<p>A dependency with only an expression (i. e. <code>require(expr)</code>) will now create an empty context instead of the context of the complete directory.</p>\n<p>Code like this should be refactored as it won&#39;t work with ES2015 modules. If this is not possible you can use the <code>ContextReplacementPlugin</code> to hint the compiler towards the correct resolving.</p>\n<blockquote class="todo"><div class="tip-content"> Link to an article about dynamic dependencies. </div></blockquote><h3 class="header"><a class="anchor" href="#using-custom-arguments-in-cli-and-configuration" id="using-custom-arguments-in-cli-and-configuration"></a><span class="text">Using custom arguments in CLI and configuration</span><a class="icon-link" href="#using-custom-arguments-in-cli-and-configuration"></a></h3>\n<p>If you abused the CLI to pass custom arguments to the configuration like so:</p>\n<p><code>webpack --custom-stuff</code></p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">var</span> customStuff <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"--custom-stuff"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">/* ... */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>\n</code></pre>\n<p>You may notice that this is no longer allowed. The CLI is more strict now.</p>\n<p>Instead there is an interface for passing arguments to the configuration. This should be used instead. Future tools may rely on this.</p>\n<p><code>webpack --env.customStuff</code></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> customStuff <span class="token operator">=</span> env<span class="token punctuation">.</span>customStuff<span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>See <a href="/api/cli">CLI</a>.</p>\n<h2 class="header"><a class="anchor" href="#require-ensure-and-amd-require-are-asynchronous" id="require-ensure-and-amd-require-are-asynchronous"></a><span class="text"><code>require.ensure</code> and AMD <code>require</code> are asynchronous</span><a class="icon-link" href="#require-ensure-and-amd-require-are-asynchronous"></a></h2>\n<p>These functions are now always asynchronous instead of calling their callback synchronously if the chunk is already loaded.</p>\n<p><strong><code>require.ensure</code> now depends upon native <code>Promise</code>s. If using <code>require.ensure</code> in an environment that lacks them then you will need a polyfill. </strong></p>\n<h2 class="header"><a class="anchor" href="#loader-configuration-is-through-options" id="loader-configuration-is-through-options"></a><span class="text">Loader configuration is through <code>options</code></span><a class="icon-link" href="#loader-configuration-is-through-options"></a></h2>\n<p>You can <em>no longer</em> configure a loader with a custom property in the <code>webpack.config.js</code>. It must be done through the <code>options</code>. The following configuration with the <code>ts</code> property is no longer valid with webpack 2:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// does not work with webpack 2</span>\n  ts<span class="token punctuation">:</span> <span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#what-are-options-" id="what-are-options-"></a><span class="text">What are <code>options</code>?</span><a class="icon-link" href="#what-are-options-"></a></h3>\n<p>Good question. Well, strictly speaking it&#39;s 2 possible things; both ways to configure a webpack loader. Classically <code>options</code> was called <code>query</code> and was a string which could be appended to the name of the loader. Much like a query string but actually with <a href="https://github.com/webpack/loader-utils#parsequery">greater powers</a>:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader?\'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>But it can also be a separately specified object that&#39;s supplied alongside a loader:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.tsx?$/</span><span class="token punctuation">,</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span>  <span class="token punctuation">{</span> transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#loaderoptionsplugin-context" id="loaderoptionsplugin-context"></a><span class="text"><code>LoaderOptionsPlugin</code> context</span><a class="icon-link" href="#loaderoptionsplugin-context"></a></h2>\n<p>Some loaders need context information and read them from the configuration. This needs to be passed via loader options in the long-term. See loader documentation for relevant options.</p>\n<p>To keep compatibility with old loaders, this information can be passed via plugin:</p>\n<pre><code class="lang-diff">  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     options: {</span>\n<span class="token inserted">+       context: __dirname</span>\n<span class="token inserted">+     }</span>\n<span class="token inserted">+   })</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#debug" id="debug"></a><span class="text"><code>debug</code></span><a class="icon-link" href="#debug"></a></h2>\n<p>The <code>debug</code> option switched loaders to debug mode in webpack 1. This needs to be passed via loader options in long-term. See loader documentation for relevant options.</p>\n<p>The debug mode for loaders will be removed in webpack 3 or later.</p>\n<p>To keep compatibility with old loaders, loaders can be switched to debug mode via a plugin:</p>\n<pre><code class="lang-diff"><span class="token deleted">- debug: true,</span>\n  plugins: [\n<span class="token inserted">+   new webpack.LoaderOptionsPlugin({</span>\n<span class="token inserted">+     debug: true</span>\n<span class="token inserted">+   })</span>\n  ]\n</code></pre>\n<h2 class="header"><a class="anchor" href="#code-splitting-with-es2015" id="code-splitting-with-es2015"></a><span class="text">Code Splitting with ES2015</span><a class="icon-link" href="#code-splitting-with-es2015"></a></h2>\n<p>In webpack 1, you could use <a href="/api/module-methods#require-ensure"><code>require.ensure()</code></a> as a method to lazily-load chunks for your application:</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The ES2015 Loader spec defines <a href="/api/module-methods#import-"><code>import()</code></a> as method to load ES2015 Modules dynamically on runtime. webpack treats <code>import()</code> as a split-point and puts the requested module in a separate chunk. <code>import()</code> takes the module name as argument and returns a Promise.</p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./module"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Chunk loading failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Good news: Failure to load a chunk can now be handled because they are <code>Promise</code> based.</p>\n<h2 class="header"><a class="anchor" href="#dynamic-expressions" id="dynamic-expressions"></a><span class="text">Dynamic expressions</span><a class="icon-link" href="#dynamic-expressions"></a></h2>\n<p>It&#39;s possible to pass a partial expression to <code>import()</code>. This is handled similar to expressions in CommonJS (webpack creates a <a href="https://webpack.github.io/docs/context.html">context</a> with all possible files).</p>\n<p><code>import()</code> creates a separate chunk for each possible module.</p>\n<pre><code class="lang-js"><span class="token keyword">function</span> <span class="token function">route</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./routes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/route`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>route <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">route<span class="token punctuation">.</span>Route</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// This creates a separate chunk for each possible route</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#mixing-es2015-with-amd-and-commonjs" id="mixing-es2015-with-amd-and-commonjs"></a><span class="text">Mixing ES2015 with AMD and CommonJS</span><a class="icon-link" href="#mixing-es2015-with-amd-and-commonjs"></a></h2>\n<p>As for AMD and CommonJS you can freely mix all three module types (even within the same file). webpack behaves similar to babel and node-eps in this case:</p>\n<pre><code class="lang-javascript"><span class="token comment">// CommonJS consuming ES2015 Module</span>\n<span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbook<span class="token punctuation">.</span>currentPage<span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token function">readPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">===</span> <span class="token string">"This is a book"</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// ES2015 Module consuming CommonJS</span>\n<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span> <span class="token comment">// module.exports map to default</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> readFileSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span> <span class="token comment">// named exports are read from returned object+</span>\n\n<span class="token keyword">typeof</span> fs<span class="token punctuation">.</span>readFileSync <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> readFileSync <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">;</span>\n</code></pre>\n<p>It is important to note that you will want to tell Babel to not parse these module symbols so webpack can use them. You can do this by setting the following in your <code>.babelrc</code> or <code>babel-loader</code> options.</p>\n<p><strong>.babelrc</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#hints" id="hints"></a><span class="text">Hints</span><a class="icon-link" href="#hints"></a></h2>\n<p>No need to change something, but opportunities</p>\n<h3 class="header"><a class="anchor" href="#template-strings" id="template-strings"></a><span class="text">Template strings</span><a class="icon-link" href="#template-strings"></a></h3>\n<p>webpack now supports template strings in expressions. This means you can start using them in webpack constructs:</p>\n<pre><code class="lang-diff"><span class="token deleted">- require("./templates/" + name);</span>\n<span class="token inserted">+ require(`./templates/${name}`);</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#configuration-promise" id="configuration-promise"></a><span class="text">Configuration Promise</span><a class="icon-link" href="#configuration-promise"></a></h3>\n<p>webpack now supports returning a <code>Promise</code> from the configuration file. This allows to do async processing in you configuration file.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetchLangs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>lang <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> LANGUAGE<span class="token punctuation">:</span> lang <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#advanced-loader-matching" id="advanced-loader-matching"></a><span class="text">Advanced loader matching</span><a class="icon-link" href="#advanced-loader-matching"></a></h3>\n<p>webpack now supports more things to match on for loaders.</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      resource<span class="token punctuation">:</span> <span class="token regex">/filename/</span><span class="token punctuation">,</span> <span class="token comment">// matches "/path/filename.js"</span>\n      resourceQuery<span class="token punctuation">:</span> <span class="token regex">/^\\?querystring$/</span><span class="token punctuation">,</span> <span class="token comment">// matches "?querystring"</span>\n      issuer<span class="token punctuation">:</span> <span class="token regex">/filename/</span><span class="token punctuation">,</span> <span class="token comment">// matches "/path/something.js" if requested from "/path/filename.js"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#more-cli-options" id="more-cli-options"></a><span class="text">More CLI options</span><a class="icon-link" href="#more-cli-options"></a></h3>\n<p>There are some new CLI options for you to use:</p>\n<p><code>--define process.env.NODE_ENV=&quot;production&quot;</code> See <a href="/plugins/define-plugin/"><code>DefinePlugin</code></a>.</p>\n<p><code>--display-depth</code> displays the distance to the entry point for each module.</p>\n<p><code>--display-used-exports</code> display info about which exports are used in a module.</p>\n<p><code>--display-max-modules</code> sets the number for modules displayed in the output (defaults to 15).</p>\n<p><code>-p</code> also defines <code>process.env.NODE_ENV</code> to <code>&quot;production&quot;</code> now.</p>\n<h2 class="header"><a class="anchor" href="#loader-changes" id="loader-changes"></a><span class="text">Loader changes</span><a class="icon-link" href="#loader-changes"></a></h2>\n<p>Changes only relevant for loader authors.</p>\n<h3 class="header"><a class="anchor" href="#cacheable" id="cacheable"></a><span class="text">Cacheable</span><a class="icon-link" href="#cacheable"></a></h3>\n<p>Loaders are now cacheable by default. Loaders must opt-out if they are not cacheable.</p>\n<pre><code class="lang-diff">  // Cacheable loader\n  module.exports = function(source) {\n<span class="token deleted">-   this.cacheable();</span>\n    return source;\n  }\n</code></pre>\n<pre><code class="lang-diff">  // Not cacheable loader\n  module.exports = function(source) {\n<span class="token inserted">+   this.cacheable(false);</span>\n    return source;\n  }\n</code></pre>\n<h3 class="header"><a class="anchor" href="#complex-options" id="complex-options"></a><span class="text">Complex options</span><a class="icon-link" href="#complex-options"></a></h3>\n<p><strong>webpack 1</strong> only supports <code>JSON.stringify</code>-able options for loaders.</p>\n<p><strong>webpack 2</strong> now supports any JS object as loader options.</p>\n<p>Before webpack <a href="https://github.com/webpack/webpack/releases/tag/v2.2.1">2.2.1</a> (i.e. from 2.0.0 through 2.2.0), using complex options required using <code>ident</code> for the <code>options</code> object to allow its reference from other loaders. <strong>This was removed in 2.2.1</strong> and thus current migrations do not require any use of the <code>ident</code> key.</p>\n<pre><code class="lang-diff">{\n  test: /\\.ext/\n  use: {\n    loader: \'...\',\n    options: {\n<span class="token deleted">-     ident: \'id\',</span>\n      fn: () => require(\'./foo.js\')\n    }\n  }\n}\n</code></pre>\n',title:"Migrating Versions"},title:"Migrating Versions",url:"/guides/migrating/"},{file:{attributes:{title:"Environment Variables",sort:16,contributors:["grisanu","simon04","tbroadley"],related:[{title:"The Fine Art of the webpack 3 Config",url:"https://blog.flennik.com/the-fine-art-of-the-webpack-2-config-dc4d19d7f172#d60a"}],group:"-",anchors:[]},body:'<p>To disambiguate in your <code>webpack.config.js</code> between <a href="/guides/development">development</a> and <a href="/guides/production">production builds</a>, you may use environment variables.</p>\n<p>The webpack command line <a href="/api/cli/#environment-options">environment option</a>, <code>--env</code> allows you to pass in as many environment variables as you like. Environment variables will be made accessible in your <code>webpack.config.js</code>. For example, <code>--env.production</code> or <code>--env.NODE_ENV=local</code> (<code>NODE_ENV</code> is conventionally used to define the environment type, see <a href="https://dzone.com/articles/what-you-should-know-about-node-env">here</a>.)</p>\n<pre><code class="lang-bash">webpack --env.NODE_ENV<span class="token operator">=</span>local --env.production --progress\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Setting up your <code>env</code> variable without assignment, <code>--env.production</code> sets <code>--env.production</code> to <code>true</code> by default. There are also other syntaxes that you can use. See the <a href="/api/cli/#environment-options">webpack CLI</a> documentation for more information. </div></blockquote><p>There is, however a change that you will have to make to your webpack config. Typically, in your webpack config <code>module.exports</code> points to the configuration object. To use the <code>env</code> variable, you must convert <code>module.exports</code> to a function:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> env <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Use env.&lt;YOUR VARIABLE> here:</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'NODE_ENV: \'</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>NODE_ENV<span class="token punctuation">)</span> <span class="token comment">// \'local\'</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production: \'</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>production<span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',title:"Environment Variables"},title:"Environment Variables",url:"/guides/environment-variables/"},{file:{attributes:{title:"Build Performance",sort:17,contributors:["sokra","tbroadley"],group:"-",anchors:[{title:"General",id:"general"},{title:"Stay Up to Date",id:"stay-up-to-date"},{title:"Loaders",id:"loaders"},{title:"Bootstrap",id:"bootstrap"},{title:"Resolving",id:"resolving"},{title:"Dlls",id:"dlls"},{title:"Smaller = Faster",id:"smaller-faster"},{title:"Worker Pool",id:"worker-pool"},{title:"Persistent cache",id:"persistent-cache"},{title:"Custom plugins/loaders",id:"custom-plugins-loaders"},{title:"Development",id:"development"},{title:"Incremental Builds",id:"incremental-builds"},{title:"Compile in Memory",id:"compile-in-memory"},{title:"Devtool",id:"devtool"},{title:"Avoid Production Specific Tooling",id:"avoid-production-specific-tooling"},{title:"Minimal Entry Chunk",id:"minimal-entry-chunk"},{title:"Production",id:"production"},{title:"Multiple Compilations",id:"multiple-compilations"},{title:"Source Maps",id:"source-maps"},{title:"Specific Tooling Issues",id:"specific-tooling-issues"},{title:"Babel",id:"babel"},{title:"Typescript",id:"typescript"},{title:"Sass",id:"sass"}],related:[]},body:'<p>This guide contains some useful tips for improving build/compilation performance.</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#general" id="general"></a><span class="text">General</span><a class="icon-link" href="#general"></a></h2>\n<p>The following best practices should help whether or not you are in <a href="/guides/development">development</a> or building for <a href="/guides/production">production</a>.</p>\n<h3 class="header"><a class="anchor" href="#stay-up-to-date" id="stay-up-to-date"></a><span class="text">Stay Up to Date</span><a class="icon-link" href="#stay-up-to-date"></a></h3>\n<p>Use the latest webpack version. We are always making performance improvements. The latest stable version of webpack is:</p>\n<p><a href="https://github.com/webpack/webpack/releases"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="latest webpack version"></a></p>\n<p>Staying up to date with <strong>Node.js</strong>  can also help with performance. On top of this, keeping your package manager (e.g. <code>npm</code> or <code>yarn</code>) up to date can also help. Newer versions create more efficient module trees and increase resolving speed.</p>\n<h3 class="header"><a class="anchor" href="#loaders" id="loaders"></a><span class="text">Loaders</span><a class="icon-link" href="#loaders"></a></h3>\n<p>Apply loaders to the minimal number of modules necessary. Instead of:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Use the <code>include</code> field to only apply the loader modules that actually need to be transformed by it:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#bootstrap" id="bootstrap"></a><span class="text">Bootstrap</span><a class="icon-link" href="#bootstrap"></a></h3>\n<p>Each additional loader/plugin has a bootup time. Try to use as few different tools as possible.</p>\n<h3 class="header"><a class="anchor" href="#resolving" id="resolving"></a><span class="text">Resolving</span><a class="icon-link" href="#resolving"></a></h3>\n<p>The following steps can increase the speed of resolving:</p>\n<ul>\n<li>Minimize the number of items in <code>resolve.modules</code>, <code>resolve.extensions</code>, <code>resolve.mainFiles</code>, <code>resolve.descriptionFiles</code> as they increase the number of filesystem calls.</li>\n<li>Set <code>resolve.symlinks: false</code> if you don&#39;t use symlinks (e.g. <code>npm link</code> or <code>yarn link</code>).</li>\n<li>Set <code>resolve.cacheWithContext: false</code> if you use custom resolving plugins, that are not context specific.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#dlls" id="dlls"></a><span class="text">Dlls</span><a class="icon-link" href="#dlls"></a></h3>\n<p>Use the <code>DllPlugin</code> to move code that is changed less often into a separate compilation. This will improve the application&#39;s compilation speed, although it does increase complexity of the build process.</p>\n<h3 class="header"><a class="anchor" href="#smaller-faster" id="smaller-faster"></a><span class="text">Smaller = Faster</span><a class="icon-link" href="#smaller-faster"></a></h3>\n<p>Decrease the total size of the compilation to increase build performance. Try to keep chunks small.</p>\n<ul>\n<li>Use fewer/smaller libraries.</li>\n<li>Use the <code>CommonsChunksPlugin</code> in Multi-Page Applications.</li>\n<li>Use the <code>CommonsChunksPlugin</code> in <code>async</code> mode in Multi-Page Applications.</li>\n<li>Remove unused code.</li>\n<li>Only compile the part of the code you are currently developing on.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#worker-pool" id="worker-pool"></a><span class="text">Worker Pool</span><a class="icon-link" href="#worker-pool"></a></h3>\n<p>The <code>thread-loader</code> can be used to offload expensive loaders to a worker pool.</p>\n<blockquote class="warning"><div class="tip-content"> Don&#39;t use too many workers as there is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive. </div></blockquote><h3 class="header"><a class="anchor" href="#persistent-cache" id="persistent-cache"></a><span class="text">Persistent cache</span><a class="icon-link" href="#persistent-cache"></a></h3>\n<p>Enable persistent caching with the <code>cache-loader</code>. Clear cache directory on <code>&quot;postinstall&quot;</code> in <code>package.json</code>.</p>\n<h3 class="header"><a class="anchor" href="#custom-plugins-loaders" id="custom-plugins-loaders"></a><span class="text">Custom plugins/loaders</span><a class="icon-link" href="#custom-plugins-loaders"></a></h3>\n<p>Profile them to not introduce a performance problem here.</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#development" id="development"></a><span class="text">Development</span><a class="icon-link" href="#development"></a></h2>\n<p>The following steps are especially useful in <em>development</em>.</p>\n<h3 class="header"><a class="anchor" href="#incremental-builds" id="incremental-builds"></a><span class="text">Incremental Builds</span><a class="icon-link" href="#incremental-builds"></a></h3>\n<p>Use webpack&#39;s watch mode. Don&#39;t use other tools to watch your files and invoke webpack. The built in watch mode will keep track of timestamps and passes this information to the compilation for cache invalidation.</p>\n<p>In some setups watching falls back to polling mode. With many watched files this can cause a lot of CPU load. In these cases you can increase the polling interval with <code>watchOptions.poll</code>.</p>\n<h3 class="header"><a class="anchor" href="#compile-in-memory" id="compile-in-memory"></a><span class="text">Compile in Memory</span><a class="icon-link" href="#compile-in-memory"></a></h3>\n<p>The following utilities improve performance by compiling and serving assets in memory rather than writing to disk:</p>\n<ul>\n<li><code>webpack-dev-server</code></li>\n<li><code>webpack-hot-middleware</code></li>\n<li><code>webpack-dev-middleware</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#devtool" id="devtool"></a><span class="text">Devtool</span><a class="icon-link" href="#devtool"></a></h3>\n<p>Be aware of the performance differences of the different <code>devtool</code> settings.</p>\n<ul>\n<li><code>&quot;eval&quot;</code> has the best performance, but doesn&#39;t assist you for transpiled code.</li>\n<li>The <code>cheap-source-map</code> variants are more performant, if you can live with the slightly worse mapping quality.</li>\n<li>Use a <code>eval-source-map</code> variant for incremental builds.</li>\n</ul>\n<p>=&gt; In most cases <code>cheap-module-eval-source-map</code> is the best option.</p>\n<h3 class="header"><a class="anchor" href="#avoid-production-specific-tooling" id="avoid-production-specific-tooling"></a><span class="text">Avoid Production Specific Tooling</span><a class="icon-link" href="#avoid-production-specific-tooling"></a></h3>\n<p>Certain utilities, plugins and loader only make sense when building for production. For example, it usually doesn&#39;t make sense to minify and mangle your code with the <code>UglifyJsPlugin</code> while in development. These tools should typically be excluded in development:</p>\n<ul>\n<li><code>UglifyJsPlugin</code></li>\n<li><code>ExtractTextPlugin</code></li>\n<li><code>[hash]</code>/<code>[chunkhash]</code></li>\n<li><code>AggressiveSplittingPlugin</code></li>\n<li><code>AggressiveMergingPlugin</code></li>\n<li><code>ModuleConcatenationPlugin</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#minimal-entry-chunk" id="minimal-entry-chunk"></a><span class="text">Minimal Entry Chunk</span><a class="icon-link" href="#minimal-entry-chunk"></a></h3>\n<p>webpack only emits updated chunks to the filesystem. For some configuration options (HMR, <code>[name]</code>/<code>[chunkhash]</code> in <code>output.chunkFilename</code>, <code>[hash]</code>) the entry chunk is invalidated in addition to the changed chunks.</p>\n<p>Make sure the entry chunk is cheap to emit by keeping it small. The following code block extracts a chunk containing only the runtime with <em>all other chunks as children</em>:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<hr>\n<h2 class="header"><a class="anchor" href="#production" id="production"></a><span class="text">Production</span><a class="icon-link" href="#production"></a></h2>\n<p>The following steps are especially useful in <em>production</em>.</p>\n<blockquote class="warning"><div class="tip-content"> <strong>Don&#39;t sacrifice the quality of your application for small performance gains!</strong> Keep in mind that optimization quality is in most cases more important than build performance. </div></blockquote><h3 class="header"><a class="anchor" href="#multiple-compilations" id="multiple-compilations"></a><span class="text">Multiple Compilations</span><a class="icon-link" href="#multiple-compilations"></a></h3>\n<p>When using multiple compilations the following tools can help:</p>\n<ul>\n<li><a href="https://github.com/trivago/parallel-webpack"><code>parallel-webpack</code></a>: It allows to do compilation in a worker pool.</li>\n<li><code>cache-loader</code>: The cache can be shared between multiple compilations.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source Maps</span><a class="icon-link" href="#source-maps"></a></h3>\n<p>Source maps are really expensive. Do you really need them?</p>\n<hr>\n<h2 class="header"><a class="anchor" href="#specific-tooling-issues" id="specific-tooling-issues"></a><span class="text">Specific Tooling Issues</span><a class="icon-link" href="#specific-tooling-issues"></a></h2>\n<p>The following tools have certain problems that can degrade build performance.</p>\n<h3 class="header"><a class="anchor" href="#babel" id="babel"></a><span class="text">Babel</span><a class="icon-link" href="#babel"></a></h3>\n<ul>\n<li>Minimize the number of preset/plugins</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#typescript" id="typescript"></a><span class="text">Typescript</span><a class="icon-link" href="#typescript"></a></h3>\n<ul>\n<li>Use the <code>fork-ts-checker-webpack-plugin</code> for type checking in a separate process.</li>\n<li>Configure loaders to skip typechecking.</li>\n<li>Use the <code>ts-loader</code> in <code>happyPackMode: true</code> / <code>transpileOnly: true</code>.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#sass" id="sass"></a><span class="text">Sass</span><a class="icon-link" href="#sass"></a></h3>\n<ul>\n<li><code>node-sass</code> has a bug which blocks threads from the Node.js threadpool. When using it with the <code>thread-loader</code> set <code>workerParallelJobs: 2</code>.</li>\n</ul>\n',title:"Build Performance"},title:"Build Performance",url:"/guides/build-performance/"},{file:{attributes:{title:"Development - Vagrant",sort:19,contributors:["SpaceK33z","chrisVillanueva"],group:"-",anchors:[{title:"Configuring the Project",id:"configuring-the-project"},{title:"Running the Server",id:"running-the-server"},{title:"Advanced Usage with nginx",id:"advanced-usage-with-nginx"},{title:"Conclusion",id:"conclusion"}],related:[]},body:'<p>If you have a more advanced project and use <a href="https://www.vagrantup.com/">Vagrant</a> to run your development environment in a Virtual Machine, you&#39;ll often want to also run webpack in the VM.</p>\n<h2 class="header"><a class="anchor" href="#configuring-the-project" id="configuring-the-project"></a><span class="text">Configuring the Project</span><a class="icon-link" href="#configuring-the-project"></a></h2>\n<p>To start, make sure that the <code>Vagrantfile</code> has a static IP;</p>\n<pre><code class="lang-ruby"><span class="token constant">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>\n  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token symbol">:private_network</span><span class="token punctuation">,</span> ip<span class="token punctuation">:</span> <span class="token string">"10.10.10.61"</span>\n<span class="token keyword">end</span>\n</code></pre>\n<p>Next, install webpack and webpack-dev-server in your project;</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack webpack-dev-server\n</code></pre>\n<p>Make sure to have a <code>webpack.config.js</code> file. If you haven&#39;t already, use this as a minimal example to get started:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  entry<span class="token punctuation">:</span> <span class="token string">"./app.js"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>And create a <code>index.html</code> file. The script tag should point to your bundle. If <code>output.filename</code> is not specified in the config, this will be <code>bundle.js</code>.</p>\n<pre><code class="lang-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bundle.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Heey!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>Note that you also need to create an <code>app.js</code> file.</p>\n<h2 class="header"><a class="anchor" href="#running-the-server" id="running-the-server"></a><span class="text">Running the Server</span><a class="icon-link" href="#running-the-server"></a></h2>\n<p>Now, let&#39;s run the server:</p>\n<pre><code class="lang-bash">webpack-dev-server --host 0.0.0.0 --public 10.10.10.61:8080 --watch-poll\n</code></pre>\n<p>By default the server will only be accessible from localhost. We&#39;ll be accessing it from our host PC, so we need to change <code>--host</code> to allow this.</p>\n<p>webpack-dev-server will include a script in your bundle that connects to a WebSocket to reload when a change in any of your files occurs.\nThe <code>--public</code> flag makes sure the script knows where to look for the WebSocket. The server will use port <code>8080</code> by default, so we should also specify that here.</p>\n<p><code>--watch-poll</code> makes sure that webpack can detect changes in your files. By default webpack listens to events triggered by the filesystem, but VirtualBox has many problems with this.</p>\n<p>The server should be accessible on <code>http://10.10.10.61:8080</code> now. If you make a change in <code>app.js</code>, it should live reload.</p>\n<h2 class="header"><a class="anchor" href="#advanced-usage-with-nginx" id="advanced-usage-with-nginx"></a><span class="text">Advanced Usage with nginx</span><a class="icon-link" href="#advanced-usage-with-nginx"></a></h2>\n<p>To mimic a more production-like environment, it is also possible to proxy the webpack-dev-server with nginx.</p>\n<p>In your nginx config file, add the following:</p>\n<pre><code class="lang-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>\n  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>\n    <span class="token keyword">error_page</span> <span class="token number">502</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">location</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">default_type</span> text<span class="token operator">/</span>plain<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">502</span> <span class="token string">"Please start the webpack-dev-server first."</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The <code>proxy_set_header</code> lines are important, because they allow the WebSockets to work correctly.</p>\n<p>The command to start webpack-dev-server can then be changed to this:</p>\n<pre><code class="lang-bash">webpack-dev-server --public 10.10.10.61 --watch-poll\n</code></pre>\n<p>This makes the server only accessible on <code>127.0.0.1</code>, which is fine, because nginx takes care of making it available on your host PC.</p>\n<h2 class="header"><a class="anchor" href="#conclusion" id="conclusion"></a><span class="text">Conclusion</span><a class="icon-link" href="#conclusion"></a></h2>\n<p>We made the Vagrant box accessible from a static IP, and then made webpack-dev-server publicly accessible so it is reachable from a browser. We then tackled a common problem that VirtualBox doesn&#39;t send out filesystem events, causing the server to not reload on file changes.</p>\n',title:"Development - Vagrant"},title:"Development - Vagrant",url:"/guides/development-vagrant/"},{file:{attributes:{title:"Dependency Management",sort:20,contributors:["chrisVillanueva","ndelangen","sokra"],group:"-",anchors:[{title:"require with expression",id:"require-with-expression"},{title:"require.context",id:"require-context"},{title:"context module API",id:"context-module-api"}],related:[]},body:'<blockquote>\n<p>es6 modules</p>\n<p>commonjs</p>\n<p>amd</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#require-with-expression" id="require-with-expression"></a><span class="text">require with expression</span><a class="icon-link" href="#require-with-expression"></a></h2>\n<p>A context is created if your request contains expressions, so the <strong>exact</strong> module is not known on compile time.</p>\n<p>Example:</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./template/"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>webpack parses the <code>require()</code> call and extracts some information:</p>\n<pre><code class="lang-diff">Directory: ./template\nRegular expression: /^.*\\.ejs$/\n</code></pre>\n<p><strong>context module</strong></p>\n<p>A context module is generated. It contains references to <strong>all modules in that directory</strong> that can be required with a request matching the regular expression. The context module contains a map which translates requests to module ids.</p>\n<p>Example:</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"./table.ejs"</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n    <span class="token string">"./table-row.ejs"</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>\n    <span class="token string">"./directory/folder.ejs"</span><span class="token punctuation">:</span> <span class="token number">44</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The context module also contains some runtime logic to access the map.</p>\n<p>This means dynamic requires are supported but will cause all possible modules to be included in the bundle.</p>\n<h2 class="header"><a class="anchor" href="#require-context" id="require-context"></a><span class="text"><code>require.context</code></span><a class="icon-link" href="#require-context"></a></h2>\n<p>You can create your own context with the <code>require.context()</code> function.</p>\n<p>It allows you to pass in a directory to search, a flag indicating whether subdirectories should be searched\ntoo, and a regular expression to match files against.</p>\n<p>webpack parses for <code>require.context()</code> in the code while building.</p>\n<p>The syntax is as follows:</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> useSubdirectories <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> regExp <span class="token operator">=</span> <span class="token regex">/^\\.\\//</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Examples:</p>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\\.test\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// a context with files from the test directory that can be required with a request endings with `.test.js`.</span>\n</code></pre>\n<pre><code class="lang-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.stories\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// a context with all files in the parent folder and descending folders ending with `.stories.js`.</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> The arguments passed to <code>require.context</code> must be literals! </div></blockquote><h3 class="header"><a class="anchor" href="#context-module-api" id="context-module-api"></a><span class="text">context module API</span><a class="icon-link" href="#context-module-api"></a></h3>\n<p>A context module exports a (require) function that takes one argument: the request.</p>\n<p>The exported function has 3 properties: <code>resolve</code>, <code>keys</code>, <code>id</code>.</p>\n<ul>\n<li><code>resolve</code> is a function and returns the module id of the parsed request.</li>\n<li><code>keys</code> is a function that returns an array of all possible requests that the context module can handle.</li>\n</ul>\n<p>This can be useful if you want to require all files in a directory or matching a pattern, Example:</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> importAll <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> importAll <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// At build-time cache will be populated with all required modules.</span>\n</code></pre>\n<ul>\n<li><code>id</code> is the module id of the context module. This may be useful for <code>module.hot.accept</code>.</li>\n</ul>\n',title:"Dependency Management"},title:"Dependency Management",url:"/guides/dependency-management/"},{file:{attributes:{title:"Public Path",sort:24,contributors:["chrisVillanueva","gonzoyumo","rafaelrinaldi"],group:"-",anchors:[{title:"Use Cases",id:"use-cases"},{title:"Environment Based",id:"environment-based"},{title:"On The Fly",id:"on-the-fly"}],related:[]},body:'<p>The <code>publicPath</code> configuration option can be quite useful in a variety of scenarios. It allows you to specify the base path for all the assets within your application.</p>\n<h2 class="header"><a class="anchor" href="#use-cases" id="use-cases"></a><span class="text">Use Cases</span><a class="icon-link" href="#use-cases"></a></h2>\n<p>There are a few use cases in real applications where this feature becomes especially neat. Essentially, every file emitted to your <code>output.path</code> directory will be referenced from the <code>output.publicPath</code> location. This includes child chunks (created via <a href="/guides/code-splitting/">code splitting</a>) and any other assets (e.g. images, fonts, etc.) that are a part of your dependency graph.</p>\n<h3 class="header"><a class="anchor" href="#environment-based" id="environment-based"></a><span class="text">Environment Based</span><a class="icon-link" href="#environment-based"></a></h3>\n<p>In development for example, we might have an <code>assets/</code> folder that lives on the same level of our index page. This is fine, but what if we wanted to host all these static assets on a CDN in production?</p>\n<p>To approach this problem you can easily use a good old environment variable. Let&#39;s say we have a variable <code>ASSET_PATH</code>:</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Try the environment variable, otherwise use root</span>\n<span class="token keyword">const</span> ASSET_PATH <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ASSET_PATH <span class="token operator">||</span> <span class="token string">\'/\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token punctuation">:</span> ASSET_PATH\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// This makes it possible for us to safely use env vars on our code</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">\'process.env.ASSET_PATH\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ASSET_PATH<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#on-the-fly" id="on-the-fly"></a><span class="text">On The Fly</span><a class="icon-link" href="#on-the-fly"></a></h3>\n<p>Another possible use case is to set the <code>publicPath</code> on the fly. webpack exposes a global variable called <code>__webpack_public_path__</code> that allows you to do that. So, in your application&#39;s entry point, you can simply do this:</p>\n<pre><code class="lang-js">__webpack_public_path__ <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ASSET_PATH<span class="token punctuation">;</span>\n</code></pre>\n<p>That&#39;s all you need. Since we&#39;re already using the <code>DefinePlugin</code> on our\nconfiguration, <code>process.env.ASSET_PATH</code> will always be defined so we can safely\ndo that.</p>\n<blockquote class="warning"><div class="tip-content"> Be aware that if you use ES6 module imports in your entry file the <code>__webpack_public_path__</code> assignment will be done after the imports. In such cases, you&#39;ll have to move the public path assignment to its own dedicated module and then import it on top of your entry.js: </div></blockquote><pre><code class="lang-js"><span class="token comment">// entry.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./public-path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./app\'</span><span class="token punctuation">;</span>\n</code></pre>\n',title:"Public Path"},title:"Public Path",url:"/guides/public-path/"},{file:{attributes:{title:"Integrations",sort:25,contributors:["bebraw","pksjce","skipjack","tashian"],group:"-",anchors:[{title:"NPM Scripts",id:"npm-scripts"},{title:"Grunt",id:"grunt"},{title:"Gulp",id:"gulp"},{title:"Mocha",id:"mocha"},{title:"Karma",id:"karma"}],related:[]},body:'<p>Let&#39;s start by clearing up a common misconception. webpack is a module bundler like <a href="http://browserify.org/">Browserify</a> or <a href="http://brunch.io/">Brunch</a>. It is <em>not a task runner</em> like <a href="https://www.gnu.org/software/make/">Make</a>, <a href="https://gruntjs.com/">Grunt</a>, or <a href="https://gulpjs.com/">Gulp</a>. Task runners handle automation of common development tasks such as linting, building, or testing your project. Compared to bundlers, task runners have a higher level focus. You can still benefit from their higher level tooling while leaving the problem of bundling to webpack.</p>\n<p>Bundlers help you get your JavaScript and stylesheets ready for deployment, transforming them into a format that&#39;s suitable for the browser. For example, JavaScript can be <a href="/plugins/uglifyjs-webpack-plugin">minified</a> or <a href="/guides/code-splitting">split into chunks</a> and <a href="/guides/lazy-loading">lazy-loaded</a> to improve performance. Bundling is one of the most important challenges in web development, and solving it well can remove a lot of pain from the process.</p>\n<p>The good news is that, while there is some overlap, task runners and bundlers can play well together if approached in the right way. This guide provides a high-level overview of how webpack can be integrated into some of the more popular task runners.</p>\n<h2 class="header"><a class="anchor" href="#npm-scripts" id="npm-scripts"></a><span class="text">NPM Scripts</span><a class="icon-link" href="#npm-scripts"></a></h2>\n<p>Often webpack users use npm <a href="https://docs.npmjs.com/misc/scripts"><code>scripts</code></a> as their task runner. This is a good starting point. Cross-platform support can become a problem, but there are several workarounds for that. Many, if not most users, get by with simple npm <code>scripts</code> and various levels of webpack configuration and tooling.</p>\n<p>So while webpack&#39;s core focus is bundling, there are a variety of extensions that can enable you to use it for jobs typical of a task runner. Integrating a separate tool adds complexity, so be sure to weigh the pros and cons before going forward.</p>\n<h2 class="header"><a class="anchor" href="#grunt" id="grunt"></a><span class="text">Grunt</span><a class="icon-link" href="#grunt"></a></h2>\n<p>For those using Grunt, we recommend the <a href="https://www.npmjs.com/package/grunt-webpack"><code>grunt-webpack</code></a> package. With <code>grunt-webpack</code> you can run webpack or <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> as a task, get access to stats within <a href="https://gruntjs.com/api/grunt.template">template tags</a>, split development and production configurations and more. Start by installing <code>grunt-webpack</code> as well as <code>webpack</code> itself if you haven&#39;t already:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev grunt-webpack webpack\n</code></pre>\n<p>Then register a configuration and load the task:</p>\n<p><strong>Gruntfile.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>grunt<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        stats<span class="token punctuation">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">\'development\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      prod<span class="token punctuation">:</span> webpackConfig<span class="token punctuation">,</span>\n      dev<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> watch<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> webpackConfig<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">\'grunt-webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>For more information, please visit the <a href="https://github.com/webpack-contrib/grunt-webpack">repository</a>.</p>\n<h2 class="header"><a class="anchor" href="#gulp" id="gulp"></a><span class="text">Gulp</span><a class="icon-link" href="#gulp"></a></h2>\n<p>Gulp is also a fairly straightforward integration with the help of the <a href="https://github.com/shama/webpack-stream"><code>webpack-stream</code></a> package (a.k.a. <code>gulp-webpack</code>). In this case, it is unnecessary to install <code>webpack</code> separately as it is a direct dependency of <code>webpack-stream</code>:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack-stream\n</code></pre>\n<p>Just <code>require(&#39;webpack-stream&#39;)</code> instead of <code>webpack</code> and optionally pass it an configuration:</p>\n<p><strong>gulpfile.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'gulp\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-stream\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">\'default\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">\'src/entry.js\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// Any configuration options...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">\'dist/\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>For more information, please visit the <a href="https://github.com/shama/webpack-stream">repository</a>.</p>\n<h2 class="header"><a class="anchor" href="#mocha" id="mocha"></a><span class="text">Mocha</span><a class="icon-link" href="#mocha"></a></h2>\n<p>The <a href="https://github.com/zinserjan/mocha-webpack"><code>mocha-webpack</code></a> utility can be used for a clean integration with Mocha. The repository offers more details on the pros and cons but essentially <code>mocha-webpack</code> is a simple wrapper that provides almost the same CLI as Mocha itself and provides various webpack functionality like an improved watch mode and improved path resolution. Here is a small example of how you would install it and use it to run a test suite (found within <code>./test</code>):</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack mocha mocha-webpack\nmocha-webpack <span class="token string">\'test/**/*.js\'</span>\n</code></pre>\n<p>For more information, please visit the <a href="https://github.com/zinserjan/mocha-webpack">repository</a>.</p>\n<h2 class="header"><a class="anchor" href="#karma" id="karma"></a><span class="text">Karma</span><a class="icon-link" href="#karma"></a></h2>\n<p>The <a href="https://github.com/webpack-contrib/karma-webpack"><code>karma-webpack</code></a> package allows you to use webpack to pre-process files in <a href="http://karma-runner.github.io/1.0/index.html">Karma</a>. It also makes use of <a href="https://github.com/webpack/webpack-dev-middleware"><code>webpack-dev-middleware</code></a> and allows passing configurations for both. A simple example may look something like this:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack karma karma-webpack\n</code></pre>\n<p><strong>karma.conf.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    files<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> pattern<span class="token punctuation">:</span> \'test<span class="token comment">/*_test.js\', watched: false },\n      { pattern: \'test/**/</span><span class="token operator">*</span>_test<span class="token punctuation">.</span>js\'<span class="token punctuation">,</span> watched<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      \'test<span class="token comment">/*_test.js\': [ \'webpack\' ],\n      \'test/**/</span><span class="token operator">*</span>_test<span class="token punctuation">.</span>js<span class="token string">\': [ \'</span>webpack\' <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Any custom webpack configuration...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    webpackMiddleware<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Any custom webpack-dev-middleware configuration...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>For more information, please visit the <a href="https://github.com/webpack-contrib/karma-webpack">repository</a>.</p>\n',title:"Integrations"},title:"Integrations",url:"/guides/integrations/"}]},{title:"Plugins",url:"plugins",pages:[{file:{attributes:{title:"AggressiveSplittingPlugin",contributors:["pierreneter"],group:"-",anchors:[{title:"Options",id:"options"},{title:"Examples",id:"examples"}],related:[]},body:'<p>The <code>AggressiveSplittingPlugin</code> can split bundles into smaller chunks, splitting every chunk until it reaches the specified <code>maxSize</code> configured in <code>options</code>. It groups modules together by folder structure.</p>\n<p>It records the split points in webpack records and tries to restore splitting in the same manner it started. This ensures that after changes to the application, the previous split points (and chunks) are reused as they are probably already in the client&#39;s cache. Therefore it&#39;s heavily recommended to use records.</p>\n<p>Only chunks bigger than the specified <code>minSize</code> are stored in records. This ensures the chunks fill up as your application grows, instead of creating too many chunks for every change.</p>\n<p>Chunks can be invalidated if a module changes. Modules from invalid chunks will go back into the module pool from which new chunks are created.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>AggressiveSplittingPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  minSize<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">//Byte, split point. Default: 30720</span>\n  maxSize<span class="token punctuation">:</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token comment">//Byte, maxsize of per file. Default: 51200</span>\n  chunkOverhead<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//Default: 0</span>\n  entryChunkMultiplicator<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//Default: 1</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/http2-aggressive-splitting">http2-aggressive-splitting</a></p>\n',title:"AggressiveSplittingPlugin"},title:"AggressiveSplittingPlugin",url:"/plugins/aggressive-splitting-plugin/"},{file:{attributes:{title:"ZopfliWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/zopfli-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/zopfli-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/zopfli-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Arguments",id:"arguments"},{title:"Option Arguments",id:"option-arguments"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Node-Zopfli plugin for Webpack.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D zopfli-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> ZopfliPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"zopfli-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ZopfliPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            asset<span class="token punctuation">:</span> <span class="token string">"[path].gz[query]"</span><span class="token punctuation">,</span>\n            algorithm<span class="token punctuation">:</span> <span class="token string">"zopfli"</span><span class="token punctuation">,</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.(js|html)$/</span><span class="token punctuation">,</span>\n            threshold<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>\n            minRatio<span class="token punctuation">:</span> <span class="token number">0.8</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#arguments" id="arguments"></a><span class="text">Arguments</span><a class="icon-link" href="#arguments"></a></h2>\n<ul>\n<li><code>asset</code>: The target asset name. <code>[file]</code> is replaced with the original asset. <code>[path]</code> is replaced with the path of the original asset and <code>[query]</code> with the query. Defaults to <code>&quot;[path].gz[query]&quot;</code>.</li>\n<li><code>filename</code>: A <code>function(asset)</code> which receives the asset name (after processing <code>asset</code> option) and returns the new asset name. Defaults to <code>false</code>.</li>\n<li><code>algorithm</code>: Can be a <code>function(buf, callback)</code> or a string. For a string the algorithm is taken from <code>zopfli</code>.</li>\n<li><code>test</code>: All assets matching this RegExp are processed. Defaults to every asset.</li>\n<li><code>threshold</code>: Only assets bigger than this size are processed. In bytes. Defaults to <code>0</code>.</li>\n<li><code>minRatio</code>: Only assets that compress better that this ratio are processed. Defaults to <code>0.8</code>.</li>\n<li><code>deleteOriginalAssets</code>: Whether to delete the original assets or not. Defaults to <code>false</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#option-arguments" id="option-arguments"></a><span class="text">Option Arguments</span><a class="icon-link" href="#option-arguments"></a></h2>\n<ul>\n<li>verbose: Default: false,</li>\n<li>verbose_more: Default: false,</li>\n<li>numiterations: Default: 15,</li>\n<li>blocksplitting: Default: true,</li>\n<li>blocksplittinglast: Default: false,</li>\n<li>blocksplittingmax: Default: 15</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"ZopfliWebpackPlugin"},title:"ZopfliWebpackPlugin",url:"/plugins/zopfli-webpack-plugin/"},{file:{attributes:{title:"BannerPlugin",contributors:["simon04"],related:[{title:"banner-plugin-hashing test",url:"https://github.com/webpack/webpack/blob/master/test/configCases/plugins/banner-plugin-hashing/webpack.config.js"}],group:"-",anchors:[{title:"Options",id:"options"},{title:"Placeholders",id:"placeholders"}]},body:'<p>Adds a banner to the top of each generated chunk.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span>\n<span class="token comment">// or</span>\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  banner<span class="token punctuation">:</span> string<span class="token punctuation">,</span> <span class="token comment">// the banner as string, it will be wrapped in a comment</span>\n  raw<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// if true, banner will not be wrapped in a comment</span>\n  entryOnly<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// if true, the banner will only be added to the entry chunks</span>\n  test<span class="token punctuation">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#placeholders" id="placeholders"></a><span class="text">Placeholders</span><a class="icon-link" href="#placeholders"></a></h2>\n<p>Since webpack 2.5.0, placeholders are evaluated in the <code>banner</code> string:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  banner<span class="token punctuation">:</span> <span class="token string">"hash:[hash], chunkhash:[chunkhash], name:[name], filebase:[filebase], query:[query], file:[file]"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"BannerPlugin"},title:"BannerPlugin",url:"/plugins/banner-plugin/"},{file:{attributes:{title:"ClosureWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/closure-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/closure-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/closure-webpack-plugin",group:"-",anchors:[{title:"Usage example",id:"usage-example"},{title:"Options",id:"options"},{title:"Compiler Flags",id:"compiler-flags"},{title:"Aggressive Bundle Mode",id:"aggressive-bundle-mode"},{title:"Tips for Use",id:"tips-for-use"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p><a href="https://badge.fury.io/js/closure-webpack-plugin"><img src="https://badge.fury.io/js/closure-webpack-plugin.svg" alt="npm version"></a></p>\n<p>This plugin supports the use of Google&#39;s Closure Tools with webpack.</p>\n<p><a href="https://developers.google.com/closure/compiler/">Closure-Compiler</a> is a full optimizing compiler and transpiler.\nIt offers unmatched optimizations, provides type checking and can easily target transpilation to different versions of ECMASCRIPT.</p>\n<p><a href="https://developers.google.com/closure/library/">Clousre-Library</a> is a utility library designed for full compatibility\nwith Closure-Compiler. </p>\n<p><strong>Note:</strong> This plugin is a very early beta and currently uses a custom build of closure-compiler while necessary\nchanges are integrated back into the main compiler repository.\nOnly the java version of closure-compiler is currently supported.</p>\n<h2 class="header"><a class="anchor" href="#usage-example" id="usage-example"></a><span class="text">Usage example</span><a class="icon-link" href="#usage-example"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">const</span> ClosurePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'closure-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">ClosurePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>mode<span class="token punctuation">:</span> <span class="token string">\'STANDARD\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// compiler flags here</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// for debuging help, try these:</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// formatting: \'PRETTY_PRINT\'</span>\n  <span class="token comment">// debug: true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<ul>\n<li><strong>mode</strong> - <code>STANDARD</code> (default), <code>AGGRESSIVE_BUNDLE</code> or <code>NONE</code>. Controls how the plugin utilizes the compiler.  <ul>\n<li><code>STANDARD</code> mode, closure-compiler is used as a direct replacement for other minifiers as well as most Babel transformations.  </li>\n<li><code>AGGRESSIVE_BUNDLE</code> mode, the compiler performs additional optimizations of modules to produce a much smaller file, but\nis not compatible with all input modules.</li>\n<li><code>NONE</code> is designed for dev mode without the compiler but still supports closure-library style dependencies.</li>\n</ul>\n</li>\n<li><p><strong>childCompilations</strong> - boolean or function. Defaults to <code>false</code>.\nIn order to decrease build times, this plugin by default only operates on the main compilation.\nPlugins such as extract-text-plugin and html-webpack-plugin run as child compilations and\nusually do not need transpilation or minification. You can enable this for all child compilations\nby setting this option to <code>true</code>. For specific control, the option can be set to a function which\nwill be passed a compilation object.<br>Example: <code>function(compilation) { return /html-webpack/.test(compilation.name); }</code>.</p>\n</li>\n<li><p><strong>closureLibraryBase</strong> - (optional) string. Path to the base.js file in Closure-Library.</p>\n</li>\n<li><strong>deps</strong> - (optional) string or Array. Closures style dependency mappings. Typically generated by the\n<a href="https://developers.google.com/closure/library/docs/depswriter">depswriter.py script</a> included with Closure-Library.</li>\n<li><strong>extraDeps</strong> - (optional) Object. Mapping of namespace to file path for closure-library provided namespaces.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#compiler-flags" id="compiler-flags"></a><span class="text">Compiler Flags</span><a class="icon-link" href="#compiler-flags"></a></h2>\n<p>The plugin controls several compiler flags. The following flags should not be used in any mode:</p>\n<ul>\n<li>module_resolution</li>\n<li>output_wrapper</li>\n<li>dependency_mode</li>\n<li>create_source_map</li>\n<li>module</li>\n<li>entry_point</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#aggressive-bundle-mode" id="aggressive-bundle-mode"></a><span class="text">Aggressive Bundle Mode</span><a class="icon-link" href="#aggressive-bundle-mode"></a></h2>\n<p>In this mode, the compiler rewrites CommonJS modules and hoists require calls. Some modules are not compatible with this type of rewritting. In particular, hoisting will cause the following code to execute out of order:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addPolyfillToFoo</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Aggressive Bundle Mode utilizes a custom runtime in which modules within a chunk file are all included in the same scope.\nThis avoids <a href="https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/">the cost of small modules</a>.</p>\n<p>In Aggressive Bundle Mode, a file can only appear in a single output chunk. Use the <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">Commons Chunk Plugin</a> to split duplicated files into a single output chunk.</p>\n<h2 class="header"><a class="anchor" href="#tips-for-use" id="tips-for-use"></a><span class="text">Tips for Use</span><a class="icon-link" href="#tips-for-use"></a></h2>\n<ul>\n<li>Don&#39;t use babel - closure-compiler is also a transpiler.\nIf you need <a href="https://github.com/google/closure-compiler/wiki/ECMAScript6">features not yet supported</a> by closure-compiler, have babel\nonly target those features. </li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/ChadKillingsworth"></p>\n<p><img width="150" alt="" height="150" src="https://avatars.githubusercontent.com/u/1247639?v=3"></p>\n<p></br></p>\n<pre><code>      Chad Killingsworth\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" alt="" height="150" src="https://avatars.githubusercontent.com/u/8420490?v=3"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"ClosureWebpackPlugin"},title:"ClosureWebpackPlugin",url:"/plugins/closure-webpack-plugin/"},{file:{attributes:{title:"CommonsChunkPlugin",contributors:["bebraw","christopher4lis","jdbevan","kevinzwhuang","simon04"],group:"-",anchors:[{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Commons chunk for entries",id:"commons-chunk-for-entries"},{title:"Explicit vendor chunk",id:"explicit-vendor-chunk"},{title:"Move common modules into the parent chunk",id:"move-common-modules-into-the-parent-chunk"},{title:"Extra async commons chunk",id:"extra-async-commons-chunk"},{title:"Passing the minChunks property a function",id:"passing-the-minchunks-property-a-function"},{title:"Manifest file",id:"manifest-file"},{title:"Combining implicit common vendor chunks and manifest file",id:"combining-implicit-common-vendor-chunks-and-manifest-file"},{title:"More Examples",id:"more-examples"}],related:[]},body:'<p>The <code>CommonsChunkPlugin</code> is an opt-in feature that creates a separate file (known as a chunk), consisting of common modules shared between multiple entry points. By separating common modules from bundles, the resulting chunked file can be loaded once initially, and stored in cache for later use. This results in pagespeed optimizations as the browser can quickly serve the shared code from cache, rather than being forced to load a larger bundle whenever a new page is visited.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> <span class="token comment">// or</span>\n  names<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// The chunk name of the commons chunk. An existing chunk can be selected by passing a name of an existing chunk.</span>\n  <span class="token comment">// If an array of strings is passed this is equal to invoking the plugin multiple times for each chunk name.</span>\n  <span class="token comment">// If omitted and `options.async` or `options.children` is set all chunks are used, otherwise `options.filename`</span>\n  <span class="token comment">// is used as chunk name.</span>\n  <span class="token comment">// When using `options.async` to create common chunks from other async chunks you must specify an entry-point</span>\n  <span class="token comment">// chunk name here instead of omitting the `option.name`.</span>\n\n  filename<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  <span class="token comment">// The filename template for the commons chunk. Can contain the same placeholders as `output.filename`.</span>\n  <span class="token comment">// If omitted the original filename is not modified (usually `output.filename` or `output.chunkFilename`).</span>\n  <span class="token comment">// This option is not permitted if you\'re using `options.async` as well, see below for more details.</span>\n\n  minChunks<span class="token punctuation">:</span> number<span class="token operator">|</span><span class="token number">Infinity</span><span class="token operator">|</span><span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> boolean<span class="token punctuation">,</span>\n  <span class="token comment">// The minimum number of chunks which need to contain a module before it\'s moved into the commons chunk.</span>\n  <span class="token comment">// The number must be greater than or equal 2 and lower than or equal to the number of chunks.</span>\n  <span class="token comment">// Passing `Infinity` just creates the commons chunk, but moves no modules into it.</span>\n  <span class="token comment">// By providing a `function` you can add custom logic. (Defaults to the number of chunks)</span>\n\n  chunks<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// Select the source chunks by chunk names. The chunk must be a child of the commons chunk.</span>\n  <span class="token comment">// If omitted all entry chunks are selected.</span>\n\n  children<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  <span class="token comment">// If `true` all children of the commons chunk are selected</span>\n\n  deepChildren<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  <span class="token comment">// If `true` all descendants of the commons chunk are selected</span>\n\n  <span class="token keyword">async</span><span class="token punctuation">:</span> boolean<span class="token operator">|</span>string<span class="token punctuation">,</span>\n  <span class="token comment">// If `true` a new async commons chunk is created as child of `options.name` and sibling of `options.chunks`.</span>\n  <span class="token comment">// It is loaded in parallel with `options.chunks`.</span>\n  <span class="token comment">// Instead of using `option.filename`, it is possible to change the name of the output file by providing</span>\n  <span class="token comment">// the desired string here instead of `true`.</span>\n\n  minSize<span class="token punctuation">:</span> number<span class="token punctuation">,</span>\n  <span class="token comment">// Minimum size of all common module before a commons chunk is created.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> The deprecated webpack 1 constructor <code>new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)</code> is no longer supported. Use a corresponding options object instead. </div></blockquote><h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<h3 class="header"><a class="anchor" href="#commons-chunk-for-entries" id="commons-chunk-for-entries"></a><span class="text">Commons chunk for entries</span><a class="icon-link" href="#commons-chunk-for-entries"></a></h3>\n<p>Generate an extra chunk, which contains common modules shared between entry points.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"commons"</span><span class="token punctuation">,</span>\n  <span class="token comment">// (the commons chunk name)</span>\n\n  filename<span class="token punctuation">:</span> <span class="token string">"commons.js"</span><span class="token punctuation">,</span>\n  <span class="token comment">// (the filename of the commons chunk)</span>\n\n  <span class="token comment">// minChunks: 3,</span>\n  <span class="token comment">// (Modules must be shared between 3 entries)</span>\n\n  <span class="token comment">// chunks: ["pageA", "pageB"],</span>\n  <span class="token comment">// (Only use these entries)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>You must load the generated chunk before the entry point:</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commons.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entry.bundle.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#explicit-vendor-chunk" id="explicit-vendor-chunk"></a><span class="text">Explicit vendor chunk</span><a class="icon-link" href="#explicit-vendor-chunk"></a></h3>\n<p>Split your code into vendor and application.</p>\n<pre><code class="lang-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"jquery"</span><span class="token punctuation">,</span> <span class="token string">"other-lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  app<span class="token punctuation">:</span> <span class="token string">"./entry"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n    <span class="token comment">// filename: "vendor.js"</span>\n    <span class="token comment">// (Give the chunk a different name)</span>\n\n    minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n    <span class="token comment">// (with more entries, this ensures that no other module</span>\n    <span class="token comment">//  goes into the vendor chunk)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vendor.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> In combination with long term caching you may need to use the <a href="https://github.com/diurnalist/chunk-manifest-webpack-plugin"><code>ChunkManifestWebpackPlugin</code></a> to avoid the vendor chunk changes. You should also use records to ensure stable module ids, e.g. using <a href="/plugins/named-modules-plugin"><code>NamedModulesPlugin</code></a> or <a href="/plugins/hashed-module-ids-plugin"><code>HashedModuleIdsPlugin</code></a>. </div></blockquote><h3 class="header"><a class="anchor" href="#move-common-modules-into-the-parent-chunk" id="move-common-modules-into-the-parent-chunk"></a><span class="text">Move common modules into the parent chunk</span><a class="icon-link" href="#move-common-modules-into-the-parent-chunk"></a></h3>\n<p>With <a href="/guides/code-splitting">Code Splitting</a>, multiple child chunks of an entry chunk can have common dependencies. To prevent duplication these can be moved into the parent. This reduces overall size, but does have a negative effect on the initial load time. If it is expected that users will need to download many sibling chunks, i.e. children of the entry chunk, then this should improve load time overall.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// names: ["app", "subPageA"]</span>\n  <span class="token comment">// (choose the chunks, or omit for all chunks)</span>\n\n  children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// (select all children of chosen chunks)</span>\n\n  <span class="token comment">// minChunks: 3,</span>\n  <span class="token comment">// (3 children must share the module before it\'s moved)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extra-async-commons-chunk" id="extra-async-commons-chunk"></a><span class="text">Extra async commons chunk</span><a class="icon-link" href="#extra-async-commons-chunk"></a></h3>\n<p>Similar to the above one, but instead of moving common modules into the parent (which increases initial load time) a new async-loaded additional commons chunk is used. This is automatically downloaded in parallel when the additional chunk is downloaded.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>\n  <span class="token comment">// or</span>\n  names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"subPageA"</span><span class="token punctuation">]</span>\n  <span class="token comment">// the name or list of names must match the name or names</span>\n  <span class="token comment">// of the entry points that create the async chunks</span>\n\n  children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// (use all children of the chunk)</span>\n\n  <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// (create an async commons chunk)</span>\n\n  minChunks<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token comment">// (3 children must share the module before it\'s separated)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#passing-the-minchunks-property-a-function" id="passing-the-minchunks-property-a-function"></a><span class="text">Passing the <code>minChunks</code> property a function</span><a class="icon-link" href="#passing-the-minchunks-property-a-function"></a></h3>\n<p>You also have the ability to pass the <code>minChunks</code> property a function. This function is called by the <code>CommonsChunkPlugin</code> and calls the function with <code>module</code> and <code>count</code> arguments.</p>\n<p>The <code>module</code> argument represents each module in the chunks you have provided via the <code>name</code>/<code>names</code> property.\n<code>module</code> has the shape of a <a href="https://github.com/webpack/webpack/blob/master/lib/NormalModule.js">NormalModule</a>, which has two particularly useful properties for this use case:</p>\n<ul>\n<li><code>module.context</code>: The directory that stores the file. For example: <code>&#39;/my_project/node_modules/example-dependency&#39;</code></li>\n<li><code>module.resource</code>: The name of the file being processed. For example: <code>&#39;/my_project/node_modules/example-dependency/index.js&#39;</code></li>\n</ul>\n<p>The <code>count</code> argument represents how many chunks the <code>module</code> is used in.</p>\n<p>This option is useful when you want to have fine-grained control over how the CommonsChunk algorithm determines where modules should be moved to.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"my-single-lib-chunk"</span><span class="token punctuation">,</span>\n  filename<span class="token punctuation">:</span> <span class="token string">"my-single-lib-chunk.js"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// If module has a path, and inside of the path exists the name "somelib",</span>\n    <span class="token comment">// and it is used in 3 separate chunks/entries, then break it out into</span>\n    <span class="token comment">// a separate chunk with chunk keyname "my-single-lib-chunk", and filename "my-single-lib-chunk.js"</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>resource <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token regex">/somelib/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>As seen above, this example allows you to move only one lib to a separate file if and only if all conditions are met inside the function.</p>\n<p>This concept may be used to obtain implicit common vendor chunks:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// this assumes your vendor imports exist in the node_modules directory</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>context <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>In order to obtain a single CSS file containing your application and vendor CSS, use the following <code>minChunks</code> function together with <a href="/plugins/extract-text-webpack-plugin/"><code>ExtractTextPlugin</code></a>:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This prevents stylesheet resources with the .css or .scss extension</span>\n    <span class="token comment">// from being moved from their original chunk to the vendor chunk</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token regex">/^.*\\.(css|scss)$/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>context <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#manifest-file" id="manifest-file"></a><span class="text">Manifest file</span><a class="icon-link" href="#manifest-file"></a></h2>\n<p>To extract the webpack bootstrap logic into a separate file, use the <code>CommonsChunkPlugin</code> on a <code>name</code> which is not defined as <code>entry</code>. Commonly the name <code>manifest</code> is used. See the <a href="/guides/caching">caching guide</a> for details.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>\n  minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#combining-implicit-common-vendor-chunks-and-manifest-file" id="combining-implicit-common-vendor-chunks-and-manifest-file"></a><span class="text">Combining implicit common vendor chunks and manifest file</span><a class="icon-link" href="#combining-implicit-common-vendor-chunks-and-manifest-file"></a></h2>\n<p>Since the <code>vendor</code> and <code>manifest</code> chunk use a different definition for <code>minChunks</code>, you need to invoke the plugin twice:</p>\n<pre><code class="lang-javascript"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span>\n    minChunks<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> module<span class="token punctuation">.</span>context <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>\n    minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#more-examples" id="more-examples"></a><span class="text">More Examples</span><a class="icon-link" href="#more-examples"></a></h2>\n<ul>\n<li><a href="https://github.com/webpack/webpack/tree/master/examples/common-chunk-and-vendor-chunk">Common and Vendor Chunks</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/examples/multiple-commons-chunks">Multiple Common Chunks</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points-commons-chunk-css-bundle">Multiple Entry Points with Commons Chunk</a></li>\n</ul>\n',title:"CommonsChunkPlugin"},title:"CommonsChunkPlugin",url:"/plugins/commons-chunk-plugin/"},{file:{attributes:{title:"ComponentWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/component-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/component-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/component-webpack-plugin",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Advanced usage",id:"advanced-usage"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<p><strong>UNMAINTAINED!</strong></p>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> ComponentPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"component-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ComponentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#advanced-usage" id="advanced-usage"></a><span class="text">Advanced usage</span><a class="icon-link" href="#advanced-usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> ComponentPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"component-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ComponentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token comment">// Load xyz field in component.json</span>\n            xyz<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token comment">// This is equal to: xyz: "[file]"</span>\n\n            <span class="token comment">// Load xyz field with the xyz-loader</span>\n            xyz<span class="token punctuation">:</span> <span class="token string">"!xyz-loader![file]"</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// This is default:</span>\n            <span class="token comment">// styles: "!style-loader!css-loader![file]"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n            <span class="token comment">// Lookup paths</span>\n            <span class="token string">"component"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT (<a href="http://www.opensource.org/licenses/mit-license.php">http://www.opensource.org/licenses/mit-license.php</a>)</p>\n',title:"ComponentWebpackPlugin"},title:"ComponentWebpackPlugin",url:"/plugins/component-webpack-plugin/"},{file:{attributes:{title:"CompressionWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/compression-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/compression-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/compression-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"include",id:"include"},{title:"exclude",id:"exclude"},{title:"cache",id:"cache"},{title:"asset",id:"asset"},{title:"filename",id:"filename"},{title:"algorithm",id:"algorithm"},{title:"threshold",id:"threshold"},{title:"minRatio",id:"minratio"},{title:"deleteOriginalAssets",id:"deleteoriginalassets"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Prepare compressed versions of assets to serve them with Content-Encoding</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D compression-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> CompressionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"compression-webpack-plugin"</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#test"><code>test</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>.</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        All assets matching this <code>{RegExp|Array&lt;RegExp&gt;}</code> are processed\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#include"><code>include</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Files to <code>include</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#exclude"><code>exclude</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Files to <code>exclude</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#cache"><code>cache</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable file caching\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#asset"><code>asset</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[path].gz[query]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The target asset name. <code>[file]</code> is replaced with the original asset. <code>[path]</code> is replaced with the path of the original asset and <code>[query]</code> with the query\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#filename"><code>filename</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        A <code>{Function}</code> <code>(asset) =&gt; asset</code> which receives the asset name (after processing <code>asset</code> option) and returns the new asset name\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#algorithm"><code>algorithm</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>gzip</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Can be <code>(buffer, cb) =&gt; cb(buffer)</code> or if a <code>{String}</code> is used the algorithm is taken from <code>zlib</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#threshold"><code>threshold</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>0</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Only assets bigger than this size are processed. In bytes.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#minratio"><code>minRatio</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>0.8</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Only assets that compress better than this ratio are processed\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#deleteoriginalassets"><code>deleteOriginalAssets</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Whether to delete the original assets or not\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#include" id="include"></a><span class="text"><code>include</code></span><a class="icon-link" href="#include"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    include<span class="token punctuation">:</span> <span class="token regex">/\\/includes/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#exclude" id="exclude"></a><span class="text"><code>exclude</code></span><a class="icon-link" href="#exclude"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    exclude<span class="token punctuation">:</span> <span class="token regex">/\\/excludes/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cache" id="cache"></a><span class="text"><code>cache</code></span><a class="icon-link" href="#cache"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    cache<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#asset" id="asset"></a><span class="text"><code>asset</code></span><a class="icon-link" href="#asset"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    asset<span class="token punctuation">:</span> <span class="token string">\'[path].gz[query]\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#filename" id="filename"></a><span class="text"><code>filename</code></span><a class="icon-link" href="#filename"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      asset <span class="token operator">=</span> <span class="token string">\'rename\'</span>\n      <span class="token keyword">return</span> asset\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#algorithm" id="algorithm"></a><span class="text"><code>algorithm</code></span><a class="icon-link" href="#algorithm"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    algorithm<span class="token punctuation">:</span> <span class="token string">\'gzip\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#threshold" id="threshold"></a><span class="text"><code>threshold</code></span><a class="icon-link" href="#threshold"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    threshold<span class="token punctuation">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#minratio" id="minratio"></a><span class="text"><code>minRatio</code></span><a class="icon-link" href="#minratio"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    minRatio<span class="token punctuation">:</span> <span class="token number">0.8</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#deleteoriginalassets" id="deleteoriginalassets"></a><span class="text"><code>deleteOriginalAssets</code></span><a class="icon-link" href="#deleteoriginalassets"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    deleteOriginalAssets<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>    Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"CompressionWebpackPlugin"},title:"CompressionWebpackPlugin",url:"/plugins/compression-webpack-plugin/"},{file:{attributes:{title:"ContextReplacementPlugin",contributors:["simon04"],related:[{title:"Issue 2783 - ContextReplacementPlugin Description",url:"https://github.com/webpack/webpack/issues/2783#issuecomment-234137265"}],group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Content Callback",id:"content-callback"},{title:"Other Options",id:"other-options"}]},body:'<p><em>Context</em> refers to a <a href="/guides/dependency-management/#require-with-expression">require with an expression</a> such as <code>require(&#39;./locale/&#39; + name + &#39;.json&#39;)</code>. When encountering such an expression, webpack infers the directory (<code>&#39;./locale/&#39;</code>) and a regular expression (<code>/^.*\\.json$/</code>). Since the <code>name</code> is not known at compile time, webpack includes every file as module in the bundle.</p>\n<p>The <code>ContextReplacementPlugin</code> allows you to override the inferred information. There are various ways to configure the plugin:</p>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">:</span> RegExp<span class="token punctuation">,</span>\n  newContentResource<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  newContentRecursive<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>\n  newContentRegExp<span class="token operator">?</span><span class="token punctuation">:</span> RegExp\n<span class="token punctuation">)</span>\n</code></pre>\n<p>If the resource (directory) matches <code>resourceRegExp</code>, the plugin replaces the default resource, recursive flag or generated regular expression with <code>newContentResource</code>, <code>newContentRecursive</code> or <code>newContextRegExp</code> respectively. If <code>newContentResource</code> is relative, it is resolved relative to the previous resource.</p>\n<p>Here&#39;s a small example to restrict module usage:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  <span class="token regex">/moment[\\/\\\\]locale$/</span><span class="token punctuation">,</span>\n  <span class="token regex">/de|fr|hu/</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>The <code>moment/locale</code> context is restricted to files matching <code>/de|fr|hu/</code>. Thus only those locales are included (see <a href="https://github.com/moment/moment/issues/2373">this issue</a> for more information).</p>\n<h2 class="header"><a class="anchor" href="#content-callback" id="content-callback"></a><span class="text">Content Callback</span><a class="icon-link" href="#content-callback"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">:</span> RegExp<span class="token punctuation">,</span>\n  newContentCallback<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>The <code>newContentCallback</code> function is given a <a href="/api/plugins/module-factories/"><code>data</code> object of the <code>ContextModuleFactory</code></a> and is expected to overwrite the <code>request</code> attribute of the supplied object.</p>\n<p>Using this callback we can dynamically redirect requests to a new location:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex">/^\\.\\/locale$/</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token regex">/\\/moment\\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>context<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    regExp<span class="token punctuation">:</span> <span class="token regex">/^\\.\\/\\w+/</span><span class="token punctuation">,</span>\n    request<span class="token punctuation">:</span> <span class="token string">\'../../locale\'</span> <span class="token comment">// resolved relatively</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#other-options" id="other-options"></a><span class="text">Other Options</span><a class="icon-link" href="#other-options"></a></h2>\n<p>The <code>newContentResource</code> and <code>newContentCreateContextMap</code> parameters are also available:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">:</span> RegExp<span class="token punctuation">,</span>\n  newContentResource<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  newContentCreateContextMap<span class="token punctuation">:</span> object <span class="token comment">// mapping runtime-request (userRequest) to compile-time-request (request)</span>\n<span class="token punctuation">)</span>\n</code></pre>\n<p>These two parameters can be used together to redirect requests in a more targeted way. The <code>newContentCreateContextMap</code> allows you to map runtime requests to compile requests in the form of an object:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex">/selector/</span><span class="token punctuation">,</span> <span class="token string">\'./folder\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">\'./request\'</span><span class="token punctuation">:</span> <span class="token string">\'./request\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'./other-request\'</span><span class="token punctuation">:</span> <span class="token string">\'./new-request\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"ContextReplacementPlugin"},title:"ContextReplacementPlugin",url:"/plugins/context-replacement-plugin/"},{file:{attributes:{title:"CopyWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/copy-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/copy-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/copy-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Available options:",id:"available-options-"},{title:"Examples",id:"examples"},{title:"FAQ",id:"faq"},{title:'"EMFILE: too many open files" or "ENFILE: file table overflow"',id:"-emfile-too-many-open-files-or-enfile-file-table-overflow-"},{title:"This doesn't copy my files with webpack-dev-server",id:"this-doesn-t-copy-my-files-with-webpack-dev-server"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Copies individual files or entire directories to the build directory.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code>npm <span class="token function">install</span> --save-dev copy-webpack-plugin\n</code></pre><h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><code>new CopyWebpackPlugin([patterns], options)</code></p>\n<p>A pattern looks like:\n<code>{ from: &#39;source&#39;, to: &#39;dest&#39; }</code></p>\n<p>Or, in the simple case of just a <code>from</code> with the default destination, you can use a string primitive instead of an object:\n<code>&#39;source&#39;</code></p>\n<p>###</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Required</div><div class="table-th">Default</div><div class="table-th">Details</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>from</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        Y\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        <em>examples:</em><br>&#39;relative/file.txt&#39;<br>&#39;/absolute/file.txt&#39;<br>&#39;relative/dir&#39;<br>&#39;/absolute/dir&#39;<br>&#39;**/*&#39;<br>{glob:&#39;**/*&#39;, dot: true}<br><br>Globs accept <a href="https://github.com/isaacs/minimatch">minimatch options</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>fromArgs</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{ cwd: context }</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        See the <a href="https://github.com/isaacs/node-glob#options"><code>node-glob</code> options</a> in addition to the ones below.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>to</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        output root if <code>from</code> is file or dir<br><br>resolved glob path if <code>from</code> is glob\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        <em>examples:</em><br>&#39;relative/file.txt&#39;<br>&#39;/absolute/file.txt&#39;<br>&#39;relative/dir&#39;<br>&#39;/absolute/dir&#39;<br>&#39;relative/[name].[ext]&#39;<br>&#39;/absolute/[name].[ext]&#39;<br><br>Templates are <a href="/loaders/file-loader/">file-loader patterns</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>toType</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <strong>&#39;file&#39;</strong> if <code>to</code> has extension or <code>from</code> is file<br><br><strong>&#39;dir&#39;</strong> if <code>from</code> is directory, <code>to</code> has no extension or ends in &#39;/&#39;<br><br><strong>&#39;template&#39;</strong> if <code>to</code> contains <a href="/loaders/file-loader/">a template pattern</a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>context</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        options.context ||compiler.options.context\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        A path that determines how to interpret the <code>from</code> path\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>flatten</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Removes all directory references and only copies file names<br><br>If files have the same name, the result is non-deterministic\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>ignore</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        []\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Additional globs to ignore for this pattern\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>transform</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        function(content, path) {<br>&nbsp;&nbsp;return content;<br>}\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Function that modifies file contents before writing to webpack\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>force</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Overwrites files already in compilation.assets (usually added by other plugins)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>cache</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Required\n    </div>\n    <div class="table-td-content">\n        N\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Enable <code>transform</code> caching. You can use <code>{ cache: { key: &#39;my-cache-key&#39;} }</code> to invalidate cache.\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#available-options-" id="available-options-"></a><span class="text">Available options:</span><a class="icon-link" href="#available-options-"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Default</div><div class="table-th">Details</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>context</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        compiler.options.context\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        A path that determines how to interpret the <code>from</code> path, shared for all patterns\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>ignore</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        []\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Array of globs to ignore (applied to <code>from</code>)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>copyUnmodified</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        Copies files, regardless of modification when using watch or webpack-dev-server. All files are copied on first build, regardless of this option.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>debug</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <strong>&#39;warning&#39;</strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Details\n    </div>\n    <div class="table-td-content">\n        <em>options:</em><br><strong>&#39;warning&#39;</strong> - only warnings<br><strong>&#39;info&#39;</strong> or true - file location and read info<br><strong>&#39;debug&#39;</strong> - very detailed debugging info\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h3>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is required for older versions of webpack-dev-server</span>\n        <span class="token comment">// if you use absolute \'to\' paths. The path should be an</span>\n        <span class="token comment">// absolute path to your build destination.</span>\n        outputPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'build\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n            <span class="token comment">// {output}/file.txt</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/file.txt\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// equivalent</span>\n            <span class="token string">\'from/file.txt\'</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// {output}/to/file.txt</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/file.txt\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'to/file.txt\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// {output}/to/directory/file.txt</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/file.txt\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'to/directory\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy directory contents to {output}/</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/directory\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy directory contents to {output}/to/directory/</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'from/directory\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'to/directory\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy glob results to /absolute/path/</span>\n            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> \'<span class="token keyword">from</span><span class="token operator">/</span>directory<span class="token comment">/**/</span><span class="token operator">*</span><span class="token string">\', to: \'</span><span class="token operator">/</span>absolute<span class="token operator">/</span>path\' <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy glob results (with dot files) to /absolute/path/</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    glob<span class="token punctuation">:</span>\'<span class="token keyword">from</span><span class="token operator">/</span>directory<span class="token comment">/**/</span><span class="token operator">*</span>\'<span class="token punctuation">,</span>\n                    dot<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                to<span class="token punctuation">:</span> <span class="token string">\'/absolute/path\'</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// Copy glob results, relative to context</span>\n            <span class="token punctuation">{</span>\n                context<span class="token punctuation">:</span> <span class="token string">\'from/directory\'</span><span class="token punctuation">,</span>\n                <span class="token keyword">from</span><span class="token punctuation">:</span> \'<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">/*\',\n                to: \'/absolute/path\'\n            },\n\n            // {output}/file/without/extension\n            {\n                from: \'path/to/file.txt\',\n                to: \'file/without/extension\',\n                toType: \'file\'\n            },\n\n            // {output}/directory/with/extension.ext/file.txt\n            {\n                from: \'path/to/file.txt\',\n                to: \'directory/with/extension.ext\',\n                toType: \'dir\'\n            },\n\n            // Ignore some files using glob in nested directory\n            {\n                from: \'from/directory\',\n                to: \'to/directory\',\n                ignore: [\'nested/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>extension\'<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                <span class="token comment">// Doesn\'t copy any files with a txt extension    </span>\n                <span class="token string">\'*.txt\'</span><span class="token punctuation">,</span>\n\n                <span class="token comment">// Doesn\'t copy any file, even if they start with a dot</span>\n                \'<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">/*\',\n\n                // Doesn\'t copy any file, except if they start with a dot\n                { glob: \'**/</span><span class="token operator">*</span>\'<span class="token punctuation">,</span> dot<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n            <span class="token comment">// By default, we only copy modified files during</span>\n            <span class="token comment">// a watch or webpack-dev-server build. Setting this</span>\n            <span class="token comment">// to `true` copies all files.</span>\n            copyUnmodified<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#faq" id="faq"></a><span class="text">FAQ</span><a class="icon-link" href="#faq"></a></h3>\n<h4 class="header"><a class="anchor" href="#-emfile-too-many-open-files-or-enfile-file-table-overflow-" id="-emfile-too-many-open-files-or-enfile-file-table-overflow-"></a><span class="text">&quot;EMFILE: too many open files&quot; or &quot;ENFILE: file table overflow&quot;</span><a class="icon-link" href="#-emfile-too-many-open-files-or-enfile-file-table-overflow-"></a></h4>\n<p>Globally patch fs with <a href="https://www.npmjs.com/package/graceful-fs">graceful-fs</a></p>\n<p><code>npm install graceful-fs --save-dev</code></p>\n<p>At the top of your webpack config, insert this</p>\n<pre><code>const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconst gracefulFs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">\'graceful-fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngracefulFs.gracefulify<span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><p>See <a href="https://github.com/kevlened/copy-webpack-plugin/issues/59#issuecomment-228563990">this issue</a> for more details</p>\n<h4 class="header"><a class="anchor" href="#this-doesn-t-copy-my-files-with-webpack-dev-server" id="this-doesn-t-copy-my-files-with-webpack-dev-server"></a><span class="text">This doesn&#39;t copy my files with webpack-dev-server</span><a class="icon-link" href="#this-doesn-t-copy-my-files-with-webpack-dev-server"></a></h4>\n<p>Starting in version <a href="https://github.com/kevlened/copy-webpack-plugin/blob/master/CHANGELOG.md#300-may-14-2016">3.0.0</a>, we stopped using fs to copy files to the filesystem and started depending on webpack&#39;s <a href="https://webpack.github.io/docs/webpack-dev-server.html#content-base">in-memory filesystem</a>:</p>\n<blockquote>\n<p>... webpack-dev-server will serve the static files in your build folder. It’ll watch your source files for changes and when changes are made the bundle will be recompiled. <strong>This modified bundle is served from memory at the relative path specified in publicPath (see API)</strong>. It will not be written to your configured output directory.</p>\n</blockquote>\n<p>If you must have webpack-dev-server write to your output directory, you can force it with the <a href="https://github.com/gajus/write-file-webpack-plugin">write-file-webpack-plugin</a>.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"CopyWebpackPlugin"},title:"CopyWebpackPlugin",url:"/plugins/copy-webpack-plugin/"},{file:{attributes:{title:"CssWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/css-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/css-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/css-webpack-plugin",group:"-",anchors:[],contributors:[],related:[]},body:"<p>Nothing to see here .... yet</p>\n",title:"CssWebpackPlugin"},title:"CssWebpackPlugin",url:"/plugins/css-webpack-plugin/"},{file:{attributes:{title:"DefinePlugin",contributors:["rouzbeh84","simon04"],group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Feature Flags",id:"feature-flags"},{title:"Service URLs",id:"service-urls"}],related:[]},body:'<p>The <code>DefinePlugin</code> allows you to create global constants which can be configured at <strong>compile</strong> time. This can be useful for allowing different behavior between development builds and release builds. If you perform logging in your development build but not in the release build you might use a global constant to determine whether logging takes place. That&#39;s where <code>DefinePlugin</code> shines, set it and forget it rules for development and release builds.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Definitions...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Each key passed into <code>DefinePlugin</code> is an identifier or multiple identifiers joined with <code>.</code>.</p>\n<ul>\n<li>If the value is a string it will be used as a code fragment.</li>\n<li>If the value isn&#39;t a string, it will be stringified (including functions).</li>\n<li>If the value is an object all keys are defined the same way.</li>\n<li>If you prefix <code>typeof</code> to the key, it&#39;s only defined for typeof calls.</li>\n</ul>\n<p>The values will be inlined into the code allowing a minification pass to remove the redundant conditional.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  PRODUCTION<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  VERSION<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"5fa3b9"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  BROWSER_SUPPORTS_HTML5<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  TWO<span class="token punctuation">:</span> <span class="token string">"1+1"</span><span class="token punctuation">,</span>\n  <span class="token string">"typeof window"</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"object"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<pre><code class="lang-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Running App version "</span> <span class="token operator">+</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>BROWSER_SUPPORTS_HTML5<span class="token punctuation">)</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html5shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Note that because the plugin does a direct text replacement, the value given to it must include <strong>actual quotes</strong> inside of the string itself. Typically, this is done either with either alternate quotes, such as <code>&#39;&quot;production&quot;&#39;</code>, or by using <code>JSON.stringify(&#39;production&#39;)</code>. </div></blockquote><p><strong>index.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PRODUCTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debug info\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>PRODUCTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>After passing through webpack with no minification results in:</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debug info\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>and then after a minification pass results in:</p>\n<pre><code class="lang-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#feature-flags" id="feature-flags"></a><span class="text">Feature Flags</span><a class="icon-link" href="#feature-flags"></a></h2>\n<p>Enable/disable features in production/development build using <a href="https://en.wikipedia.org/wiki/Feature_toggle">feature flags</a>.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'NICE_FEATURE\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'EXPERIMENTAL_FEATURE\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> When defining values for <code>process</code> prefer <code>&#39;process.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)</code> over <code>process: { env: { NODE_ENV: JSON.stringify(&#39;production&#39;) } }</code>. Using the latter will overwrite the <code>process</code> object which can break compatibility with some modules that expect other values on the process object to be defined. </div></blockquote><h2 class="header"><a class="anchor" href="#service-urls" id="service-urls"></a><span class="text">Service URLs</span><a class="icon-link" href="#service-urls"></a></h2>\n<p>Use a different service URL in production/development builds:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'SERVICE_URL\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"http://dev.example.com"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"DefinePlugin"},title:"DefinePlugin",url:"/plugins/define-plugin/"},{file:{attributes:{title:"DllPlugin",contributors:["aretecode","opiepj","simon04","skipjack","sokra"],related:[{title:"Code Splitting Example",url:"https://github.com/webpack/webpack/tree/master/examples/explicit-vendor-chunk/README.md"}],group:"-",anchors:[{title:"DllPlugin",id:"dllplugin"},{title:"DllReferencePlugin",id:"dllreferenceplugin"},{title:"Modes",id:"modes"},{title:"Scoped Mode",id:"scoped-mode"},{title:"Mapped Mode",id:"mapped-mode"},{title:"Usage",id:"usage"},{title:"Examples",id:"examples"},{title:"References",id:"references"},{title:"Source",id:"source"},{title:"Tests",id:"tests"}]},body:'<p>The <code>DllPlugin</code> and <code>DllReferencePlugin</code> provide means to split bundles in a way that can drastically improve build time performance.</p>\n<h2 class="header"><a class="anchor" href="#dllplugin" id="dllplugin"></a><span class="text"><code>DllPlugin</code></span><a class="icon-link" href="#dllplugin"></a></h2>\n<p>This plugin is used in a separate webpack config exclusively to create a dll-only-bundle. It creates a <code>manifest.json</code> file, which is used by the <a href="/plugins/dll-plugin#dllreferenceplugin"><code>DllReferencePlugin</code></a> to map dependencies.</p>\n<ul>\n<li><code>context</code> (optional): context of requests in the manifest file (defaults to the webpack context.)</li>\n<li><code>name</code>: name of the exposed dll function (<a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js">TemplatePaths</a>: <code>[hash]</code> &amp; <code>[name]</code> )</li>\n<li><code>path</code>: <strong>absolute path</strong> to the manifest json file (output)</li>\n</ul>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<p>Creates a <code>manifest.json</code> which is written to the given <code>path</code>. It contains mappings from require and import requests, to module ids. It is used by the <code>DllReferencePlugin</code>.</p>\n<p>Combine this plugin with <a href="/configuration/output/#output-library"><code>output.library</code></a> option to expose (aka, put into the global scope) the dll function.</p>\n<h2 class="header"><a class="anchor" href="#dllreferenceplugin" id="dllreferenceplugin"></a><span class="text"><code>DllReferencePlugin</code></span><a class="icon-link" href="#dllreferenceplugin"></a></h2>\n<p>This plugin is used in the primary webpack config, it references the dll-only-bundle(s) to require pre-built dependencies.</p>\n<ul>\n<li><code>context</code>: (<strong>absolute path</strong>) context of requests in the manifest (or content property)</li>\n<li><code>manifest</code> : an object containing <code>content</code> and <code>name</code> or a string to the absolute path of the JSON manifest to be loaded upon compilation</li>\n<li><code>content</code> (optional): the mappings from request to module id (defaults to <code>manifest.content</code>)</li>\n<li><code>name</code> (optional): the name where the dll is exposed (defaults to <code>manifest.name</code>) (see also <a href="/configuration/externals/"><code>externals</code></a>)</li>\n<li><code>scope</code> (optional): prefix which is used for accessing the content of the dll</li>\n<li><code>sourceType</code> (optional): how the dll is exposed (<a href="/configuration/output/#output-librarytarget">libraryTarget</a>)</li>\n</ul>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<p>References a dll manifest file to map dependency names to module ids, then requires them as needed using the internal <code>__webpack_require__</code> function.</p>\n<blockquote class="warning"><div class="tip-content"> Keep the <code>name</code> consistent with <a href="/configuration/output/#output-library"><code>output.library</code></a>. </div></blockquote><h3 class="header"><a class="anchor" href="#modes" id="modes"></a><span class="text">Modes</span><a class="icon-link" href="#modes"></a></h3>\n<p>This plugin can be used in two different modes, <em>scoped</em> and <em>mapped</em>.</p>\n<h4 class="header"><a class="anchor" href="#scoped-mode" id="scoped-mode"></a><span class="text">Scoped Mode</span><a class="icon-link" href="#scoped-mode"></a></h4>\n<p>The content of the dll is accessible under a module prefix. i.e. with <code>scope = &quot;xyz&quot;</code> a file <code>abc</code> in the dll can be access via <code>require(&quot;xyz/abc&quot;)</code>.</p>\n<blockquote class="tip"><div class="tip-content"> <a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">See an example use of scope</a> </div></blockquote><h4 class="header"><a class="anchor" href="#mapped-mode" id="mapped-mode"></a><span class="text">Mapped Mode</span><a class="icon-link" href="#mapped-mode"></a></h4>\n<p>The content of the dll is mapped to the current directory. If a required file matches a file in the dll (after resolving), then the file from the dll is used instead.</p>\n<p>Because this happens after resolving every file in the dll bundle, the same paths must be available for the consumer of the dll bundle. i.e. if the dll contains <code>lodash</code> and the file <code>abc</code>, <code>require(&quot;lodash&quot;)</code> and <code>require(&quot;./abc&quot;)</code> will be used from the dll, rather than building them into the main bundle.</p>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<blockquote class="warning"><div class="tip-content"> <code>DllReferencePlugin</code> and <code>DllPlugin</code> are used in <em>separate</em> webpack configs. </div></blockquote><p><strong>webpack.vendor.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">"[name]_[hash]"</span><span class="token punctuation">,</span>\n  path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>webpack.app.config.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  manifest<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">"./my-dll.js"</span><span class="token punctuation">,</span>\n  scope<span class="token punctuation">:</span> <span class="token string">"xyz"</span><span class="token punctuation">,</span>\n  sourceType<span class="token punctuation">:</span> <span class="token string">"commonjs2"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/dll">Vendor</a> and <a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">User</a></p>\n<p><em>Two separate example folders. Demonstrates scope and context.</em></p>\n<blockquote class="tip"><div class="tip-content"> Multiple <code>DllPlugins</code> and multiple <code>DllReferencePlugins</code>. </div></blockquote><h2 class="header"><a class="anchor" href="#references" id="references"></a><span class="text">References</span><a class="icon-link" href="#references"></a></h2>\n<h3 class="header"><a class="anchor" href="#source" id="source"></a><span class="text">Source</span><a class="icon-link" href="#source"></a></h3>\n<ul>\n<li><a href="https://github.com/webpack/webpack/tree/master/lib/DllPlugin.js">DllPlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/lib/DllReferencePlugin.js">DllReferencePlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllEntryPlugin.js">DllEntryPlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllModuleFactory.js">DllModuleFactory source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/LibManifestPlugin.js">ManifestPlugin source</a></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#tests" id="tests"></a><span class="text">Tests</span><a class="icon-link" href="#tests"></a></h3>\n<ul>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin/0-create-dll/webpack.config.js">DllPlugin creation test</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin/2-use-dll-without-scope/webpack.config.js">DllPlugin without scope test</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin">DllReferencePlugin use Dll test</a></li>\n</ul>\n',title:"DllPlugin"},title:"DllPlugin",url:"/plugins/dll-plugin/"},{file:{attributes:{title:"EnvironmentPlugin",contributors:["einarlove","rouzbeh84","simon04"],group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Usage with default values",id:"usage-with-default-values"},{title:"DotenvPlugin",id:"dotenvplugin"}],related:[]},body:'<p>The <code>EnvironmentPlugin</code> is shorthand for using the <a href="/plugins/define-plugin"><code>DefinePlugin</code></a> on <a href="https://nodejs.org/api/process.html#process_process_env"><code>process.env</code></a> keys.</p>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>The <code>EnvironmentPlugin</code> accepts either an array of keys or an object mapping its keys to their default values.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'NODE_ENV\'</span><span class="token punctuation">,</span> <span class="token string">\'DEBUG\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>This is equivalent to the following <code>DefinePlugin</code> application:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'process.env.NODE_ENV\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'process.env.DEBUG\'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> Not specifying the environment variable raises an &quot;<code>EnvironmentPlugin</code> - <code>${key}</code> environment variable is undefined&quot; error. </div></blockquote><h2 class="header"><a class="anchor" href="#usage-with-default-values" id="usage-with-default-values"></a><span class="text">Usage with default values</span><a class="icon-link" href="#usage-with-default-values"></a></h2>\n<p>Alternatively, the <code>EnvironmentPlugin</code> supports an object, which maps keys to their default values. The default value for a key is taken if the key is undefined in <code>process.env</code>.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  NODE_ENV<span class="token punctuation">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span> <span class="token comment">// use \'development\' unless process.env.NODE_ENV is defined</span>\n  DEBUG<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> Variables coming from <code>process.env</code> are always strings. </div></blockquote><blockquote class="tip"><div class="tip-content"> Unlike <a href="/plugins/define-plugin"><code>DefinePlugin</code></a>, default values are applied to <code>JSON.stringify</code> by the <code>EnvironmentPlugin</code>. </div></blockquote><blockquote class="tip"><div class="tip-content"> To specify an unset default value, use <code>null</code> instead of <code>undefined</code>. </div></blockquote><p><strong>Example:</strong></p>\n<p>Let&#39;s investigate the result when running the previous <code>EnvironmentPlugin</code> configuration on a test file <code>entry.js</code>:</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>When executing <code>NODE_ENV=production webpack</code> in the terminal to build, <code>entry.js</code> becomes this:</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'production\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- \'production\' from NODE_ENV is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- default value is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Running <code>DEBUG=false webpack</code> yields:</p>\n<pre><code class="lang-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'development\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- default value is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'false\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;-- \'false\' from DEBUG is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#dotenvplugin" id="dotenvplugin"></a><span class="text"><code>DotenvPlugin</code></span><a class="icon-link" href="#dotenvplugin"></a></h2>\n<p>The third-party <a href="https://github.com/mrsteele/dotenv-webpack"><code>DotenvPlugin</code></a> (<code>dotenv-webpack</code>) allows you to expose (a subset of) <a href="https://www.npmjs.com/package/dotenv">dotenv variables</a>:</p>\n<pre><code class="lang-bash">// .env\nDB_HOST<span class="token operator">=</span>127.0.0.1\nDB_PASS<span class="token operator">=</span>foobar\nS3_API<span class="token operator">=</span>mysecretkey\n</code></pre>\n<pre><code class="lang-javascript"> <span class="token keyword">new</span> <span class="token class-name">Dotenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">\'./.env\'</span><span class="token punctuation">,</span> <span class="token comment">// Path to .env file (this is the default)</span>\n  safe<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment">// load .env.example (defaults to "false" which does not use dotenv-safe)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"EnvironmentPlugin"},title:"EnvironmentPlugin",url:"/plugins/environment-plugin/"},{file:{attributes:{title:"ExtractTextWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/extract-text-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/extract-text-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/extract-text-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"#extract",id:"-extract"},{title:"Multiple Instances",id:"multiple-instances"},{title:"Extracting Sass or LESS",id:"extracting-sass-or-less"},{title:"url() Resolving",id:"url-resolving"},{title:"Modify filename",id:"modify-filename"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Extract text from a bundle, or bundles, into a separate file.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">\nnpm <span class="token function">install</span> --save-dev extract-text-webpack-plugin\n<span class="token comment"># for webpack 2</span>\nnpm <span class="token function">install</span> --save-dev extract-text-webpack-plugin@2.1.2\n<span class="token comment"># for webpack 1</span>\nnpm <span class="token function">install</span> --save-dev extract-text-webpack-plugin@1.0.1\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<blockquote>\n<p>:warning: For webpack v1, see <a href="https://github.com/webpack/extract-text-webpack-plugin/blob/webpack-1/README.md">the README in the webpack-1 branch</a>.</p>\n</blockquote>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">"styles.css"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>It moves all the required <code>*.css</code> modules in entry chunks into a separate CSS file. So your styles are no longer inlined into the JS bundle, but in a separate CSS file (<code>styles.css</code>). If your total stylesheet volume is big, it will be faster because the CSS bundle is loaded in parallel to the JS bundle.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Advantages</div><div class="table-th">Caveats</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Advantages\n    </div>\n    <div class="table-td-content">\n        Fewer style tags (older IE has a limit)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Caveats\n    </div>\n    <div class="table-td-content">\n        Additional HTTP request\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Advantages\n    </div>\n    <div class="table-td-content">\n        CSS SourceMap (with <code>devtool: &quot;source-map&quot;</code> and <code>extract-text-webpack-plugin?sourceMap</code>)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Caveats\n    </div>\n    <div class="table-td-content">\n        Longer compilation time\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Advantages\n    </div>\n    <div class="table-td-content">\n        CSS requested in parallel\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Caveats\n    </div>\n    <div class="table-td-content">\n        No runtime public path modification\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Advantages\n    </div>\n    <div class="table-td-content">\n        CSS cached separate\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Caveats\n    </div>\n    <div class="table-td-content">\n        No Hot Module Replacement\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Advantages\n    </div>\n    <div class="table-td-content">\n        Faster runtime (less code and DOM operations)\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Caveats\n    </div>\n    <div class="table-td-content">\n        ...\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> filename <span class="token operator">|</span> object<span class="token punctuation">)</span>\n</code></pre>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>id</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Unique ident for this plugin instance. (For advanced usage only, by default automatically generated)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>filename</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Name of the result file. May contain <code>[name]</code>, <code>[id]</code> and <code>[contenthash]</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>allChunks</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Extract from all additional chunks too (by default it extracts only from the initial chunk(s))<br />When using <code>CommonsChunkPlugin</code> and there are extracted chunks (from <code>ExtractTextPlugin.extract</code>) in the commons chunk, <code>allChunks</code> <strong>must</strong> be set to <code>true</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>disable</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Disables the plugin\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ignoreOrder</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Disables order check (useful for CSS Modules!), <code>false</code> by default\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><ul>\n<li><code>[name]</code> name of the chunk</li>\n<li><code>[id]</code> number of the chunk</li>\n<li><code>[contenthash]</code> hash of the content of the extracted file</li>\n<li><code>[&lt;hashType&gt;:contenthash:&lt;digestType&gt;:&lt;length&gt;]</code> optionally you can configure<ul>\n<li>other <code>hashType</code>s, e.g. <code>sha1</code>, <code>md5</code>, <code>sha256</code>, <code>sha512</code></li>\n<li>other <code>digestType</code>s, e.g. <code>hex</code>, <code>base26</code>, <code>base32</code>, <code>base36</code>, <code>base49</code>, <code>base52</code>, <code>base58</code>, <code>base62</code>, <code>base64</code></li>\n<li>and <code>length</code>, the length of the hash in chars</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>:warning: <code>ExtractTextPlugin</code> generates a file <strong>per entry</strong>, so you must use <code>[name]</code>, <code>[id]</code> or <code>[contenthash]</code> when using multiple entries.</p>\n</blockquote>\n<h4 class="header"><a class="anchor" href="#-extract" id="-extract"></a><span class="text"><code>#extract</code></span><a class="icon-link" href="#-extract"></a></h4>\n<pre><code class="lang-js">ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> loader <span class="token operator">|</span> object<span class="token punctuation">)</span>\n</code></pre>\n<p>Creates an extracting loader from an existing loader. Supports loaders of type <code>{ loader: [name]-loader -&gt; {String}, options: {} -&gt; {Object} }</code>.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>options.use</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>/<code>{Array}</code>/<code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Loader(s) that should be used for converting the resource to a CSS exporting module <em>(required)</em>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>options.fallback</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>/<code>{Array}</code>/<code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        loader(e.g <code>&#39;style-loader&#39;</code>) that should be used when the CSS is not extracted (i.e. in an additional chunk when <code>allChunks: false</code>)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>options.publicPath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Override the <code>publicPath</code> setting for this loader\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#multiple-instances" id="multiple-instances"></a><span class="text">Multiple Instances</span><a class="icon-link" href="#multiple-instances"></a></h4>\n<p>There is also an <code>extract</code> function on the instance. You should use this if you have more than one instance of  <code>ExtractTextPlugin</code>.</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create multiple instances</span>\n<span class="token keyword">const</span> extractCSS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'stylesheets/[name]-one.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> extractLESS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'stylesheets/[name]-two.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> extractCSS<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'postcss-loader\'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/i</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> extractLESS<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'less-loader\'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    extractCSS<span class="token punctuation">,</span>\n    extractLESS\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extracting-sass-or-less" id="extracting-sass-or-less"></a><span class="text">Extracting Sass or LESS</span><a class="icon-link" href="#extracting-sass-or-less"></a></h3>\n<p>The configuration is the same, switch out <code>sass-loader</code> for <code>less-loader</code> when necessary.</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'style.css\'</span><span class="token punctuation">)</span>\n    <span class="token comment">//if you want to pass in options, you can do so:</span>\n    <span class="token comment">//new ExtractTextPlugin({</span>\n    <span class="token comment">//  filename: \'style.css\'</span>\n    <span class="token comment">//})</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#url-resolving" id="url-resolving"></a><span class="text"><code>url()</code> Resolving</span><a class="icon-link" href="#url-resolving"></a></h3>\n<p>If you are finding that urls are not resolving properly when you run webpack. You can expand your loader functionality with options. The <code>url: false</code> property allows your paths resolved without any changes.</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// If you are having trouble with urls not resolving add this setting.</span>\n                    <span class="token comment">// See https://github.com/webpack-contrib/css-loader#url</span>\n                    url<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                    minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> \n            <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#modify-filename" id="modify-filename"></a><span class="text">Modify filename</span><a class="icon-link" href="#modify-filename"></a></h3>\n<p><code>filename</code> parameter could be <code>Function</code>. It passes <code>getPath</code> to process the format like <code>css/[name].css</code> and returns the real file name, <code>css/js/a.css</code>. You can replace <code>css/js</code> with <code>css</code> then you will get the new path <code>css/a.css</code>.</p>\n<pre><code class="lang-js">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">\'js/a\'</span><span class="token punctuation">:</span> <span class="token string">"./a"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span>  <span class="token punctuation">(</span>getPath<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">\'css/[name].css\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'css/js\'</span><span class="token punctuation">,</span> <span class="token string">\'css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    allChunks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"ExtractTextWebpackPlugin"},title:"ExtractTextWebpackPlugin",url:"/plugins/extract-text-webpack-plugin/"},{file:{attributes:{title:"HashedModuleIdsPlugin",contributors:["shaodahong"],group:"-",anchors:[{title:"Options",id:"options"},{title:"Usage",id:"usage"}],related:[]},body:'<p>This plugin will cause hashes to be based on the relative path of the module, generating a four character string as the module id. Suggested for use in production.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Options...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>This plugin supports the following options:</p>\n<ul>\n<li><code>hashFunction</code>: The hashing algorithm to use, defaults to <code>&#39;md5&#39;</code>. All functions from Node.JS&#39; <a href="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options"><code>crypto.createHash</code></a> are supported.</li>\n<li><code>hashDigest</code>: The encoding to use when generating the hash, defaults to <code>&#39;base64&#39;</code>. All encodings from Node.JS&#39; <a href="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding"><code>hash.digest</code></a> are supported.</li>\n<li><code>hashDigestLength</code>: The prefix length of the hash digest to use, defaults to <code>4</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Here&#39;s an example of how this plugin might be used:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hashFunction<span class="token punctuation">:</span> <span class="token string">\'sha256\'</span><span class="token punctuation">,</span>\n  hashDigest<span class="token punctuation">:</span> <span class="token string">\'hex\'</span><span class="token punctuation">,</span>\n  hashDigestLength<span class="token punctuation">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"HashedModuleIdsPlugin"},title:"HashedModuleIdsPlugin",url:"/plugins/hashed-module-ids-plugin/"},{file:{attributes:{title:"HotModuleReplacementPlugin",contributors:["skipjack"],related:[{title:"Concepts - Hot Module Replacement",url:"/concepts/hot-module-replacement"},{title:"API - Hot Module Replacement",url:"/api/hot-module-replacement"}],group:"-",anchors:[{title:"Basic Usage",id:"basic-usage"},{title:"Options",id:"options"}]},body:'<p>Enables <a href="/concepts/hot-module-replacement">Hot Module Replacement</a>, otherwise known as HMR.</p>\n<blockquote class="warning"><div class="tip-content"> HMR should <strong>never</strong> be used in production. </div></blockquote><h2 class="header"><a class="anchor" href="#basic-usage" id="basic-usage"></a><span class="text">Basic Usage</span><a class="icon-link" href="#basic-usage"></a></h2>\n<p>Enabling HMR is easy and in most cases no options are necessary.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Options...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>The following options are accepted:</p>\n<ul>\n<li><code>multiStep</code> (boolean): If <code>true</code>, the plugin will build in two steps -- first compiling the hot update chunks, and then the remaining normal assets.</li>\n<li><code>fullBuildTimeout</code> (number): The delay between the two steps when <code>multiStep</code> is enabled.</li>\n<li><code>requestTimeout</code> (number): The timeout used for manifest download (since webpack 3.0.0)</li>\n</ul>\n<blockquote class="warning"><div class="tip-content"> These options are experimental and may be deprecated. As mentioned above, they are typically not necessary and including a <code>new webpack.HotModuleReplacementPlugin()</code> is enough. </div></blockquote>',title:"HotModuleReplacementPlugin"},title:"HotModuleReplacementPlugin",url:"/plugins/hot-module-replacement-plugin/"},{file:{attributes:{title:"BabelMinifyWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/babel-minify-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/babel-minify-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/babel-minify-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"pluginOpts",id:"pluginopts"},{title:"Why",id:"why"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>A Webpack Plugin for <a href="https://github.com/babel/minify">babel-minify</a> - A babel based minifier</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> babel-minify-webpack-plugin --save-dev\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> MinifyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-minify-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token comment">//...,</span>\n  output<span class="token punctuation">:</span> <span class="token comment">//...,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MinifyPlugin</span><span class="token punctuation">(</span>minifyOpts<span class="token punctuation">,</span> pluginOpts<span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>###</p>\n<p><code>minifyOpts</code> are passed on to babel-preset-minify. You can find a list of <a href="https://github.com/babel/minify/tree/master/packages/babel-preset-minify#options">all available options</a> in the package directory.</p>\n<p><code>Default: {}</code></p>\n<h4 class="header"><a class="anchor" href="#pluginopts" id="pluginopts"></a><span class="text">pluginOpts</span><a class="icon-link" href="#pluginopts"></a></h4>\n<ul>\n<li><code>test</code>: JS file extension regex. Default: <code>/\\.js($|\\?)/i</code></li>\n<li><code>comments</code>: Preserve Comments. Default: <code>/^\\**!|@preserve|@license|@cc_on/</code>, falsy value to remove all comments. Accepts function, object with property test (regex), and values.</li>\n<li><code>sourceMap</code>: Default: uses <a href="https://webpack.js.org/configuration/devtool/">webpackConfig.devtool</a>. Set this to override that.</li>\n<li><code>parserOpts</code>: Configure babel with special parser options.</li>\n<li><code>babel</code>: Pass in a custom babel-core instead. <code>require(&quot;babel-core&quot;)</code></li>\n<li><code>minifyPreset</code>: Pass in a custom minify preset instead - <code>require(&quot;babel-preset-minify&quot;)</code>.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#why" id="why"></a><span class="text">Why</span><a class="icon-link" href="#why"></a></h2>\n<p>You can also use <a href="https://github.com/babel/babel-loader">babel-loader</a> for webpack and include <code>minify</code> <a href="https://github.com/babel/minify#babel-preset">as a preset</a> and should be much faster than using this - as babel-minify will operate on smaller file sizes. But then, why does this plugin exist at all? -</p>\n<ul>\n<li>A webpack loader operates on single files and the minify preset as a webpack loader is going to consider each file to be executed directly in the browser global scope (by default) and will not optimize some things in the toplevel scope. To enable optimizations to take place in the top level scope of the file, use <code>mangle: { topLevel: true }</code> in minifyOptions.</li>\n<li>When you exclude <code>node_modules</code> from being run through the babel-loader, babel-minify optimizations are not applied to the excluded files as it doesn&#39;t pass through the minifier.</li>\n<li>When you use the babel-loader with webpack, the code generated by webpack for the module system doesn&#39;t go through the loader and is not optimized by babel-minify.</li>\n<li>A webpack plugin can operate on the entire chunk/bundle output and can optimize the whole bundle and you can see some differences in minified output. But this will be a lot slower as the file size is usually really huge. So there is <a href="https://github.com/webpack-contrib/babel-minify-webpack-plugin/issues/8">another idea</a> where we can apply some optimizations as a part of the loader and some optimizations in a plugin.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/294474?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/boopathi"></p>\n<p>Boopathi Rajaa</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"BabelMinifyWebpackPlugin"},title:"BabelMinifyWebpackPlugin",url:"/plugins/babel-minify-webpack-plugin/"},{file:{attributes:{title:"I18nWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/i18n-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/i18n-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/i18n-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>i18n (localization) plugin for Webpack.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D i18n-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>This plugin creates bundles with translations baked in. So you can serve the translated bundle to your clients.</p>\n<p>see <a href="https://github.com/webpack/webpack/tree/master/examples/i18n">webpack/webpack/examples/i18n</a>.</p>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<pre><code>plugins: <span class="token punctuation">[</span>\n  <span class="token punctuation">..</span>.\n  new I18nPlugin<span class="token punctuation">(</span>languageConfig, optionsObj<span class="token punctuation">)</span>\n<span class="token punctuation">]</span>,\n</code></pre><ul>\n<li><code>optionsObj.functionName</code>: the default value is <code>__</code>, you can change it to other function name.</li>\n<li><code>optionsObj.failOnMissing</code>: the default value is <code>false</code>, which will show a warning message, if the mapping text cannot be found. If set to <code>true</code>, the message will be an error message.</li>\n<li><code>optionsObj.hideMessage</code>: the default value is <code>false</code>, which will show the warning/error message. If set to <code>true</code>, the message will be hidden.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"I18nWebpackPlugin"},title:"I18nWebpackPlugin",url:"/plugins/i18n-webpack-plugin/"},{file:{attributes:{title:"IgnorePlugin",contributors:["simon04"],group:"-",anchors:[{title:"Ignore Moment Locales",id:"ignore-moment-locales"}],related:[]},body:'<p>Prevent generation of modules for <code>import</code> or <code>require</code> calls matching the following regular expressions:</p>\n<ul>\n<li><code>requestRegExp</code> A RegExp to test the request against.</li>\n<li><code>contextRegExp</code> (optional) A RegExp to test the context (directory) against.</li>\n</ul>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span>requestRegExp<span class="token punctuation">,</span> <span class="token punctuation">[</span>contextRegExp<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre>\n<p>The following examples demonstrate a few ways this plugin can be used.</p>\n<h2 class="header"><a class="anchor" href="#ignore-moment-locales" id="ignore-moment-locales"></a><span class="text">Ignore Moment Locales</span><a class="icon-link" href="#ignore-moment-locales"></a></h2>\n<p>As of <a href="https://momentjs.com/">moment</a> 2.18, all locales are bundled together with the core library (see <a href="https://github.com/moment/moment/issues/2373">this GitHub issue</a>). You can use the <code>IgnorePlugin</code> to stop any locale being bundled with moment:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/^\\.\\/locale$/</span><span class="token punctuation">,</span> <span class="token regex">/moment$/</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"IgnorePlugin"},title:"IgnorePlugin",url:"/plugins/ignore-plugin/"},{file:{attributes:{title:"LimitChunkCountPlugin",contributors:["rouzbeh84","skipjack","tbroadley"],group:"-",anchors:[{title:"Options",id:"options"},{title:"CLI",id:"cli"}],related:[]},body:'<p>While writing your code, you may have already added many code split points to load stuff on demand. After compiling you might notice that some chunks are too small - creating larger HTTP overhead. Luckily, this plugin can post-process your chunks by merging them.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>LimitChunkCountPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Options...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>The following options are supported:</p>\n<ul>\n<li><code>maxChunks</code>: Limit the maximum number of chunks using a value greater than or equal to <code>1</code>. Using <code>1</code> will prevent any additional chunks from being added as the entry/main chunk is also included in the count.</li>\n<li><code>minChunkSize</code>: Set a minimum chunk size.</li>\n</ul>\n<p>While merging chunks, webpack will try to identify those that have duplicate modules and merge them first. Nothing will be merged into the entry chunk, so as not to impact initial page loading time. Here&#39;s a small example:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>LimitChunkCountPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  maxChunks<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// Must be greater than or equal to one</span>\n  minChunkSize<span class="token punctuation">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#cli" id="cli"></a><span class="text">CLI</span><a class="icon-link" href="#cli"></a></h2>\n<p>This plugin and it&#39;s options can also be invoked via the CLI:</p>\n<pre><code class="lang-bash">--optimize-max-chunks 15\n</code></pre>\n<p>or</p>\n<pre><code class="lang-bash">--optimize-min-chunk-size 10000\n</code></pre>\n',title:"LimitChunkCountPlugin"},title:"LimitChunkCountPlugin",url:"/plugins/limit-chunk-count-plugin/"},{file:{attributes:{title:"LoaderOptionsPlugin",contributors:["johnnyreilly","skipjack"],group:"-",anchors:[{title:"Options",id:"options"},{title:"Usage",id:"usage"}],related:[]},body:'<p>The <code>LoaderOptionsPlugin</code> is unlike other plugins in that it is built for migration from webpack 1 to 2. In webpack 2, the schema for a <code>webpack.config.js</code> became stricter; no longer open for extension by other loaders and plugins. The intention is that you pass <code>options</code> directly to loaders and plugins (i.e. <code>options</code> are <strong>not</strong> global or shared).</p>\n<p>However, until a loader has been updated to depend upon options being passed directly to them, the <code>LoaderOptionsPlugin</code> exists to bridge the gap. You can configure global loader options with this plugin and all loaders will receive these options.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderOptionsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Options...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="warning"><div class="tip-content"> This plugin will be removed in the future as it only exists for migration. </div></blockquote><h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>This plugin supports the following options:</p>\n<ul>\n<li><code>options.debug</code> (<code>boolean</code>): Whether loaders should be in <code>debug</code> mode or not. <code>debug</code> will be removed as of webpack 3.</li>\n<li><code>options.minimize</code> (<code>boolean</code>): Where loaders can be switched to minimize mode.</li>\n<li><code>options.options</code> (<code>object</code>): A configuration object that can be used to configure older loaders - this will take the same schema a <code>webpack.config.js</code>.</li>\n<li><code>options.options.context</code> (<code>string</code>): The context that can be used to configure older loaders.</li>\n<li>any other options allowed in a <code>webpack.config.js</code>....</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Here&#39;s an example of how this plugin might be used:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderOptionsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  debug<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> __dirname\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"LoaderOptionsPlugin"},title:"LoaderOptionsPlugin",url:"/plugins/loader-options-plugin/"},{file:{attributes:{title:"MinChunkSizePlugin",contributors:[],sort:1,group:"-",anchors:[],related:[]},body:'<p>Keep chunk size above the specified limit by merging chunks that are smaller than the <code>minChunkSize</code>.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>MinChunkSizePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  minChunkSize<span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">// Minimum number of characters</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"MinChunkSizePlugin"},title:"MinChunkSizePlugin",url:"/plugins/min-chunk-size-plugin/"},{file:{attributes:{title:"ModuleConcatenationPlugin",contributors:["TheLarkInn","skipjack"],related:[{"webpack 3":"Official Release!!"}],group:"-",anchors:[{title:"Optimization Bailouts",id:"optimization-bailouts"},{title:"Module Grouping Algorithm",id:"module-grouping-algorithm"},{title:"Debugging Optimization Bailouts",id:"debugging-optimization-bailouts"}]},body:'<p>In the past, one of webpack’s trade-offs when bundling was that each module in your bundle would be wrapped in individual function closures. These wrapper functions made it slower for your JavaScript to execute in the browser. In comparison, tools like Closure Compiler and RollupJS ‘hoist’ or concatenate the scope of all your modules into one closure and allow for your code to have a faster execution time in the browser.</p>\n<p>This plugin will enable the same concatenation behavior in webpack.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote>\n<p>This concatenation behavior is called “scope hoisting.”</p>\n<p>Scope hoisting is specifically a feature made possible by ECMAScript Module syntax. Because of this webpack may fallback to normal bundling based on what kind of modules you are using, and <a href="https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5">other conditions</a>.</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#optimization-bailouts" id="optimization-bailouts"></a><span class="text">Optimization Bailouts</span><a class="icon-link" href="#optimization-bailouts"></a></h2>\n<p>As the article explains, webpack attempts to achieve partial scope hoisting. It will merge modules into a single scope but cannot do so in every case. If webpack cannot merge a module, the two alternatives are Prevent and Root. Prevent means the module must be in its own scope. Root means a new module group will be created. The following conditions determine the outcome:</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Condition</div><div class="table-th">Outcome</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Non ES6 Module\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported By Non Import\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root   \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported From Other Chunk\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root   \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported By Multiple Other Module Groups\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root   \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Imported With <code>import()</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root   \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Affected By <code>ProvidePlugin</code> Or Using <code>module</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        HMR Accepted\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Root   \n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        Using <code>eval()</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        In Multiple Chunks\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Condition\n    </div>\n    <div class="table-td-content">\n        <code>export * from &quot;cjs-module&quot;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Outcome\n    </div>\n    <div class="table-td-content">\n        Prevent\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#module-grouping-algorithm" id="module-grouping-algorithm"></a><span class="text">Module Grouping Algorithm</span><a class="icon-link" href="#module-grouping-algorithm"></a></h3>\n<p>The following pseudo JavaScript explains the algorithm:</p>\n<pre><code class="lang-js">modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>module <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token punctuation">:</span> module\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  module<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>dependency <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">tryToAdd</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    orderedModules <span class="token operator">=</span> <span class="token function">topologicalSort</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>modules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    concatenatedModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatenatedModule</span><span class="token punctuation">(</span>orderedModules<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chunk<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>concatenatedModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    orderedModules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>groupModule <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      chunk<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>groupModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">tryToAdd</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPreconditions</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> nextGroup <span class="token operator">=</span> group<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> module<span class="token punctuation">.</span>dependents<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>check<span class="token punctuation">,</span> dependent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> check <span class="token operator">&amp;&amp;</span> <span class="token function">tryToAdd</span><span class="token punctuation">(</span>nextGroup<span class="token punctuation">,</span> dependent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  module<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>dependency <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">tryToAdd</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  group<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>nextGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#debugging-optimization-bailouts" id="debugging-optimization-bailouts"></a><span class="text">Debugging Optimization Bailouts</span><a class="icon-link" href="#debugging-optimization-bailouts"></a></h3>\n<p>When using the webpack CLI, the <code>--display-optimization-bailout</code> flag will display bailout reasons. When using the webpack config, just add the following to the <code>stats</code> object:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>stats<span class="token punctuation">,</span>\n  <span class="token comment">// Examine all modules</span>\n  maxModules<span class="token punctuation">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n  <span class="token comment">// Display bailout reasons</span>\n  optimizationBailout<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',title:"ModuleConcatenationPlugin"},title:"ModuleConcatenationPlugin",url:"/plugins/module-concatenation-plugin/"},{file:{attributes:{title:"NamedModulesPlugin",contributors:["shaodahong"],group:"-",anchors:[],related:[]},body:'<p>This plugin will cause the relative path of the module to be displayed when <a href="/guides/hot-module-replacement">HMR</a> is enabled. Suggested for use in development.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"NamedModulesPlugin"},title:"NamedModulesPlugin",url:"/plugins/named-modules-plugin/"},{file:{attributes:{title:"NoEmitOnErrorsPlugin",contributors:["simon04"],group:"-",anchors:[],related:[]},body:'<p>Use the <code>NoEmitOnErrorsPlugin</code> to skip the emitting phase whenever there are errors while compiling. This ensures that no assets are emitted that include errors. The <code>emitted</code> flag in the stats is <code>false</code> for all assets.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> This supersedes the (now deprecated) webpack 1 plugin <code>NoErrorsPlugin</code>. </div></blockquote><blockquote class="warning"><div class="tip-content"> If you are using the <a href="/api/cli/">CLI</a>, the webpack process will not exit with an error code by enabling this plugin. If you want webpack to &quot;fail&quot; when using the CLI, please check out the <a href="/api/cli/#advanced-options"><code>bail</code> option</a>. </div></blockquote>',title:"NoEmitOnErrorsPlugin"},title:"NoEmitOnErrorsPlugin",url:"/plugins/no-emit-on-errors-plugin/"},{file:{attributes:{title:"NormalModuleReplacementPlugin",contributors:["gonzoyumo"],group:"-",anchors:[{title:"Basic Example",id:"basic-example"},{title:"Advanced Example",id:"advanced-example"}],related:[]},body:'<p>The <code>NormalModuleReplacementPlugin</code> allows you to replace resources that match <code>resourceRegExp</code> with <code>newResource</code>. If <code>newResource</code> is relative, it is resolved relative to the previous resource. If <code>newResource</code> is a function, it is expected to overwrite the request attribute of the supplied resource.</p>\n<p>This can be useful for allowing different behaviour between builds.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NormalModuleReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token punctuation">,</span>\n  newResource\n<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#basic-example" id="basic-example"></a><span class="text">Basic Example</span><a class="icon-link" href="#basic-example"></a></h2>\n<p>Replace a specific module when building for a <a href="/guides/production">development environment</a>.</p>\n<p>Say you have a config file <code>some/path/config.development.module.js</code> and a special version for production in <code>some/path/config.production.module.js</code></p>\n<p>Just add the following plugin when building for production:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NormalModuleReplacementPlugin</span><span class="token punctuation">(</span>\n  <span class="token regex">/some\\/path\\/config\\.development\\.js/</span><span class="token punctuation">,</span>\n  <span class="token string">\'./config.production.js\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#advanced-example" id="advanced-example"></a><span class="text">Advanced Example</span><a class="icon-link" href="#advanced-example"></a></h2>\n<p>Conditional build depending on an <a href="/configuration/configuration-types">specified environment</a>.</p>\n<p>Say you want a configuration with specific values for different build targets.</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> appTarget <span class="token operator">=</span> env<span class="token punctuation">.</span>APP_TARGET <span class="token operator">||</span> <span class="token string">\'VERSION_A\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NormalModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex">/(.*)-APP_TARGET(\\.*)/</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        resource<span class="token punctuation">.</span>request <span class="token operator">=</span> resource<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-APP_TARGET/</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>appTarget<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Create the two config files:</p>\n<p><strong>app/config-VERSION_A.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  title <span class="token punctuation">:</span> <span class="token string">\'I am version A\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>app/config-VERSION_B.js</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  title <span class="token punctuation">:</span> <span class="token string">\'I am version B\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Then import that config using the keyword you&#39;re looking for in the regexp:</p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">\'app/config-APP_TARGET\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>And now you just get the right config imported depending on which target you&#39;re building for:</p>\n<pre><code class="lang-shell">webpack --env.APP_TARGET VERSION_A\n<span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'I am version A\'</span>\n\nwebpack --env.APP_TARGET VERSION_B\n<span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'I am version B\'</span>\n</code></pre>\n',title:"NormalModuleReplacementPlugin"},title:"NormalModuleReplacementPlugin",url:"/plugins/normal-module-replacement-plugin/"},{file:{attributes:{title:"NpmInstallWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/npm-install-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/npm-install-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/npm-install-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Demo",id:"demo"},{title:"Features",id:"features"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Speed up development by <b>automatically installing &amp; saving dependencies</b> with Webpack.</p>\n<p>It sucks to <kbd>Ctrl-C</kbd> your\nbuild script &amp; server just to install\na dependency you didn&#39;t know you needed until now.</p>\n<p>Instead, use <code>require</code> or <code>import</code> how you normally would and <code>npm install</code>\nwill happen <strong>automatically to install &amp; save missing dependencies</strong> while you work!</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">$ npm <span class="token function">install</span> --save-dev npm-install-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>In your <code>webpack.config.js</code>:</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">NpmInstallPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<p><strong>This is equivalent to</strong>:</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">NpmInstallPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// Use --save or --save-dev</span>\n    dev<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// Install missing peerDependencies</span>\n    peerDependencies<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// Reduce amount of console logging</span>\n    quiet<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// npm command used inside company, yarn is not supported yet</span>\n    npm<span class="token punctuation">:</span> <span class="token string">\'tnpm\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<p>You can provide a <code>Function</code> to the <code>dev</code> to make it dynamic:</p>\n<pre><code class="lang-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">NpmInstallPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    dev<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token string">"babel-preset-react-hmre"</span><span class="token punctuation">,</span>\n        <span class="token string">"webpack-dev-middleware"</span><span class="token punctuation">,</span>\n        <span class="token string">"webpack-hot-middleware"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#demo" id="demo"></a><span class="text">Demo</span><a class="icon-link" href="#demo"></a></h2>\n<p><img src="https://cloud.githubusercontent.com/assets/15182/12540538/6a4e8f1a-c2d0-11e5-97ee-4ddaf6892645.gif" alt="npm-install-webpack-plugin demo"></p>\n<h2 class="header"><a class="anchor" href="#features" id="features"></a><span class="text">Features</span><a class="icon-link" href="#features"></a></h2>\n<ul>\n<li>[x] Works with both Webpack <code>^v1.12.0</code> and <code>^2.1.0-beta.0</code>.</li>\n<li>[x] Auto-installs <code>.babelrc</code> plugins &amp; presets.</li>\n<li>[x] Supports both ES5 &amp; ES6 Modules.\n(e.g. <code>require</code>, <code>import</code>)</li>\n<li>[x] Supports Namespaced packages.\n(e.g. <code>@cycle/dom</code>)</li>\n<li>[x] Supports Dot-delimited packages.\n(e.g. <code>lodash.capitalize</code>)</li>\n<li>[x] Supports CSS imports.\n(e.g. <code>@import &quot;~bootstrap&quot;</code>)</li>\n<li>[x] Supports Webpack loaders.\n(e.g. <code>babel-loader</code>, <code>file-loader</code>, etc.)</li>\n<li>[x] Supports inline Webpack loaders.\n(e.g. <code>require(&quot;bundle?lazy!./App&quot;</code>)</li>\n<li>[x] Auto-installs missing <code>peerDependencies</code>.\n(e.g. <code>@cycle/core</code> will automatically install <code>rx@*</code>)</li>\n<li>[x] Supports Webpack&#39;s <code>resolve.alias</code> &amp; <code>resolve.root</code> configuration.\n(e.g. <code>require(&quot;react&quot;)</code> can alias to <code>react-lite</code>)</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/15182?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/ericclemmons"></p>\n<p>Eric Clemmons</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/226692?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/insin"></p>\n<p>Jonny Buchanan</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"NpmInstallWebpackPlugin"},title:"NpmInstallWebpackPlugin",url:"/plugins/npm-install-webpack-plugin/"},{file:{attributes:{title:"PrefetchPlugin",contributors:["skipjack"],group:"-",anchors:[{title:"Options",id:"options"}],related:[]},body:'<p>Prefetch normal module requests, causing them to be resolved and built before the first <code>import</code> or <code>require</code> of that module occurs. Using this plugin can boost performance. Try to profile the build first to determine clever prefetching points.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>PrefetchPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>context<span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<ul>\n<li><code>context</code>: An absolute path to a directory</li>\n<li><code>request</code>: A request string for a normal module</li>\n</ul>\n',title:"PrefetchPlugin"},title:"PrefetchPlugin",url:"/plugins/prefetch-plugin/"},{file:{attributes:{title:"ProvidePlugin",contributors:["re-fort","simon04","sokra"],group:"-",anchors:[{title:"Usage: jQuery",id:"usage-jquery"},{title:"Usage: jQuery with Angular 1",id:"usage-jquery-with-angular-1"},{title:"Usage: Lodash Map",id:"usage-lodash-map"},{title:"Usage: Vue.js",id:"usage-vue-js"}],related:[]},body:'<p>Automatically load modules instead of having to <code>import</code> or <code>require</code> them everywhere.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  identifier<span class="token punctuation">:</span> <span class="token string">\'module1\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>or</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  identifier<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'module1\'</span><span class="token punctuation">,</span> <span class="token string">\'property1\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Whenever the <code>identifier</code> is encountered as free variable in a module, the <code>module</code> is loaded automatically and the <code>identifier</code> is filled with the exports of the loaded <code>module</code> (of <code>property</code> in order to support named exports).</p>\n<blockquote class="warning"><div class="tip-content"> For importing the default export of an ES2015 module, you have to specify the default property of module. </div></blockquote><h2 class="header"><a class="anchor" href="#usage-jquery" id="usage-jquery"></a><span class="text">Usage: jQuery</span><a class="icon-link" href="#usage-jquery"></a></h2>\n<p>To automatically load <code>jquery</code> we can simply point both variables it exposes to the corresponding node module:</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  $<span class="token punctuation">:</span> <span class="token string">\'jquery\'</span><span class="token punctuation">,</span>\n  jQuery<span class="token punctuation">:</span> <span class="token string">\'jquery\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Then in any of our source code:</p>\n<pre><code class="lang-javascript"><span class="token comment">// in a module</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'#item\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;= just works</span>\n<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">\'#item\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;= just works</span>\n<span class="token comment">// $ is automatically set to the exports of module "jquery"</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage-jquery-with-angular-1" id="usage-jquery-with-angular-1"></a><span class="text">Usage: jQuery with Angular 1</span><a class="icon-link" href="#usage-jquery-with-angular-1"></a></h2>\n<p>Angular looks for <code>window.jQuery</code> in order to determine whether jQuery is present, see the <a href="https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823">source code</a>.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'window.jQuery\'</span><span class="token punctuation">:</span> <span class="token string">\'jquery\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage-lodash-map" id="usage-lodash-map"></a><span class="text">Usage: Lodash Map</span><a class="icon-link" href="#usage-lodash-map"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  _map<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'lodash\'</span><span class="token punctuation">,</span> <span class="token string">\'map\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#usage-vue-js" id="usage-vue-js"></a><span class="text">Usage: Vue.js</span><a class="icon-link" href="#usage-vue-js"></a></h3>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  Vue<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'vue/dist/vue.esm.js\'</span><span class="token punctuation">,</span> <span class="token string">\'default\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n',title:"ProvidePlugin"},title:"ProvidePlugin",url:"/plugins/provide-plugin/"},{file:{attributes:{title:"SourceMapDevToolPlugin",contributors:["johnnyreilly","simon04"],related:[{title:"Building Source Maps",url:"https://survivejs.com/webpack/building/source-maps/#-sourcemapdevtoolplugin-and-evalsourcemapdevtoolplugin-"}],group:"-",anchors:[{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Exclude Vendor Maps",id:"exclude-vendor-maps"},{title:"Host Source Maps Externally",id:"host-source-maps-externally"}]},body:'<p>This plugin enables more fine grained control of source map generation. It is an alternative to the <a href="/configuration/devtool/"><code>devtool</code></a> configuration option.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>The following options are supported:</p>\n<ul>\n<li><code>test</code> (<code>string|regex|array</code>): Include source maps for modules based on their extension (defaults to <code>.js</code> and <code>.css</code>).</li>\n<li><code>include</code> (<code>string|regex|array</code>): Include source maps for module paths that match the given value.</li>\n<li><code>exclude</code> (<code>string|regex|array</code>): Exclude modules that match the given value from source map generation.</li>\n<li><code>filename</code> (<code>string</code>): Defines the output filename of the SourceMap (will be inlined if no value is provided).</li>\n<li><code>append</code> (<code>string</code>): Appends the given value to the original asset. Usually the <code>#sourceMappingURL</code> comment. <code>[url]</code> is replaced with a URL to the source map file. <code>false</code> disables the appending.</li>\n<li><code>moduleFilenameTemplate</code> (<code>string</code>): See <a href="/configuration/output/#output-devtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>.</li>\n<li><code>fallbackModuleFilenameTemplate</code> (<code>string</code>): See link above.</li>\n<li><code>module</code> (<code>boolean</code>): Indicates whether loaders should generate source maps (defaults to <code>true</code>).</li>\n<li><code>columns</code> (<code>boolean</code>): Indicates whether column mappings should be used (defaults to <code>true</code>).</li>\n<li><code>lineToLine</code> (<code>object</code>): Simplify and speed up source mapping by using line to line source mappings for matched modules.</li>\n<li><code>publicPath</code> (<code>string</code>): Emits absolute URLs with public path prefix, e.g. <code>https://example.com/project/</code>.</li>\n<li><code>fileContext</code> (<code>string</code>): Makes the <code>[file]</code> argument relative to this directory.</li>\n</ul>\n<p>The <code>lineToLine</code> object allows for the same <code>test</code>, <code>include</code>, and <code>exclude</code> options described above.</p>\n<p>The <code>fileContext</code> option is useful when you want to store source maps in an upper level directory to avoid <code>../../</code> appearing in the absolute <code>[url]</code>.</p>\n<blockquote class="tip"><div class="tip-content"> Setting <code>module</code> and/or <code>columns</code> to <code>false</code> will yield less accurate source maps but will also improve compilation performance significantly. </div></blockquote><h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>The following examples demonstrate some common use cases for this plugin.</p>\n<h3 class="header"><a class="anchor" href="#exclude-vendor-maps" id="exclude-vendor-maps"></a><span class="text">Exclude Vendor Maps</span><a class="icon-link" href="#exclude-vendor-maps"></a></h3>\n<p>The following code would exclude source maps for any modules in the <code>vendor.js</code> bundle:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  filename<span class="token punctuation">:</span> <span class="token string">\'[name].js.map\'</span><span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'vendor.js\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#host-source-maps-externally" id="host-source-maps-externally"></a><span class="text">Host Source Maps Externally</span><a class="icon-link" href="#host-source-maps-externally"></a></h3>\n<p>Set a URL for source maps. Useful for hosting them on a host that requires authorization.</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  append<span class="token punctuation">:</span> "\\n<span class="token comment">//# sourceMappingURL=http://example.com/sourcemap/[url]",</span>\n  filename<span class="token punctuation">:</span> <span class="token string">\'[name].map\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>And for cases when source maps are stored in the upper level directory:</p>\n<pre><code class="lang-js">project\n<span class="token operator">|</span><span class="token operator">-</span> dist\n  <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">public</span>\n    <span class="token operator">|</span><span class="token operator">-</span> bundle<span class="token operator">-</span><span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">.</span>js\n  <span class="token operator">|</span><span class="token operator">-</span> sourcemaps\n    <span class="token operator">|</span><span class="token operator">-</span> bundle<span class="token operator">-</span><span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">.</span>js<span class="token punctuation">.</span>map\n</code></pre>\n<p>With next config:</p>\n<pre><code class="lang-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>SourceMapDevToolPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  filename<span class="token punctuation">:</span> <span class="token string">"sourcemaps/[file].map"</span><span class="token punctuation">,</span>\n  publicPath<span class="token punctuation">:</span> <span class="token string">"https://example.com/project/"</span><span class="token punctuation">,</span>\n  fileContext<span class="token punctuation">:</span> <span class="token string">"public"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Will produce the following URL:</p>\n<pre><code class="lang-js">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>project<span class="token operator">/</span>sourcemaps<span class="token operator">/</span>bundle<span class="token operator">-</span><span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">.</span>js<span class="token punctuation">.</span>map`\n</code></pre>\n',title:"SourceMapDevToolPlugin"},title:"SourceMapDevToolPlugin",url:"/plugins/source-map-dev-tool-plugin/"},{file:{attributes:{title:"UglifyjsWebpackPlugin",source:"https://raw.githubusercontent.com/webpack-contrib/uglifyjs-webpack-plugin/master/README.md",edit:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin/edit/master/README.md",repo:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"include",id:"include"},{title:"exclude",id:"exclude"},{title:"cache",id:"cache"},{title:"{Boolean}",id:"-boolean-"},{title:"{String}",id:"-string-"},{title:"parallel",id:"parallel"},{title:"{Boolean}",id:"-boolean-"},{title:"{Number}",id:"-number-"},{title:"sourceMap",id:"sourcemap"},{title:"uglifyOptions",id:"uglifyoptions"},{title:"extractComments",id:"extractcomments"},{title:"{Boolean}",id:"-boolean-"},{title:"{RegExp|String} or  {Function {Boolean}>}",id:"-regexp-string-or-function-boolean-"},{title:"{Object}",id:"-object-"},{title:"warningsFilter",id:"warningsfilter"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>This plugin uses <a href="https://github.com/mishoo/UglifyJS2/tree/harmony">UglifyJS v3 </a><a href="https://npmjs.com/package/uglify-es">(<code>uglify-es</code>)</a> to minify your JavaScript</p>\n<blockquote>\n<p>ℹ️  <code>webpack =&lt; v3.0.0</code> currently contains <a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/version-0.4"><code>v0.4.6</code></a> of this plugin under <code>webpack.optimize.UglifyJsPlugin</code> as an alias. For usage of the latest version (<code>v1.0.0</code>), please follow the instructions below. Aliasing <code>v1.0.0</code> as <code>webpack.optimize.UglifyJsPlugin</code> is scheduled for <code>webpack v4.0.0</code></p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D uglifyjs-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'uglifyjs-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>test</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>/\\.js$/i</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Test to match files against\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>include</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Files to <code>include</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>exclude</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{RegExp|Array&lt;RegExp&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Files to <code>exclude</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cache</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable file caching\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>parallel</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Use multi-process parallel running to improve the build speed\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Use source maps to map error message locations to modules (This slows down the compilation) ⚠️ <strong><code>cheap-source-map</code> options don&#39;t work with this plugin</strong>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>uglifyOptions</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/master#uglifyoptions"><code>{...defaults}</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>uglify</code> <a href="https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options">Options</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>extractComments</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|RegExp|Function&lt;(node, comment) -&gt; {Boolean|Object}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Whether comments shall be extracted to a separate file, (see <a href="https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a">details</a> (<code>webpack &gt;= 2.3.0</code>)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>warningsFilter</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(source) -&gt; {Boolean}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>() =&gt; true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allow to filter uglify warnings\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js($|\\?)/i</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#include" id="include"></a><span class="text"><code>include</code></span><a class="icon-link" href="#include"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    include<span class="token punctuation">:</span> <span class="token regex">/\\/includes/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#exclude" id="exclude"></a><span class="text"><code>exclude</code></span><a class="icon-link" href="#exclude"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    exclude<span class="token punctuation">:</span> <span class="token regex">/\\/excludes/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cache" id="cache"></a><span class="text"><code>cache</code></span><a class="icon-link" href="#cache"></a></h3>\n<h4 class="header"><a class="anchor" href="#-boolean-" id="-boolean-"></a><span class="text"><code>{Boolean}</code></span><a class="icon-link" href="#-boolean-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    cache<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Enable file caching.\nDefault path to cache directory: <code>node_modules/.cache/uglifyjs-webpack-plugin</code>.</p>\n<h4 class="header"><a class="anchor" href="#-string-" id="-string-"></a><span class="text"><code>{String}</code></span><a class="icon-link" href="#-string-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    cache<span class="token punctuation">:</span> <span class="token string">\'path/to/cache\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Path to cache directory.</p>\n<h3 class="header"><a class="anchor" href="#parallel" id="parallel"></a><span class="text"><code>parallel</code></span><a class="icon-link" href="#parallel"></a></h3>\n<h4 class="header"><a class="anchor" href="#-boolean-" id="-boolean-"></a><span class="text"><code>{Boolean}</code></span><a class="icon-link" href="#-boolean-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    parallel<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Enable parallelization.\nDefault number of concurrent runs: <code>os.cpus().length - 1</code>.</p>\n<h4 class="header"><a class="anchor" href="#-number-" id="-number-"></a><span class="text"><code>{Number}</code></span><a class="icon-link" href="#-number-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    parallel<span class="token punctuation">:</span> <span class="token number">4</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>Number of concurrent runs.</p>\n<blockquote>\n<p>ℹ️  Parallelization can speedup your build significantly and is therefore <strong>highly recommended</strong></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>sourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<blockquote>\n<p>⚠️ <strong><code>cheap-source-map</code> options don&#39;t work with this plugin</strong></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#uglifyoptions" id="uglifyoptions"></a><span class="text"><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options"><code>uglifyOptions</code></a></span><a class="icon-link" href="#uglifyoptions"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ie8</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable IE8 Support\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ecma</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Supported ECMAScript Version (<code>5</code>, <code>6</code>, <code>7</code> or <code>8</code>). Affects <code>parse</code>, <code>compress</code> &amp;&amp; <code>output</code> options\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#parse-options"><code>parse</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Additional Parse Options\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-options"><code>mangle</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable Name Mangling (See <a href="https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-properties-options">Mangle Properties</a> for advanced setups, use with ⚠️)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#output-options"><code>output</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Additional Output Options (The defaults are optimized for best compression)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="https://github.com/mishoo/UglifyJS2/tree/harmony#compress-options"><code>compress</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Additional Compress Options\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>warnings</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Display Warnings\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      ie8<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      ecma<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n      parse<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n      mangle<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span>\n        properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// mangle property options</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        comments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        beautify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n      warnings<span class="token punctuation">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extractcomments" id="extractcomments"></a><span class="text"><code>extractComments</code></span><a class="icon-link" href="#extractcomments"></a></h3>\n<h4 class="header"><a class="anchor" href="#-boolean-" id="-boolean-"></a><span class="text"><code>{Boolean}</code></span><a class="icon-link" href="#-boolean-"></a></h4>\n<p>All comments that normally would be preserved by the <code>comments</code> option will be moved to a separate file. If the original file is named <code>foo.js</code>, then the comments will be stored to <code>foo.js.LICENSE</code>.</p>\n<h4 class="header"><a class="anchor" href="#-regexp-string-or-function-boolean-" id="-regexp-string-or-function-boolean-"></a><span class="text"><code>{RegExp|String}</code> or  <code>{Function&lt;(node, comment) -&gt; {Boolean}&gt;}</code></span><a class="icon-link" href="#-regexp-string-or-function-boolean-"></a></h4>\n<p>All comments that match the given expression (resp. are evaluated to <code>true</code> by the function) will be extracted to the separate file. The <code>comments</code> option specifies whether the comment will be preserved, i.e. it is possible to preserve some comments (e.g. annotations) while extracting others or even preserving comments that have been extracted.</p>\n<h4 class="header"><a class="anchor" href="#-object-" id="-object-"></a><span class="text"><code>{Object}</code></span><a class="icon-link" href="#-object-"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>condition</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Regex|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        ``\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Regular Expression or function (see previous point)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>filename</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>${file}.LICENSE</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The file where the extracted comments will be stored. Can be either a <code>{String}</code> or a <code>{Function&lt;(string) -&gt; {String}&gt;}</code>, which will be given the original filename. Default is to append the suffix <code>.LICENSE</code> to the original filename\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>banner</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>/*! For license information please see ${filename}.js.LICENSE */</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The banner text that points to the extracted file and will be added on top of the original file. Can be <code>false</code> (no banner), a <code>{String}</code>, or a <code>{Function&lt;(string) -&gt; {String}</code> that will be called with the filename where extracted comments have been stored. Will be wrapped into comment\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#warningsfilter" id="warningsfilter"></a><span class="text"><code>warningsFilter</code></span><a class="icon-link" href="#warningsfilter"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    warningsFilter<span class="token punctuation">:</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/hulkish"></p>\n<p><img width="150" height="150" src="https://github.com/hulkish.png?size=150"></p>\n<p></br></p>\n<pre><code>      Steven Hargrove\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"UglifyjsWebpackPlugin"},title:"UglifyjsWebpackPlugin",url:"/plugins/uglifyjs-webpack-plugin/"},{file:{attributes:{title:"WatchIgnorePlugin",contributors:["skipjack"],group:"-",anchors:[{title:"Options",id:"options"}],related:[]},body:'<p>Ignore the specified files, i.e. those matching the provided paths or regular expressions, while in <a href="/configuration/watch">watch mode</a>.</p>\n<pre><code class="lang-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>WatchIgnorePlugin</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<ul>\n<li><code>paths</code> (array): A list of RegExps or absolute paths to directories or files that should be ignored</li>\n</ul>\n',title:"WatchIgnorePlugin"},title:"WatchIgnorePlugin",url:"/plugins/watch-ignore-plugin/"},{file:{attributes:{title:"HtmlWebpackPlugin",contributors:["ampedandwired","simon04"],group:"-",anchors:[{title:"Installation",id:"installation"},{title:"Basic Usage",id:"basic-usage"},{title:"Configuration",id:"configuration"},{title:"Third party addons",id:"third-party-addons"}],related:[]},body:'<p>The <a href="https://github.com/ampedandwired/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> simplifies creation of HTML files to serve your webpack bundles. This is especially useful for webpack bundles that include a hash in the filename which changes every compilation. You can either let the plugin generate an HTML file for you, supply your own template using <a href="https://lodash.com/docs#template">lodash templates</a>, or use your own <a href="/loaders">loader</a>.</p>\n<h2 class="header"><a class="anchor" href="#installation" id="installation"></a><span class="text">Installation</span><a class="icon-link" href="#installation"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev html-webpack-plugin\n</code></pre>\n<h2 class="header"><a class="anchor" href="#basic-usage" id="basic-usage"></a><span class="text">Basic Usage</span><a class="icon-link" href="#basic-usage"></a></h2>\n<p>The plugin will generate an HTML5 file for you that includes all your webpack\nbundles in the body using <code>script</code> tags. Just add the plugin to your webpack\nconfig as follows:</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'index_bundle.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This will generate a file <code>dist/index.html</code> containing the following:</p>\n<pre><code class="lang-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>webpack App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index_bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>If you have multiple webpack entry points, they will all be included with <code>script</code>\ntags in the generated HTML.</p>\n<p>If you have any CSS assets in webpack&#39;s output (for example, CSS extracted\nwith the <a href="/plugins/extract-text-webpack-plugin">ExtractTextPlugin</a>)\nthen these will be included with <code>&lt;link&gt;</code> tags in the HTML head.</p>\n<h2 class="header"><a class="anchor" href="#configuration" id="configuration"></a><span class="text">Configuration</span><a class="icon-link" href="#configuration"></a></h2>\n<p>For all configuration options, please see the <a href="https://github.com/ampedandwired/html-webpack-plugin#configuration">plugin documentation</a>.</p>\n<h2 class="header"><a class="anchor" href="#third-party-addons" id="third-party-addons"></a><span class="text">Third party addons</span><a class="icon-link" href="#third-party-addons"></a></h2>\n<p>The plugin supports addons. For a list see the <a href="https://github.com/ampedandwired/html-webpack-plugin#third-party-addons">documentation</a>.</p>\n',title:"HtmlWebpackPlugin"},title:"HtmlWebpackPlugin",url:"/plugins/html-webpack-plugin/"}]},{title:"Loaders",url:"loaders",pages:[{file:{attributes:{title:"babel-loader",source:"https://raw.githubusercontent.com/babel/babel-loader/master/README.md",edit:"https://github.com/babel/babel-loader/edit/master/README.md",repo:"https://github.com/babel/babel-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Troubleshooting",id:"troubleshooting"},{title:"babel-loader is slow!",id:"babel-loader-is-slow-"},{title:"babel is injecting helpers into each file and bloating my code!",id:"babel-is-injecting-helpers-into-each-file-and-bloating-my-code-"},{title:"**NOTE:** transform-runtime & custom polyfills (e.g. Promise library)",id:"-note-transform-runtime-custom-polyfills-e-g-promise-library-"},{title:"The node API for babel has been moved to babel-core.",id:"the-node-api-for-babel-has-been-moved-to-babel-core-"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<p>This package allows transpiling JavaScript files using <a href="https://github.com/babel/babel">Babel</a> and <a href="https://github.com/webpack/webpack">webpack</a>.</p>\n<p><strong>Notes:</strong> Issues with the output should be reported on the babel <a href="https://github.com/babel/babel/issues">issue tracker</a>.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<blockquote>\n<p>webpack 3.x | babel-loader 8.x | babel 7.x</p>\n</blockquote>\n<pre><code class="lang-bash">npm <span class="token function">install</span> babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env webpack\n</code></pre>\n<blockquote>\n<p>webpack 3.x babel-loader 7.x | babel 6.x</p>\n</blockquote>\n<pre><code class="lang-bash">npm <span class="token function">install</span> babel-loader babel-core babel-preset-env webpack\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><a href="https://webpack.js.org/loaders/">Documentation: Using loaders</a></p>\n<p>Within your webpack configuration object, you&#39;ll need to add the babel-loader to the list of modules, like so:</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p>See the <code>babel</code> <a href="https://babeljs.io/docs/usage/api/#options">options</a>.</p>\n<p>You can pass options to the loader by using the <a href="https://webpack.js.org/configuration/module/#rule-options-rule-query">options property</a>:</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/plugin-transform-object-rest-spread\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This loader also supports the following loader-specific option:</p>\n<ul>\n<li><p><code>cacheDirectory</code>: Default <code>false</code>. When set, the given directory will be used to cache the results of the loader. Future webpack builds will attempt to read from the cache to avoid needing to run the potentially expensive Babel recompilation process on each run. If the value is blank (<code>loader: &#39;babel-loader?cacheDirectory&#39;</code>) or <code>true</code> (<code>loader: babel-loader?cacheDirectory=true</code>) the loader will use the default cache directory in <code>node_modules/.cache/babel-loader</code> or fallback to the default OS temporary file directory if no <code>node_modules</code> folder could be found in any root directory.</p>\n</li>\n<li><p><code>cacheIdentifier</code>: Default is a string composed by the babel-core&#39;s version, the babel-loader&#39;s version, the contents of .babelrc file if it exists and the value of the environment variable <code>BABEL_ENV</code> with a fallback to the <code>NODE_ENV</code> environment variable. This can be set to a custom value to force cache busting if the identifier changes.</p>\n</li>\n<li><p><code>forceEnv</code>: Default will resolve BABEL_ENV then NODE_ENV. Allow you to override BABEL_ENV/NODE_ENV at the loader level. Useful for isomorphic applications with different babel configuration for client and server.</p>\n</li>\n</ul>\n<p><strong>Note:</strong> The <code>sourceMap</code> option is ignored, instead sourceMaps are automatically enabled when webpack is configured to use them (via the <code>devtool</code> config option).</p>\n<h2 class="header"><a class="anchor" href="#troubleshooting" id="troubleshooting"></a><span class="text">Troubleshooting</span><a class="icon-link" href="#troubleshooting"></a></h2>\n<h3 class="header"><a class="anchor" href="#babel-loader-is-slow-" id="babel-loader-is-slow-"></a><span class="text">babel-loader is slow!</span><a class="icon-link" href="#babel-loader-is-slow-"></a></h3>\n<p>Make sure you are transforming as few files as possible. Because you are probably\nmatching <code>/\\.js$/</code>, you might be transforming the <code>node_modules</code> folder or other unwanted\nsource.</p>\n<p>To exclude <code>node_modules</code>, see the <code>exclude</code> option in the <code>loaders</code> config as documented above.</p>\n<p>You can also speed up babel-loader by as much as 2x by using the <code>cacheDirectory</code> option.\nThis will cache transformations to the filesystem.</p>\n<h3 class="header"><a class="anchor" href="#babel-is-injecting-helpers-into-each-file-and-bloating-my-code-" id="babel-is-injecting-helpers-into-each-file-and-bloating-my-code-"></a><span class="text">babel is injecting helpers into each file and bloating my code!</span><a class="icon-link" href="#babel-is-injecting-helpers-into-each-file-and-bloating-my-code-"></a></h3>\n<p>babel uses very small helpers for common functions such as <code>_extend</code>. By default\nthis will be added to every file that requires it.</p>\n<p>You can instead require the babel runtime as a separate module to avoid the duplication.</p>\n<p>The following configuration disables automatic per-file runtime injection in babel, instead\nrequiring <code>babel-plugin-transform-runtime</code> and making all helper references use it.</p>\n<p>See the <a href="http://babeljs.io/docs/plugins/transform-runtime/">docs</a> for more information.</p>\n<p><strong>NOTE:</strong> You must run <code>npm install babel-plugin-transform-runtime --save-dev</code> to include this in your project and <code>babel-runtime</code> itself as a dependency with <code>npm install babel-runtime --save</code>.</p>\n<pre><code class="lang-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token comment">// the \'transform-runtime\' plugin tells babel to require the runtime</span>\n  <span class="token comment">// instead of inlining it.</span>\n  <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/transform-runtime\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-note-transform-runtime-custom-polyfills-e-g-promise-library-" id="-note-transform-runtime-custom-polyfills-e-g-promise-library-"></a><span class="text"><strong>NOTE:</strong> transform-runtime &amp; custom polyfills (e.g. Promise library)</span><a class="icon-link" href="#-note-transform-runtime-custom-polyfills-e-g-promise-library-"></a></h4>\n<p>Since <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime">babel-plugin-transform-runtime</a> includes a polyfill that includes a custom <a href="https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js">regenerator runtime</a> and <a href="https://github.com/zloirock/core-js">core.js</a>, the following usual shimming method using <code>webpack.ProvidePlugin</code> will not work:</p>\n<pre><code class="lang-javascript"><span class="token comment">// ...</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token string">\'Promise\'</span><span class="token punctuation">:</span> <span class="token string">\'bluebird\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token comment">// ...</span>\n</code></pre>\n<p>The following approach will not work either:</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">;</span>\n</code></pre>\n<p>which outputs to (using <code>runtime</code>):</p>\n<pre><code class="lang-javascript"><span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> _Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'default\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'default\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The previous <code>Promise</code> library is referenced and used before it is overridden.</p>\n<p>One approach is to have a &quot;bootstrap&quot; step in your application that would first override the default globals before your application:</p>\n<pre><code class="lang-javascript"><span class="token comment">// bootstrap.js</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./app\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#the-node-api-for-babel-has-been-moved-to-babel-core-" id="the-node-api-for-babel-has-been-moved-to-babel-core-"></a><span class="text">The node API for <code>babel</code> has been moved to <code>babel-core</code>.</span><a class="icon-link" href="#the-node-api-for-babel-has-been-moved-to-babel-core-"></a></h3>\n<p>If you receive this message it means that you have the npm package <code>babel</code> installed and use the short notation of the loader in the webpack config (which is not valid anymore as of webpack 2.x):</p>\n<pre><code class="lang-js">  <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'babel\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>Webpack then tries to load the <code>babel</code> package instead of the <code>babel-loader</code>.</p>\n<p>To fix this you should uninstall the npm package <code>babel</code> as it is deprecated in babel v6. (instead install <code>babel-cli</code> or <code>babel-core</code>)\nIn the case one of your dependencies is installing <code>babel</code> and you cannot uninstall it yourself, use the complete name of the loader in the webpack config:</p>\n<pre><code class="lang-js">  <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text"><a href="http://couto.mit-license.org/">License</a></span><a class="icon-link" href="#license"></a></h2>\n',title:"babel-loader"},title:"babel-loader",url:"/loaders/babel-loader/"},{file:{attributes:{title:"yaml-frontmatter-loader",source:"https://raw.githubusercontent.com/webpack-contrib/yaml-frontmatter-loader/master/README.md",edit:"https://github.com/webpack-contrib/yaml-frontmatter-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/yaml-frontmatter-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"}],contributors:[],related:[]},body:'<p>YAML Frontmatter loader for <a href="https://webpack.js.org/">webpack</a>. Converts YAML in files to JSON. You should chain it with <a href="/loaders/json-loader/">json-loader</a>.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<p><code>npm install yaml-frontmatter-loader</code></p>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders/">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-loader!yaml-frontmatter-loader!./file.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => returns file.md as javascript object</span>\n</code></pre>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n         test<span class="token punctuation">:</span> <span class="token regex">/\\.md$/</span><span class="token punctuation">,</span>\n         use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'json-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'yaml-frontmatter-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',title:"yaml-frontmatter-loader"},title:"yaml-frontmatter-loader",url:"/loaders/yaml-frontmatter-loader/"},{file:{attributes:{title:"cache-loader",source:"https://raw.githubusercontent.com/webpack-contrib/cache-loader/master/README.md",edit:"https://github.com/webpack-contrib/cache-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/cache-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Caches the result of following loaders on disk (default) or in the database</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev cache-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Add this loader in front of other (expensive) loaders to cache the result on disk.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.ext$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>loaders\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️ Note that there is an overhead for saving the reading and saving the cache file, so only use this loader to cache expensive loaders.</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheKey</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(options, request) -&gt; {String}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allows you to override default cache key generator\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheDirectory</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>path.resolve(&#39;.cache-loader&#39;)</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Provide a cache directory where cache items should be stored (used for default read/write implementation)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheIdentifier</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>cache-loader:{version} {process.env.NODE_ENV}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Provide an invalidation identifier which is used to generate the hashes. You can use it for extra dependencies of loaders (used for default read/write implementation)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>write</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(cacheKey, data, callback) -&gt; {void}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allows you to override default write cache data to file (e.g. Redis, memcached)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>read</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function(cacheKey, callback) -&gt; {void}}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Allows you to override default read cache data from file\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'babel-loader\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token comment">// Or different database client - memcached, mongodb, ...</span>\n<span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'redis\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'crypto\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n<span class="token comment">// connect to client</span>\n<span class="token comment">// ...</span>\n\n<span class="token keyword">const</span> BUILD_CACHE_TIMEOUT <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span> <span class="token comment">// 1 day</span>\n\n<span class="token keyword">function</span> <span class="token function">digest</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">\'hex\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Generate own cache key</span>\n<span class="token keyword">function</span> <span class="token function">cacheKey</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`build:cache:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">digest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// Read data from database and parse them</span>\n<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  client<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not found`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// Write data to database under cacheKey</span>\n<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  client<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'EX\'</span><span class="token punctuation">,</span> BUILD_CACHE_TIMEOUT<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              cacheKey<span class="token punctuation">,</span>\n              read<span class="token punctuation">,</span>\n              write<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'babel-loader\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/sokra"></p>\n<p><img width="150" height="150" src="https://github.com/sokra.png?size=150"></p>\n<p></br></p>\n<pre><code>      Tobias Koppers\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"cache-loader"},title:"cache-loader",url:"/loaders/cache-loader/"},{file:{attributes:{title:"coffee-loader",source:"https://raw.githubusercontent.com/webpack-contrib/coffee-loader/master/README.md",edit:"https://github.com/webpack-contrib/coffee-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/coffee-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"Literate",id:"literate"},{title:"Sourcemaps",id:"sourcemaps"},{title:"Transpile",id:"transpile"},{title:"Maintainer",id:"maintainer"}],contributors:[],related:[]},body:'<p>Loads <a href="http://coffeescript.org/">CoffeeScript</a> like JavaScript</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev coffee-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">import</span> coffee <span class="token keyword">from</span> <span class="token string">\'coffee-loader!./file.coffee\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>##</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> coffee <span class="token keyword">from</span> <span class="token string">\'file.coffee\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'coffee-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>literate</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable CoffeeScript in Markdown (Code Blocks) e.g <code>file.coffee.md</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable Sourcemaps\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>transpile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Provide Babel presets and plugins\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#literate" id="literate"></a><span class="text"><a href="http://coffeescript.org/#literate"><code>Literate</code></a></span><a class="icon-link" href="#literate"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee.md$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'coffee-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> literate<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemaps" id="sourcemaps"></a><span class="text"><code>Sourcemaps</code></span><a class="icon-link" href="#sourcemaps"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'coffee-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#transpile" id="transpile"></a><span class="text"><a href="http://coffeescript.org/#transpilation"><code>Transpile</code></a></span><a class="icon-link" href="#transpile"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'coffee-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> \n              transpile<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'env\'</span><span class="token punctuation">]</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainer" id="maintainer"></a><span class="text">Maintainer</span><a class="icon-link" href="#maintainer"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"coffee-loader"},title:"coffee-loader",url:"/loaders/coffee-loader/"},{file:{attributes:{title:"coffee-redux-loader",source:"https://raw.githubusercontent.com/webpack-contrib/coffee-redux-loader/master/README.md",edit:"https://github.com/webpack-contrib/coffee-redux-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/coffee-redux-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Coffee Script Redux loader for Webpack.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D coffee-redux-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> exportsOfFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"coffee-redux-loader!./file.coffee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => return exports of executed and compiled file.coffee</span>\n</code></pre>\n<p>Don&#39;t forget to polyfill <code>require</code> if you want to use it in node.\nSee <code>webpack</code> documentation.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"coffee-redux-loader"},title:"coffee-redux-loader",url:"/loaders/coffee-redux-loader/"},{file:{attributes:{title:"coverjs-loader",source:"https://raw.githubusercontent.com/webpack-contrib/coverjs-loader/master/README.md",edit:"https://github.com/webpack-contrib/coverjs-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/coverjs-loader",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript">webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token string">"mocha!./cover-my-client-tests.js"</span> <span class="token operator">--</span>options webpackOptions<span class="token punctuation">.</span>js\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// webpackOptions.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// your webpack options</span>\n    output<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>\n    publicPrefix<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>\n    debug<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    includeFilenames<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    watch<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// the coverjs loader binding</span>\n    postLoaders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// every file</span>\n        exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"node_modules.chai"</span><span class="token punctuation">,</span>\n            <span class="token string">"node_modules.coverjs-loader"</span><span class="token punctuation">,</span>\n            <span class="token string">"node_modules.webpack.buildin"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"coverjs-loader"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-javascript"><span class="token comment">// cover-my-client-tests.js</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./my-client-tests"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cover-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reportHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>See <a href="https://github.com/webpack/the-big-test">the-big-test</a> for an example.</p>\n<p>You don&#39;t have to combine it with the mocha loader, it&#39;s independent. So if you want to cover a normal app usage, you can do so. The <code>reportHtml</code> function just appends the output to the body.</p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT (<a href="http://www.opensource.org/licenses/mit-license.php">http://www.opensource.org/licenses/mit-license.php</a>)</p>\n',title:"coverjs-loader"},title:"coverjs-loader",url:"/loaders/coverjs-loader/"},{file:{attributes:{title:"css-loader",source:"https://raw.githubusercontent.com/webpack-contrib/css-loader/master/README.md",edit:"https://github.com/webpack-contrib/css-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/css-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"root",id:"root"},{title:"url",id:"url"},{title:"alias",id:"alias"},{title:"import",id:"import"},{title:"modules",id:"modules"},{title:"Scope",id:"scope"},{title:"Composing",id:"composing"},{title:"Importing",id:"importing"},{title:"minimize",id:"minimize"},{title:"sourceMap",id:"sourcemap"},{title:"camelCase",id:"camelcase"},{title:"importLoaders",id:"importloaders"},{title:"Examples",id:"examples"},{title:"Assets",id:"assets"},{title:"Extract",id:"extract"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev css-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>The <code>css-loader</code> interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code>\nand will resolve them.</p>\n<p>Good loaders for requiring your assets are the <a href="/loaders/file-loader/">file-loader</a>\nand the <a href="/loaders/url-loader/">url-loader</a> which you should specify in your config (see <a href="https://github.com/webpack-contrib/css-loader#assets">below</a>).</p>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p>You can also use the css-loader results directly as string, such as in Angular&#39;s component style.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n   test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n   use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token string">\'to-string-loader\'</span><span class="token punctuation">,</span>\n     <span class="token string">\'css-loader\'</span>\n   <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>or</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./test.css\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {String}</span>\n</code></pre>\n<p>If there are SourceMaps, they will also be included in the result string.</p>\n<p>If, for one reason or another, you need to extract CSS as a\nplain string resource (i.e. not wrapped in a JS module) you\nmight want to check out the <a href="https://github.com/peerigon/extract-loader">extract-loader</a>.\nIt&#39;s useful when you, for instance, need to post process the CSS as a string.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n   test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n   use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token string">\'handlebars-loader\'</span><span class="token punctuation">,</span> <span class="token comment">// handlebars loader expects raw resource string</span>\n     <span class="token string">\'extract-loader\'</span><span class="token punctuation">,</span>\n     <span class="token string">\'css-loader\'</span>\n   <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#root"><code>root</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>/</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Path to resolve URLs, URLs starting with <code>/</code> will not be translated\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#url"><code>url</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable <code>url()</code> handling\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#alias"><code>alias</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Create aliases to import certain modules more easily\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#import"><code>import</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable @import handling\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#modules"><code>modules</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable CSS Modules\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#minimize"><code>minimize</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable minification\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#sourcemap"><code>sourceMap</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable Sourcemaps\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#camelcase"><code>camelCase</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean|String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Export Classnames in CamelCase\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#importloaders"><code>importLoaders</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>0</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Number of loaders applied before CSS loader\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>localIdentName</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[hash:base64]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure the generated ident\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#root" id="root"></a><span class="text"><code>root</code></span><a class="icon-link" href="#root"></a></h3>\n<p>For URLs that start with a <code>/</code>, the default behavior is to not translate them.</p>\n<p><code>url(/image.png) =&gt; url(/image.png)</code></p>\n<p>If a <code>root</code> query parameter is set, however, it will be prepended to the URL\nand then translated.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> <span class="token string">\'.\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>url(/image.png)</code> =&gt; <code>require(&#39;./image.png&#39;)</code></p>\n<p>Using &#39;Root-relative&#39; urls is not recommended. You should only use it for legacy CSS files.</p>\n<h3 class="header"><a class="anchor" href="#url" id="url"></a><span class="text"><code>url</code></span><a class="icon-link" href="#url"></a></h3>\n<p>To disable <code>url()</code> resolving by <code>css-loader</code> set the option to <code>false</code>.</p>\n<p>To be compatible with existing css files (if not in CSS Module mode).</p>\n<pre><code>url<span class="token punctuation">(</span>image.png<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> require<span class="token punctuation">(</span><span class="token string">\'./image.png\'</span><span class="token punctuation">)</span>\nurl<span class="token punctuation">(</span>~module/image.png<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> require<span class="token punctuation">(</span><span class="token string">\'module/image.png\'</span><span class="token punctuation">)</span>\n</code></pre><h3 class="header"><a class="anchor" href="#alias" id="alias"></a><span class="text"><code>alias</code></span><a class="icon-link" href="#alias"></a></h3>\n<p>Rewrite your urls with alias, this is useful when it&#39;s hard to change url paths of your input files, for example, when you&#39;re using some css / sass files in another package (bootstrap, ratchet, font-awesome, etc.).</p>\n<p><code>css-loader</code>&#39;s <code>alias</code> follows the same syntax as webpack&#39;s <code>resolve.alias</code>, you can see the details at the <a href="https://webpack.js.org/configuration/resolve/#resolve-alias">resolve docs</a></p>\n<p><strong>file.scss</strong></p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"bootstrap"</span><span class="token punctuation">;</span></span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token string">"../fonts/bootstrap"</span><span class="token punctuation">:</span> <span class="token string">"bootstrap-sass/assets/fonts/bootstrap"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./node_modules/bootstrap-sass/assets/stylesheets"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Check out this <a href="https://github.com/bbtfr/webpack2-bootstrap-sass-sample">working bootstrap example</a>.</p>\n<h3 class="header"><a class="anchor" href="#import" id="import"></a><span class="text"><code>import</code></span><a class="icon-link" href="#import"></a></h3>\n<p>To disable <code>@import</code> resolving by <code>css-loader</code> set the option to <code>false</code></p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(\'https://fonts.googleapis.com/css?family=Roboto\')</span><span class="token punctuation">;</span></span>\n</code></pre>\n<blockquote>\n<p><em>⚠️ Use with caution, since this disables resolving for <strong>all</strong> <code>@import</code>s, including css modules <code>composes: xxx from &#39;path/to/file.css&#39;</code> feature.</em></p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#modules" id="modules"></a><span class="text"><a href="https://github.com/css-modules/css-modules"><code>modules</code></a></span><a class="icon-link" href="#modules"></a></h3>\n<p>The query parameter <code>modules</code> enables the <strong>CSS Modules</strong> spec.</p>\n<p>This enables local scoped CSS by default. (You can switch it off with <code>:global(...)</code> or <code>:global</code> for selectors and/or rules.).</p>\n<h4 class="header"><a class="anchor" href="#scope" id="scope"></a><span class="text"><code>Scope</code></span><a class="icon-link" href="#scope"></a></h4>\n<p>By default CSS exports all classnames into a global selector scope. Styles can be locally scoped to avoid globally scoping styles.</p>\n<p>The syntax <code>:local(.className)</code> can be used to declare <code>className</code> in the local scope. The local identifiers are exported by the module.</p>\n<p>With <code>:local</code> (without brackets) local mode can be switched on for this selector. <code>:global(.className)</code> can be used to declare an explicit global selector. With <code>:global</code> (without brackets) global mode can be switched on for this selector.</p>\n<p>The loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.className)</span> </span><span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token pseudo-class">:local</span> <span class="token class">.className</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token pseudo-class">:local(.className .subClass)</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token pseudo-class">:local</span> <span class="token class">.className</span> <span class="token class">.subClass</span> <span class="token pseudo-class">:global(.global-class-name)</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> </span><span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token class">._13LGdX8RMStbBE9w-t0gZ1</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token class">._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token class">.global-class-name</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:information_source: Identifiers are exported</p>\n</blockquote>\n<pre><code class="lang-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>CamelCase is recommended for local selectors. They are easier to use in the within the imported JS module.</p>\n<p><code>url()</code> URLs in block scoped (<code>:local .abc</code>) rules behave like requests in modules.</p>\n<pre><code>file.png <span class="token operator">=</span><span class="token operator">></span> ./file.png\n~module/file.png <span class="token operator">=</span><span class="token operator">></span> module/file.png\n</code></pre><p>You can use <code>:local(#someId)</code>, but this is not recommended. Use classes instead of ids.\nYou can configure the generated ident with the <code>localIdentName</code> query parameter (default <code>[hash:base64]</code>).</p>\n<p> <strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>You can also specify the absolute path to your custom <code>getLocalIdent</code> function to generate classname based on a different schema. This requires <code>webpack &gt;= 2.2.1</code> (it supports functions in the <code>options</code> object).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span><span class="token punctuation">,</span>\n    getLocalIdent<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> localIdentName<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'whatever_random_class_name\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:information_source: For prerendering with extract-text-webpack-plugin you should use <code>css-loader/locals</code> instead of <code>style-loader!css-loader</code> <strong>in the prerendering bundle</strong>. It doesn&#39;t embed CSS but only exports the identifier mappings.</p>\n</blockquote>\n<h4 class="header"><a class="anchor" href="#composing" id="composing"></a><span class="text"><code>Composing</code></span><a class="icon-link" href="#composing"></a></h4>\n<p>When declaring a local classname you can compose a local class from another local classname.</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.className)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector"><span class="token pseudo-class">:local(.subClass)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This doesn&#39;t result in any change to the CSS itself but exports multiple classnames.</p>\n<pre><code class="lang-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">._23_aKvs-b8bW2Vg3fwHozO</span> </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector"><span class="token class">._13LGdX8RMStbBE9w-t0gZ1</span> </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#importing" id="importing"></a><span class="text"><code>Importing</code></span><a class="icon-link" href="#importing"></a></h4>\n<p>To import a local classname from another module.</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.continueButton)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'library/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.nameEdit)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit highlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>To import from multiple modules use multiple <code>composes:</code> rules.</p>\n<pre><code class="lang-css"><span class="token selector"><span class="token pseudo-class">:local(.className)</span> </span><span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit hightlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'module/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> classFromThisModule<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#minimize" id="minimize"></a><span class="text"><code>minimize</code></span><a class="icon-link" href="#minimize"></a></h3>\n<p>By default the css-loader minimizes the css if specified by the module system.</p>\n<p>In some cases the minification is destructive to the css, so you can provide your own options to the cssnano-based minifier if needed. See <a href="http://cssnano.co/guides/">cssnano&#39;s documentation</a> for more information on the available options.</p>\n<p>You can also disable or enforce minification with the <code>minimize</code> query parameter.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    minimize<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token comment">/* CSSNano Options */</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>sourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p>To include source maps set the <code>sourceMap</code> option.</p>\n<p>I. e. the extract-text-webpack-plugin can handle them.</p>\n<p>They are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#camelcase" id="camelcase"></a><span class="text"><code>camelCase</code></span><a class="icon-link" href="#camelcase"></a></h3>\n<p>By default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter <code>camelCase</code> to css-loader.</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>true</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Class names will be camelized\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>&#39;dashes&#39;</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Only dashes in class names will be camelized\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>&#39;only&#39;</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Introduced in <code>0.27.1</code>. Class names will be camelized, the original class name will be removed from the locals\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>&#39;dashesOnly&#39;</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Introduced in <code>0.27.1</code>. Dashes in class names will be camelized, the original class name will be removed from the locals\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><strong>file.css</strong></p>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">.class-name</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    camelCase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#importloaders" id="importloaders"></a><span class="text"><code>importLoaders</code></span><a class="icon-link" href="#importloaders"></a></h3>\n<p>The query parameter <code>importLoaders</code> allows to configure how many loaders before <code>css-loader</code> should be applied to <code>@import</code>ed resources.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        importLoaders<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment">// 0 => no loaders (default); 1 => postcss-loader; 2 => postcss-loader, sass-loader</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'sass-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This may change in the future, when the module system (i. e. webpack) supports loader matching by origin.</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<h3 class="header"><a class="anchor" href="#assets" id="assets"></a><span class="text">Assets</span><a class="icon-link" href="#assets"></a></h3>\n<p>The following <code>webpack.config.js</code> can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as <a href="https://tools.ietf.org/html/rfc2397">Data URLs</a> and copy larger files to the output directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          limit<span class="token punctuation">:</span> <span class="token number">10000</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extract" id="extract"></a><span class="text">Extract</span><a class="icon-link" href="#extract"></a></h3>\n<p>For production builds it&#39;s recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on. This can be achieved by using the <a href="/plugins/extract-text-webpack-plugin/">extract-text-webpack-plugin</a> to extract the CSS when running in production mode.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV\n\n<span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> env <span class="token operator">===</span> <span class="token string">\'production\'</span>\n          <span class="token operator">?</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n              use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> env <span class="token operator">===</span> <span class="token string">\'production\'</span>\n    <span class="token operator">?</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          filename<span class="token punctuation">:</span> <span class="token string">\'[name].css\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/SpaceK33z.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/TheLarkInn.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><img width="150" height="150"\n        src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/michael-ciniawsky"></p>\n<p>Michael Ciniawsky</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/evilebottnawi"></p>\n<p>Evilebot Tnawi</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://github.com/joscha.png?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/joscha"></p>\n<p>Joscha Feth</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"css-loader"},title:"css-loader",url:"/loaders/css-loader/"},{file:{attributes:{title:"exports-loader",source:"https://raw.githubusercontent.com/webpack-contrib/exports-loader/master/README.md",edit:"https://github.com/webpack-contrib/exports-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/exports-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Exports variables from inside the file by appending <code>exports[...] = ...</code> statements..</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i exports-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"exports-loader?file,parse=helpers.parse!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// adds below code to the file\'s source:</span>\n<span class="token comment">//  exports["file"] = file;</span>\n<span class="token comment">//  exports["parse"] = helpers.parse;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"exports-loader?file!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// adds below code to the file\'s source:</span>\n<span class="token comment">//  module.exports = file;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"exports-loader"},title:"exports-loader",url:"/loaders/exports-loader/"},{file:{attributes:{title:"expose-loader",source:"https://raw.githubusercontent.com/webpack-contrib/expose-loader/master/README.md",edit:"https://github.com/webpack-contrib/expose-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/expose-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>The expose loader adds modules to the global object. This is useful for debugging, or <a href="https://webpack.js.org/guides/shimming/">supporting libraries that depend on libraries in globals</a>.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i expose-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p><strong>Note</strong>: Modules must be <code>require()</code>&#39;d within in your bundle, or they will not\nbe exposed.</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"expose-loader?libraryName!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Exposes the exports for file.js to the global context on property "libraryName".</span>\n<span class="token comment">// In web browsers, window.libraryName is then available.</span>\n</code></pre>\n<p>For example, let&#39;s say you want to expose jQuery as a global called <code>$</code>:</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"expose-loader?$!jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Thus, <code>window.$</code> is then available in the browser console.</p>\n<p>Alternately, you can set this in your config file:</p>\n<p>webpack v1 usage</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"expose-loader?$"</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>webpack v2 usage</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'jquery\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n              options<span class="token punctuation">:</span> <span class="token string">\'$\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Let&#39;s say you also want to expose it as <code>window.jQuery</code> in addition to <code>window.$</code>.\nFor multiple expose you can use <code>!</code> in loader string:</p>\n<p>webpack v1 usage</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"expose-loader?$!expose-loader?jQuery"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>webpack v2 usage</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'jquery\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n              options<span class="token punctuation">:</span> <span class="token string">\'jQuery\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n              loader<span class="token punctuation">:</span> <span class="token string">\'expose-loader\'</span><span class="token punctuation">,</span>\n              options<span class="token punctuation">:</span> <span class="token string">\'$\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The <a href="https://nodejs.org/api/all.html#modules_require_resolve"><code>require.resolve</code></a>\nis a Node.js call (unrelated to <code>require.resolve</code> in webpack\nprocessing). <code>require.resolve</code> gives you the\nabsolute path to the module (<code>&quot;/.../app/node_modules/react/react.js&quot;</code>). So the\nexpose only applies to the react module. And it&#39;s only exposed when used in the\nbundle.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"expose-loader"},title:"expose-loader",url:"/loaders/expose-loader/"},{file:{attributes:{title:"extract-loader",source:"https://raw.githubusercontent.com/peerigon/extract-loader/master/README.md",edit:"https://github.com/peerigon/extract-loader/edit/master/README.md",repo:"https://github.com/peerigon/extract-loader",group:"-",anchors:[{title:"extract-loader",id:"extract-loader"},{title:"Installation",id:"installation"},{title:"Examples",id:"examples"},{title:"Extracting the index.html",id:"extracting-the-index-html"},{title:"Options",id:"options"},{title:"Contributing",id:"contributing"},{title:"License",id:"license"},{title:"Sponsors",id:"sponsors"}],contributors:[],related:[]},body:'<h1 class="header"><a class="anchor" href="#extract-loader" id="extract-loader"></a><span class="text">extract-loader</span><a class="icon-link" href="#extract-loader"></a></h1>\n<p><strong>webpack loader to extract HTML and CSS from the bundle.</strong></p>\n<p><a href="https://www.npmjs.com/package/extract-loader"><img src="https://img.shields.io/npm/v/extract-loader.svg" alt=""></a>\n<a href="https://www.npmjs.com/package/extract-loader"><img src="https://img.shields.io/npm/dm/extract-loader.svg" alt=""></a>\n<a href="https://david-dm.org/peerigon/extract-loader"><img src="https://david-dm.org/peerigon/extract-loader.svg" alt="Dependency Status"></a>\n<a href="https://travis-ci.org/peerigon/extract-loader"><img src="https://travis-ci.org/peerigon/extract-loader.svg?branch=master" alt="Build Status"></a>\n<a href="https://coveralls.io/r/peerigon/extract-loader?branch=master"><img src="https://img.shields.io/coveralls/peerigon/extract-loader.svg" alt="Coverage Status"></a></p>\n<p>The extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the <a href="/loaders/file-loader/">file-loader</a> to emit the extract-loader&#39;s result as separate file.</p>\n<pre><code class="lang-javascript"><span class="token keyword">import</span> stylesheetUrl <span class="token keyword">from</span> <span class="token string">"file-loader!extract-loader!css-loader!main.css"</span><span class="token punctuation">;</span>\n<span class="token comment">// stylesheetUrl will now be the hashed url to the final stylesheet</span>\n</code></pre>\n<p>The extract-loader works similar to the <a href="/plugins/extract-text-webpack-plugin/">extract-text-webpack-plugin</a> and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the <a href="/loaders/html-loader/">html-</a> or the <a href="/loaders/css-loader/">css-loader</a>. Thus it might not work in other situations.</p>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#installation" id="installation"></a><span class="text">Installation</span><a class="icon-link" href="#installation"></a></h2>\n<p><code>npm install extract-loader</code></p>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>##</p>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="http://webpack.github.io/docs/hot-module-replacement-with-webpack.html">hot module replacement</a> in development. In production, on the other hand, it&#39;s not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it&#39;s still better to have them as separate files in your final production build.</p>\n<p>With the extract-loader, you are able to reference your <code>main.css</code> as regular <code>entry</code>. The following <code>webpack.config.js</code> shows how to load your styles with the <a href="/loaders/style-loader/">style-loader</a> in development and as separate file in production.</p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> live <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mainCss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"css-loader"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"main.css"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>live<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mainCss<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"file-loader?name=[name].[ext]"</span><span class="token punctuation">,</span> <span class="token string">"extract-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    mainCss<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"style-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"main.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        mainCss<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extracting-the-index-html" id="extracting-the-index-html"></a><span class="text"><a href="https://github.com/peerigon/extract-loader/tree/master/examples/index-html">Extracting the index.html</a></span><a class="icon-link" href="#extracting-the-index-html"></a></h3>\n<p>You can even add your <code>index.html</code> as <code>entry</code> and just reference your stylesheets from there. You just need to tell the html-loader to also pick up <code>link:href</code>:</p>\n<pre><code class="lang-javascript"><span class="token keyword">const</span> indexHtml <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"main.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        indexHtml\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> indexHtml<span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            name<span class="token punctuation">:</span> <span class="token string">"[name]-dist.[ext]"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"html-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"img:src"</span><span class="token punctuation">,</span> <span class="token string">"link:href"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            interpolate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.jpg$/</span><span class="token punctuation">,</span>\n                loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>turns</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hi.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>into</p>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7c57758b88216530ef48069c2a4c685a.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6ac05174ae9b62257ff3aa8be43cf828.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p>There is currently exactly one option: <code>publicPath</code>.\nIf you are using a relative <code>publicPath</code> in webpack&#39;s <a href="http://webpack.github.io/docs/configuration.html#output-publicpath">output options</a> and extracting to a file with the <code>file-loader</code>, you might need this to account for the location of your extracted file.</p>\n<p>Example:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        publicPath<span class="token punctuation">:</span> <span class="token string">"dist/"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            name<span class="token punctuation">:</span> <span class="token string">"assets/[name].[ext]"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            publicPath<span class="token punctuation">:</span> <span class="token string">"../"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>You need another option? Then you should think about:</p>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#contributing" id="contributing"></a><span class="text">Contributing</span><a class="icon-link" href="#contributing"></a></h2>\n<p>From opening a bug report to creating a pull request: <strong>every contribution is appreciated and welcome</strong>. If you&#39;re planing to implement a new feature or change the api please create an issue first. This way we can ensure that your precious work is not in vain.</p>\n<p>All pull requests should have 100% test coverage (with notable exceptions) and need to pass all tests.</p>\n<ul>\n<li>Call <code>npm test</code> to run the unit tests</li>\n<li>Call <code>npm run coverage</code> to check the test coverage (using <a href="https://github.com/gotwarlost/istanbul">istanbul</a>)</li>\n</ul>\n<p><br></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>Unlicense</p>\n<h2 class="header"><a class="anchor" href="#sponsors" id="sponsors"></a><span class="text">Sponsors</span><a class="icon-link" href="#sponsors"></a></h2>\n<p><a href="https://peerigon.com"><img src="https://assets.peerigon.com/peerigon/logo/peerigon-logo-flat-spinat.png" width="150" /></a></p>\n',title:"extract-loader"},title:"extract-loader",url:"/loaders/extract-loader/"},{file:{attributes:{title:"file-loader",source:"https://raw.githubusercontent.com/webpack-contrib/file-loader/master/README.md",edit:"https://github.com/webpack-contrib/file-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/file-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"{String}",id:"-string-"},{title:"{Function}",id:"-function-"},{title:"placeholders",id:"placeholders"},{title:"hashes",id:"hashes"},{title:"context",id:"context"},{title:"publicPath",id:"publicpath"},{title:"outputPath",id:"outputpath"},{title:"useRelativePath",id:"userelativepath"},{title:"emitFile",id:"emitfile"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Instructs webpack to emit the required object as file and to return its public URL</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev file-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>By default the filename of the resulting file is the MD5 hash of the file&#39;s contents with the original extension of the required resource.</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">\'./file.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif)$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  \n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Emits <code>file.png</code> as file in the output directory and returns the public URL</p>\n<pre><code><span class="token string">"/public/path/0dcbbaa7013869e351f.png"</span>\n</code></pre><h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>name</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[hash].[ext]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure a custom filename template for your file\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>context</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>this.options.context</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure a custom file context, defaults to <code>webpack.config.js</code> <a href="https://webpack.js.org/configuration/entry-context/#context">context</a>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>publicPath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <a href="https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific-"><code>__webpack_public_path__</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure a custom <code>public</code> path for your files\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>outputPath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>&#39;undefined&#39;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure a custom <code>output</code> path for your files\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>useRelativePath</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Should be <code>true</code> if you wish to generate a <code>context</code> relative URL for each file\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>emitFile</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        By default a file is emitted, however this can be disabled if required (e.g. for server side packages)\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p>You can configure a custom filename template for your file using the query parameter <code>name</code>. For instance, to copy a file from your <code>context</code> directory into the output directory retaining the full directory structure, you might use</p>\n<h4 class="header"><a class="anchor" href="#-string-" id="-string-"></a><span class="text"><code>{String}</code></span><a class="icon-link" href="#-string-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-function-" id="-function-"></a><span class="text"><code>{Function}</code></span><a class="icon-link" href="#-function-"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">\'development\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">\'[path][name].[ext]\'</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token string">\'[hash].[ext]\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#placeholders" id="placeholders"></a><span class="text"><code>placeholders</code></span><a class="icon-link" href="#placeholders"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>[ext]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>file.extname</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The extension of the resource\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>[name]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>file.basename</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The basename of the resource\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>[path]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>file.dirname</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The path of the resource relative to the <code>context</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>[hash]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>md5</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The hash of the content, hashes below for more info\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>[N]</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        ``\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The <code>n-th</code> match obtained from matching the current file name against the query param <code>regExp</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#hashes" id="hashes"></a><span class="text"><code>hashes</code></span><a class="icon-link" href="#hashes"></a></h4>\n<p><code>[&lt;hashType&gt;:hash:&lt;digestType&gt;:&lt;length&gt;]</code> optionally you can configure</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>hashType</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>md5</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>sha1</code>, <code>md5</code>, <code>sha256</code>, <code>sha512</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>digestType</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>base64</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>hex</code>, <code>base26</code>, <code>base32</code>, <code>base36</code>, <code>base49</code>, <code>base52</code>, <code>base58</code>, <code>base62</code>, <code>base64</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>length</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>9999</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        The length in chars\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>By default, the path and name you specify will output the file in that same directory and will also use that same URL path to access the file.</p>\n<h3 class="header"><a class="anchor" href="#context" id="context"></a><span class="text"><code>context</code></span><a class="icon-link" href="#context"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span><span class="token punctuation">,</span>\n    context<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<p>You can specify custom <code>output</code> and <code>public</code> paths by using <code>outputPath</code>, <code>publicPath</code> and <code>useRelativePath</code></p>\n<h3 class="header"><a class="anchor" href="#publicpath" id="publicpath"></a><span class="text"><code>publicPath</code></span><a class="icon-link" href="#publicpath"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span><span class="token punctuation">,</span>\n    publicPath<span class="token punctuation">:</span> <span class="token string">\'assets/\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#outputpath" id="outputpath"></a><span class="text"><code>outputPath</code></span><a class="icon-link" href="#outputpath"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]\'</span><span class="token punctuation">,</span>\n    outputPath<span class="token punctuation">:</span> <span class="token string">\'images/\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#userelativepath" id="userelativepath"></a><span class="text"><code>useRelativePath</code></span><a class="icon-link" href="#userelativepath"></a></h3>\n<p><code>useRelativePath</code> should be <code>true</code> if you wish to generate a relative URL to the for each file context.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    useRelativePath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#emitfile" id="emitfile"></a><span class="text"><code>emitFile</code></span><a class="icon-link" href="#emitfile"></a></h3>\n<p>By default a file is emitted, however this can be disabled if required (e.g. for server side packages).</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">\'./file.png\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    emitFile<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️  Returns the public URL but does <strong>not</strong> emit a file</p>\n</blockquote>\n<pre><code><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>publicPath<span class="token punctuation">}</span>/0dcbbaa701328e351f.png<span class="token variable">`</span></span>\n</code></pre><h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">import</span> png <span class="token keyword">from</span> <span class="token string">\'image.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'dirname/[hash].[ext]\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code>dirname/0dcbbaa701328ae351f.png\n</code></pre><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[sha512:hash:base64:7].[ext]\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code>gdyb21L.png\n</code></pre><pre><code class="lang-js"><span class="token keyword">import</span> png <span class="token keyword">from</span> <span class="token string">\'path/to/file.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[path][name].[ext]?[hash]\'</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code>path/to/file.png?e43b20c069c4a01867c31e98cbce33c9\n</code></pre><h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"file-loader"},title:"file-loader",url:"/loaders/file-loader/"},{file:{attributes:{title:"gzip-loader",source:"https://raw.githubusercontent.com/webpack-contrib/gzip-loader/master/README.md",edit:"https://github.com/webpack-contrib/gzip-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/gzip-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>gzip loader module for webpack</p>\n<p>Enables loading gzipped resources.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev gzip-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.gz$/</span><span class="token punctuation">,</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">\'pre\'</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'gzip-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>bundle.js</strong></p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gzip-loader!./file.js.gz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/jdalton"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/4303?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      John-David Dalton\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"gzip-loader"},title:"gzip-loader",url:"/loaders/gzip-loader/"},{file:{attributes:{title:"html-loader",source:"https://raw.githubusercontent.com/webpack-contrib/html-loader/master/README.md",edit:"https://github.com/webpack-contrib/html-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/html-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Examples",id:"examples"},{title:"Interpolation",id:"interpolation"},{title:"Export formats",id:"export-formats"},{title:"Advanced options",id:"advanced-options"},{title:"Export into HTML files",id:"export-into-html-files"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Exports HTML as string. HTML is minimized when the compiler demands.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D html-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>By default every local <code>&lt;img src=&quot;image.png&quot;&gt;</code> is required (<code>require(&#39;./image.png&#39;)</code>). You may need to specify loaders for images in your configuration (recommended <code>file-loader</code> or <code>url-loader</code>).</p>\n<p>You can specify which tag-attribute combination should be processed by this loader via the query parameter <code>attrs</code>. Pass an array or a space-separated list of <code>&lt;tag&gt;:&lt;attribute&gt;</code> combinations. (Default: <code>attrs=img:src</code>)</p>\n<p>If you use <code>&lt;custom-elements&gt;</code>, and lots of them make use of a <code>custom-src</code> attribute, you don&#39;t have to specify each combination <code>&lt;tag&gt;:&lt;attribute&gt;</code>: just specify an empty tag like <code>attrs=:custom-src</code> and it will match every element.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.(html)$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\':data-src\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>To completely disable tag-attribute processing (for instance, if you&#39;re handling image loading on the client side) you can pass in <code>attrs=false</code>.</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>With this configuration:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.jpg$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"file-loader"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\\.png$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"url-loader?mimetype=image/png"</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token punctuation">:</span> <span class="token string">"http://cdn.example.com/[hash]/"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image.png<span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image2x.png<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img src="http://cdn.example.com/49eba9f/a992ca.png"</span>\n<span class="token comment">//         data-src="image2x.png">\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?attrs=img:data-src!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img src="image.png" data-src="data:image/png;base64,..." >\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?attrs=img:src img:data-src!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?attrs[]=img:src&amp;attrs[]=img:data-src!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="http://cdn.example.com/49eba9f/a992ca.png"        </span>\n<span class="token comment">//           data-src="data:image/png;base64,..." >\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?-attrs!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="image.jpg"  data-src="image2x.png" >\'</span>\n</code></pre>\n<p>minimized by running <code>webpack --optimize-minimize</code></p>\n<pre><code class="lang-html">\'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>http://cdn.example.com/49eba9f/a9f92ca.jpg</span>\n      <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span>data:image/png;base64,...</span><span class="token punctuation">></span></span>\'\n</code></pre>\n<p>or specify the <code>minimize</code> property in the rule&#39;s options in your <code>webpack.conf.js</code></p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        minimize<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The enabled rules for minimizing by default are the following ones:</p>\n<ul>\n<li>removeComments</li>\n<li>removeCommentsFromCDATA</li>\n<li>removeCDATASectionsFromCDATA</li>\n<li>collapseWhitespace</li>\n<li>conservativeCollapse</li>\n<li>removeAttributeQuotes</li>\n<li>useShortDoctype</li>\n<li>keepClosingSlash</li>\n<li>minifyJS</li>\n<li>minifyCSS</li>\n<li>removeScriptTypeAttributes</li>\n<li><p>removeStyleTypeAttributes</p>\n<p>The rules can be disabled using the following options in your <code>webpack.conf.js</code></p>\n</li>\n</ul>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n    use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        minimize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        removeComments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>##</p>\n<p>For urls that start with a <code>/</code>, the default behavior is to not translate them.\nIf a <code>root</code> query parameter is set, however, it will be prepended to the url\nand then translated.</p>\n<p>With the same configuration as above:</p>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/image.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="/image.jpg">\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?root=.!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// => \'&lt;img  src="http://cdn.example.com/49eba9f/a992ca.jpg">\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#interpolation" id="interpolation"></a><span class="text">Interpolation</span><a class="icon-link" href="#interpolation"></a></h3>\n<p>You can use <code>interpolate</code> flag to enable interpolation syntax for ES6 template strings, like so:</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?interpolate!./file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${require(`./images/gallery.png`)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>${require(\'./components/gallery.html\')}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>And if you only want to use <code>require</code> in template and any other <code>${}</code> are not to be translated, you can set <code>interpolate</code> flag to <code>require</code>, like so:</p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-loader?interpolate=require!./file.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">list</span> <span class="token attr-name">as</span> <span class="token attr-name">list</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${list.href!}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>${list.name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${require(`./images/gallery.png`)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>${require(\'./components/gallery.html\')}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#export-formats" id="export-formats"></a><span class="text">Export formats</span><a class="icon-link" href="#export-formats"></a></h3>\n<p>There are different export formats available:</p>\n<ul>\n<li><code>module.exports</code> (default, cjs format). &quot;Hello world&quot; becomes <code>module.exports = &quot;Hello world&quot;;</code></li>\n<li><code>exports.default</code> (when <code>exportAsDefault</code> param is set, es6to5 format). &quot;Hello world&quot; becomes <code>exports.default = &quot;Hello world&quot;;</code></li>\n<li><code>export default</code> (when <code>exportAsEs6Default</code> param is set, es6 format). &quot;Hello world&quot; becomes <code>export default &quot;Hello world&quot;;</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#advanced-options" id="advanced-options"></a><span class="text">Advanced options</span><a class="icon-link" href="#advanced-options"></a></h3>\n<p>If you need to pass <a href="https://github.com/webpack/html-loader/pull/46">more advanced options</a>, especially those which cannot be stringified, you can also define an <code>htmlLoader</code>-property on your <code>webpack.config.js</code>:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"html-loader"</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  htmlLoader<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ignoreCustomFragments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    root<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'img:src\'</span><span class="token punctuation">,</span> <span class="token string">\'link:href\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>If you need to define two different loader configs, you can also change the config&#39;s property name via <code>html-loader?config=otherHtmlLoaderConfig</code>:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"html-loader?config=otherHtmlLoaderConfig"</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  otherHtmlLoaderConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#export-into-html-files" id="export-into-html-files"></a><span class="text">Export into HTML files</span><a class="icon-link" href="#export-into-html-files"></a></h3>\n<p>A very common scenario is exporting the HTML into their own <em>.html</em> file, to\nserve them directly instead of injecting with javascript. This can be achieved\nwith a combination of 3 loaders:</p>\n<ul>\n<li><a href="/loaders/file-loader/">file-loader</a></li>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a></li>\n<li>html-loader</li>\n</ul>\n<p>The html-loader will parse the URLs, require the images and everything you\nexpect. The extract loader will parse the javascript back into a proper html\nfile, ensuring images are required and point to proper path, and the file loader\nwill write the <em>.html</em> file for you. Example:</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'file-loader?name=[path][name].[ext]!extract-loader!html-loader\'</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/18315?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/hemanth"></p>\n<p>Hemanth</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/8420490?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/5419992?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/michael-ciniawsky"></p>\n<p>Michael Ciniawsky</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/6542274?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/imvetri"></p>\n<p>Imvetri</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/1520965?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/andreicek"></p>\n<p>Andrei Crnković</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/3367801?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/abouthiroppy"></p>\n<p>Yuta Hiroto</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/80044?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/petrunov"></p>\n<p>Vesselin Petrunov</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/973543?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/gajus"></p>\n<p>Gajus Kuizinas</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<p></tbody></p>\n<p></table></p>\n',title:"html-loader"},title:"html-loader",url:"/loaders/html-loader/"},{file:{attributes:{title:"i18n-loader",source:"https://raw.githubusercontent.com/webpack-contrib/i18n-loader/master/README.md",edit:"https://github.com/webpack-contrib/i18n-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/i18n-loader",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"./colors.json",id:"-colors-json"},{title:"./de-de.colors.json",id:"-de-de-colors-json"},{title:"call it",id:"call-it"},{title:"options",id:"options"},{title:"alternative calls",id:"alternative-calls"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<h3 class="header"><a class="anchor" href="#-colors-json" id="-colors-json"></a><span class="text">./colors.json</span><a class="icon-link" href="#-colors-json"></a></h3>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"red"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>\n    <span class="token string">"green"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>\n    <span class="token string">"blue"</span><span class="token punctuation">:</span> <span class="token string">"blue"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#-de-de-colors-json" id="-de-de-colors-json"></a><span class="text">./de-de.colors.json</span><a class="icon-link" href="#-de-de-colors-json"></a></h3>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"red"</span><span class="token punctuation">:</span> <span class="token string">"rot"</span><span class="token punctuation">,</span>\n    <span class="token string">"green"</span><span class="token punctuation">:</span> <span class="token string">"gr�n"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#call-it" id="call-it"></a><span class="text">call it</span><a class="icon-link" href="#call-it"></a></h3>\n<pre><code class="lang-javascript"><span class="token comment">// assuming our locale is "de-de-berlin"</span>\n<span class="token keyword">var</span> locale <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n!./colors.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// wait for ready, this is only required once for all locales in a web app</span>\n<span class="token comment">// because all locales of the same language are merged into one chuck</span>\n<span class="token function">locale</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>locale<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints rot</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>locale<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints blue</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">options</span><a class="icon-link" href="#options"></a></h3>\n<p>You should tell the loader about all your locales, if you want to load them once\nand than want to use them synchronous.</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    <span class="token string">"i18n"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"locales"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"de"</span><span class="token punctuation">,</span>\n            <span class="token string">"de-de"</span><span class="token punctuation">,</span>\n            <span class="token string">"fr"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token comment">// "bundleTogether": false</span>\n        <span class="token comment">// this can disable the bundling of locales</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#alternative-calls" id="alternative-calls"></a><span class="text">alternative calls</span><a class="icon-link" href="#alternative-calls"></a></h3>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/choose!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// chooses the correct file by locale,</span>\n                    <span class="token comment">// but it do not merge the objects</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/concat!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// concatinate all fitting locales</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/merge!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// merges the resulting objects</span>\n                    <span class="token comment">// ./file.js is excuted while compiling</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n!./file.json"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"i18n/merge!json!./file.json"</span><span class="token punctuation">)</span>\n</code></pre>\n<p>Don&#39;t forget to polyfill <code>require</code> if you want to use it in node.\nSee <code>webpack</code> documentation.</p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT (<a href="http://www.opensource.org/licenses/mit-license.php">http://www.opensource.org/licenses/mit-license.php</a>)</p>\n',title:"i18n-loader"},title:"i18n-loader",url:"/loaders/i18n-loader/"},{file:{attributes:{title:"imports-loader",source:"https://raw.githubusercontent.com/webpack-contrib/imports-loader/master/README.md",edit:"https://github.com/webpack-contrib/imports-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/imports-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Multiple values",id:"multiple-values"},{title:"webpack.config.js",id:"webpack-config-js"},{title:"Typical Use Cases",id:"typical-use-cases"},{title:"jQuery plugins",id:"jquery-plugins"},{title:"Custom Angular modules",id:"custom-angular-modules"},{title:"Disable AMD",id:"disable-amd"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>The imports loader allows you to use modules that depend on specific global variables.</p>\n<p>This is useful for third-party modules that rely on global variables like <code>$</code> or <code>this</code> being the <code>window</code> object. The imports loader can add the necessary <code>require(&#39;whatever&#39;)</code> calls, so those modules work with webpack.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> imports-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>Given you have this file <code>example.js</code></p>\n<pre><code class="lang-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomeAwesomeJqueryPluginStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>then you can inject the <code>$</code> variable into the module by configuring the imports-loader like this:</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imports-loader?$=jquery!./example.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This simply prepends <code>var $ = require(&quot;jquery&quot;);</code> to <code>example.js</code>.</p>\n<p>##</p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Query value</div><div class="table-th">Equals</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Query value\n    </div>\n    <div class="table-td-content">\n        <code>angular</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Equals\n    </div>\n    <div class="table-td-content">\n        <code>var angular = require(&quot;angular&quot;);</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Query value\n    </div>\n    <div class="table-td-content">\n        <code>$=jquery</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Equals\n    </div>\n    <div class="table-td-content">\n        <code>var $ = require(&quot;jquery&quot;);</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Query value\n    </div>\n    <div class="table-td-content">\n        <code>define=&gt;false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Equals\n    </div>\n    <div class="table-td-content">\n        <code>var define = false;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Query value\n    </div>\n    <div class="table-td-content">\n        <code>config=&gt;{size:50}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Equals\n    </div>\n    <div class="table-td-content">\n        <code>var config = {size:50};</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Query value\n    </div>\n    <div class="table-td-content">\n        <code>this=&gt;window</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Equals\n    </div>\n    <div class="table-td-content">\n        <code>(function () { ... }).call(window);</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#multiple-values" id="multiple-values"></a><span class="text">Multiple values</span><a class="icon-link" href="#multiple-values"></a></h3>\n<p>Multiple values are separated by comma <code>,</code>:</p>\n<pre><code class="lang-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imports-loader?$=jquery,angular,config=>{size:50}!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#webpack-config-js" id="webpack-config-js"></a><span class="text">webpack.config.js</span><a class="icon-link" href="#webpack-config-js"></a></h3>\n<p>As always, you should rather configure this in your <code>webpack.config.js</code>:</p>\n<pre><code class="lang-javascript"><span class="token comment">// ./webpack.config.js</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"some-module"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token string">"imports-loader?this=>window"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#typical-use-cases" id="typical-use-cases"></a><span class="text">Typical Use Cases</span><a class="icon-link" href="#typical-use-cases"></a></h2>\n<h3 class="header"><a class="anchor" href="#jquery-plugins" id="jquery-plugins"></a><span class="text">jQuery plugins</span><a class="icon-link" href="#jquery-plugins"></a></h3>\n<p><code>imports-loader?$=jquery</code></p>\n<h3 class="header"><a class="anchor" href="#custom-angular-modules" id="custom-angular-modules"></a><span class="text">Custom Angular modules</span><a class="icon-link" href="#custom-angular-modules"></a></h3>\n<p><code>imports-loader?angular</code></p>\n<h3 class="header"><a class="anchor" href="#disable-amd" id="disable-amd"></a><span class="text">Disable AMD</span><a class="icon-link" href="#disable-amd"></a></h3>\n<p>There are many modules that check for a <code>define</code> function before using CommonJS. Since webpack is capable of both, they default to AMD in this case, which can be a problem if the implementation is quirky.</p>\n<p>Then you can easily disable the AMD path by writing</p>\n<pre><code class="lang-javascript">imports<span class="token operator">-</span>loader<span class="token operator">?</span>define<span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span>\n</code></pre>\n<p>For further hints on compatibility issues, check out <a href="http://webpack.github.io/docs/shimming-modules.html">Shimming Modules</a> of the official docs.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"imports-loader"},title:"imports-loader",url:"/loaders/imports-loader/"},{file:{attributes:{title:"istanbul-instrumenter-loader",source:"https://raw.githubusercontent.com/webpack-contrib/istanbul-instrumenter-loader/master/README.md",edit:"https://github.com/webpack-contrib/istanbul-instrumenter-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/istanbul-instrumenter-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Structure",id:"structure"},{title:"with Babel",id:"with-babel"},{title:"Options",id:"options"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Instrument JS files with <a href="https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument">istanbul-lib-instrument</a> for subsequent code coverage reporting</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D istanbul-instrumenter-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>##</p>\n<ul>\n<li><a href="https://github.com/webpack/karma-webpack">karma-webpack</a></li>\n<li><a href="https://github.com/mattlewis92/karma-coverage-istanbul-reporter">karma-coverage-istanbul-reporter</a></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#structure" id="structure"></a><span class="text"><code>Structure</code></span><a class="icon-link" href="#structure"></a></h3>\n<pre><code>├─ src\n│ <span class="token operator">|</span>– components\n│ <span class="token operator">|</span> <span class="token operator">|</span>– bar\n│ <span class="token operator">|</span> │ <span class="token operator">|</span>─ index.js\n│ <span class="token operator">|</span> <span class="token operator">|</span>– foo/\n│     <span class="token operator">|</span>– index.js\n<span class="token operator">|</span>– <span class="token function">test</span>\n<span class="token operator">|</span> <span class="token operator">|</span>– src\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– components\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– foo\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.js\n</code></pre><p>To create a code coverage report for all components (even for those for which you have no tests yet) you have to require all the 1) sources and 2) tests. Something like it&#39;s described in <a href="https://github.com/webpack/karma-webpack#alternative-usage">&quot;alternative usage&quot; of karma-webpack</a></p>\n<p><strong>test/index.js</strong></p>\n<pre><code class="lang-js"><span class="token comment">// requires all tests in `project/test/src/components</span><span class="token comment">/**/</span>index<span class="token punctuation">.</span>js`\n<span class="token keyword">const</span> tests <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'./src/components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/index\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntests<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>tests<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// requires all components in `project/src/components</span><span class="token comment">/**/</span>index<span class="token punctuation">.</span>js`\n<span class="token keyword">const</span> components <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../src/components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/index\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncomponents<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>components<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<blockquote>\n<p>ℹ️  This file will be the only <code>entry</code> point for <code>karma</code></p>\n</blockquote>\n<p><strong>karma.conf.js</strong></p>\n<pre><code class="lang-js">config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  files<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'test/index.js\'</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'test/index.js\'</span><span class="token punctuation">:</span> <span class="token string">\'webpack\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// instrument only testing sources with Istanbul</span>\n        <span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'istanbul-instrumenter-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src/components/\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  reporters<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'progress\'</span><span class="token punctuation">,</span> <span class="token string">\'coverage-istanbul\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  coverageIstanbulReporter<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    reports<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'text-summary\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    fixWebpackSourcePaths<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#with-babel" id="with-babel"></a><span class="text">with <code>Babel</code></span><a class="icon-link" href="#with-babel"></a></h3>\n<p>You must run the instrumentation as a post step</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$|\\.jsx$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'istanbul-instrumenter-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span> esModules<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  enforce<span class="token punctuation">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules|\\.spec\\.js$/</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text"><a href="https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter">Options</a></span><a class="icon-link" href="#options"></a></h2>\n<p>The loader supports all options supported by <code>istanbul-lib-instrument</code></p>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>debug</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Turn on debugging mode\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>compact</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Generate compact code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>autoWrap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set to <code>true</code> to allow return statements outside of functions\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>esModules</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set to <code>true</code> to instrument ES2015 Modules\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>coverageVariable</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>__coverage__</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Name of global coverage variable\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>preserveComments</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Preserve comments in <code>output</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>produceSourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set to <code>true</code> to produce a source map for the instrumented code\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMapUrlCallback</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>null</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        A callback function that is called when a source map URL is found in the original code. This function is called with the source filename and the source map URL\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">\'istanbul-instrumenter-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/u/266822?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/deepsweet"></p>\n<p>Kir Belevich</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/mattlewis92"></p>\n<p><img width="150" height="150" src="https://github.com/mattlewis92.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Matt Lewis\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"istanbul-instrumenter-loader"},title:"istanbul-instrumenter-loader",url:"/loaders/istanbul-instrumenter-loader/"},{file:{attributes:{title:"jshint-loader",source:"https://raw.githubusercontent.com/webpack-contrib/jshint-loader/master/README.md",edit:"https://github.com/webpack-contrib/jshint-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/jshint-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Custom reporter",id:"custom-reporter"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Runs <a href="http://jshint.com/">JSHint</a> on required JavaScript files.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i jshint-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Apply the jshint loader in your webpack configuration:</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span> <span class="token comment">// include .js files</span>\n                enforce<span class="token punctuation">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span> <span class="token comment">// preload the jshint loader</span>\n                exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span> <span class="token comment">// exclude any and all files in the node_modules folder</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"jshint-loader"</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// more options in the optional jshint object</span>\n    jshint<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// any jshint option http://www.jshint.com/docs/options/</span>\n        <span class="token comment">// i. e.</span>\n        camelcase<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// jshint errors are displayed by default as warnings</span>\n        <span class="token comment">// set emitErrors to true to display them as errors</span>\n        emitErrors<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// jshint to not interrupt the compilation</span>\n        <span class="token comment">// if you want any file with jshint errors to fail</span>\n        <span class="token comment">// set failOnHint to true</span>\n        failOnHint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// custom reporter function</span>\n        reporter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#custom-reporter" id="custom-reporter"></a><span class="text">Custom reporter</span><a class="icon-link" href="#custom-reporter"></a></h2>\n<p>By default, <code>jshint-loader</code> will provide a default reporter.</p>\n<p>However, if you prefer a custom reporter, pass a function under the <code>reporter</code> key in <code>jshint</code> options. (see <em>usage</em> above)</p>\n<p>The reporter function will be passed an array of errors/warnings produced by jshint\nwith the following structure:</p>\n<pre><code class="lang-js"><span class="token punctuation">[</span>\n<span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span>        <span class="token punctuation">[</span>string<span class="token punctuation">,</span> usually <span class="token string">\'(error)\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    code<span class="token punctuation">:</span>      <span class="token punctuation">[</span>string<span class="token punctuation">,</span> error<span class="token operator">/</span>warning code<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    reason<span class="token punctuation">:</span>    <span class="token punctuation">[</span>string<span class="token punctuation">,</span> error<span class="token operator">/</span>warning message<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    evidence<span class="token punctuation">:</span>  <span class="token punctuation">[</span>string<span class="token punctuation">,</span> a piece <span class="token keyword">of</span> code that generated <span class="token keyword">this</span> error<span class="token punctuation">]</span>\n    line<span class="token punctuation">:</span>      <span class="token punctuation">[</span>number<span class="token punctuation">]</span>\n    character<span class="token punctuation">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span>\n    scope<span class="token punctuation">:</span>     <span class="token punctuation">[</span>string<span class="token punctuation">,</span> message scope<span class="token punctuation">;</span>\n                usually <span class="token string">\'(main)\'</span> unless the code was eval\'ed<span class="token punctuation">]</span>\n\n    <span class="token punctuation">[</span><span class="token operator">+</span> a few other legacy fields that you don\'t need to worry about<span class="token punctuation">.</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// more errors/warnings</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p>The reporter function will be excuted with the loader context as <code>this</code>. You may emit messages using <code>this.emitWarning(...)</code> or <code>this.emitError(...)</code>. See <a href="https://webpack.js.org/api/loaders/#the-loader-context">webpack docs on loader context</a>.</p>\n<p><strong>Note:</strong> jshint reporters are <strong>not compatible</strong> with jshint-loader!\nThis is due to the fact that reporter input is only processed from one file; not multiple files. Error reporting in this manner differs from <a href="http://www.jshint.com/docs/reporters/">traditional reporters</a> for jshint\nsince the loader plugin (i.e. jshint-loader) is executed for each source file; and thus the reporter is executed for each file.</p>\n<p>The output in webpack CLI will usually be:</p>\n<pre><code class="lang-js"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\nWARNING <span class="token keyword">in</span> <span class="token punctuation">.</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>file<span class="token punctuation">.</span>js\n<span class="token operator">&lt;</span>reporter output<span class="token operator">></span>\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre>\n<p>`</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"jshint-loader"},title:"jshint-loader",url:"/loaders/jshint-loader/"},{file:{attributes:{title:"json-loader",source:"https://raw.githubusercontent.com/webpack-contrib/json-loader/master/README.md",edit:"https://github.com/webpack-contrib/json-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/json-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Configuration (recommended)",id:"configuration-recommended-"},{title:"Maintainer",id:"maintainer"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev json-loader\n</code></pre>\n<blockquote>\n<p>⚠️ <strong>Since <code>webpack &gt;= v2.0.0</code>, importing of JSON files will work by default. You might still want to use this if you use a custom file extension. See the <a href="https://webpack.js.org/guides/migrating/#json-loader-is-not-required-anymore">v1.0.0 -&gt; v2.0.0 Migration Guide</a> for more information</strong></p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>##</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'json-loader!./file.json\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#configuration-recommended-" id="configuration-recommended-"></a><span class="text"><code>Configuration</code> (recommended)</span><a class="icon-link" href="#configuration-recommended-"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./file.json\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.json$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'json-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainer" id="maintainer"></a><span class="text">Maintainer</span><a class="icon-link" href="#maintainer"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/sokra?v=3"></p>\n<p></br></p>\n<p><a href="https://github.com/sokra"></p>\n<p>Tobias Koppers</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<p></tbody></p>\n<p></table></p>\n',title:"json-loader"},title:"json-loader",url:"/loaders/json-loader/"},{file:{attributes:{title:"json5-loader",source:"https://raw.githubusercontent.com/webpack-contrib/json5-loader/master/README.md",edit:"https://github.com/webpack-contrib/json5-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/json5-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Usage with require statement loader prefix",id:"usage-with-require-statement-loader-prefix"},{title:"Maintainers",id:"maintainers"},{title:"LICENSE",id:"license"}],contributors:[],related:[]},body:'<p>A webpack loader for parsing <a href="http://json5.org/"><code>json5</code></a> files into JavaScript objects.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-sh">$ npm <span class="token function">install</span> --save-dev json5-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>You can use the loader either</p>\n<ul>\n<li>by configuring the <code>json5-loader</code> in the <code>module.loaders</code> object of the webpack configuration, or</li>\n<li>by directly using the <code>json5-loader!</code> prefix to the require statement.</li>\n</ul>\n<p>Suppose we have the following <code>json5</code> file</p>\n<pre><code class="lang-js"><span class="token comment">// appData.json5</span>\n<span class="token punctuation">{</span>\n  env<span class="token punctuation">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  passwordStrength<span class="token punctuation">:</span> <span class="token string">\'strong\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>###</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// make all files ending in .json5 use the `json5-loader`</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.json5$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'json5-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token comment">// index.js</span>\n<span class="token keyword">var</span> appConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./appData.json5\'</span><span class="token punctuation">)</span>\n<span class="token comment">// or, in ES6</span>\n<span class="token comment">// import appConfig from \'./appData.json5\'</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">.</span>env<span class="token punctuation">)</span> <span class="token comment">// \'production\'</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#usage-with-require-statement-loader-prefix" id="usage-with-require-statement-loader-prefix"></a><span class="text">Usage with require statement loader prefix</span><a class="icon-link" href="#usage-with-require-statement-loader-prefix"></a></h4>\n<pre><code class="lang-js"><span class="token keyword">var</span> appConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json5-loader!./appData.json5"</span><span class="token punctuation">)</span>\n<span class="token comment">// returns the content as json parsed object</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">.</span>env<span class="token punctuation">)</span> <span class="token comment">// \'production\'</span>\n</code></pre>\n<p>Don&#39;t forget to polyfill require if you want to use it in Node.js. See the webpack documentation.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/sokra?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/sokra"></p>\n<p>Tobias Koppers</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/gdi2290?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/gdi2290"></p>\n<p>PatrickJS</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150" src="https://avatars.githubusercontent.com/Cellule?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/Cellule"></p>\n<p>Michael Ferris</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/kmck?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/kmck"></p>\n<p>Keith McKnight</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/radubrehar?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/radubrehar"></p>\n<p>Radu Brehar</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/kentcdodds?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/kentcdodds"></p>\n<p>Kent C. Dodds</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars.githubusercontent.com/stevelacy?v=3"></p>\n<p><br /></p>\n<p><a href="https://github.com/stevelacy"></p>\n<p>Steve Lacy</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<p></tbody></p>\n<p></table></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">LICENSE</span><a class="icon-link" href="#license"></a></h2>\n<p>MIT</p>\n',title:"json5-loader"},title:"json5-loader",url:"/loaders/json5-loader/"},{file:{attributes:{title:"less-loader",source:"https://raw.githubusercontent.com/webpack-contrib/less-loader/master/README.md",edit:"https://github.com/webpack-contrib/less-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/less-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Examples",id:"examples"},{title:"Usage",id:"usage"},{title:"Imports",id:"imports"},{title:"webpack resolver",id:"webpack-resolver"},{title:"Non-Less imports",id:"non-less-imports"},{title:"Less resolver",id:"less-resolver"},{title:"Plugins",id:"plugins"},{title:"Extracting style sheets",id:"extracting-style-sheets"},{title:"Source maps",id:"source-maps"},{title:"CSS modules gotcha",id:"css-modules-gotcha"},{title:"Maintainer",id:"maintainer"}],contributors:[],related:[]},body:'<p align="center"><p>Compiles Less to CSS.</p>\n<p></p></p>\n<p>Use the <a href="/loaders/css-loader/">css-loader</a> or the <a href="/loaders/raw-loader/">raw-loader</a> to turn it into a JS module and the <a href="/plugins/extract-text-webpack-plugin/">ExtractTextPlugin</a> to extract it into a separate file.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev less-loader <span class="token function">less</span>\n</code></pre>\n<p>The less-loader requires <a href="https://github.com/less/less.js">less</a> as <a href="https://docs.npmjs.com/files/package.json#peerdependencies"><code>peerDependency</code></a>. Thus you are able to control the versions accurately.</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>Chain the less-loader with the <a href="/loaders/css-loader/">css-loader</a> and the <a href="/loaders/style-loader/">style-loader</a> to immediately apply all styles to the DOM.</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token comment">// creates style nodes from JS strings</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token comment">// translates CSS into CommonJS</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span> <span class="token comment">// compiles Less to CSS</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>You can pass any Less specific options to the less-loader via <a href="https://webpack.js.org/configuration/module/#rule-options-rule-query">loader options</a>. See the <a href="http://lesscss.org/usage/#command-line-usage-options">Less documentation</a> for all available options in dash-case. Since we&#39;re passing these options to Less programmatically, you need to pass them in camelCase here:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    strictMath<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                    noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Unfortunately, Less doesn&#39;t map all options 1-by-1 to camelCase. When in doubt, <a href="https://github.com/less/less.js/blob/3.x/bin/lessc">check their executable and search for the dash-case option</a>.</p>\n<p>##</p>\n<p>Usually, it&#39;s recommended to extract the style sheets into a dedicated file in production using the <a href="/plugins/extract-text-webpack-plugin/">ExtractTextPlugin</a>. This way your styles are not dependent on JavaScript:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> extractLess <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">"[name].[contenthash].css"</span><span class="token punctuation">,</span>\n    disable<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"development"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> extractLess<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token comment">// use style-loader in development</span>\n                fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        extractLess\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<h3 class="header"><a class="anchor" href="#imports" id="imports"></a><span class="text">Imports</span><a class="icon-link" href="#imports"></a></h3>\n<p>Starting with less-loader 4, you can now choose between Less&#39; builtin resolver and webpack&#39;s resolver. By default, webpack&#39;s resolver is used.</p>\n<h4 class="header"><a class="anchor" href="#webpack-resolver" id="webpack-resolver"></a><span class="text">webpack resolver</span><a class="icon-link" href="#webpack-resolver"></a></h4>\n<p>webpack provides an <a href="https://webpack.js.org/configuration/resolve/">advanced mechanism to resolve files</a>. The less-loader applies a Less plugin that passes all queries to the webpack resolver. Thus you can import your Less modules from <code>node_modules</code>. Just prepend them with a <code>~</code> which tells webpack to look up the <a href="https://webpack.js.org/configuration/resolve/#resolve-modules"><code>modules</code></a>.</p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"~bootstrap/less/bootstrap"</span><span class="token punctuation">;</span></span>\n</code></pre>\n<p>It&#39;s important to only prepend it with <code>~</code>, because <code>~/</code> resolves to the home-directory. webpack needs to distinguish between <code>bootstrap</code> and <code>~bootstrap</code>, because CSS and Less files have no special syntax for importing relative files. Writing <code>@import &quot;file&quot;</code> is the same as <code>@import &quot;./file&quot;;</code></p>\n<h5 class="header"><a class="anchor" href="#non-less-imports" id="non-less-imports"></a><span class="text">Non-Less imports</span><a class="icon-link" href="#non-less-imports"></a></h5>\n<p>Using webpack&#39;s resolver, you can import any file type. You just need a loader that exports valid Less code. Often, you will also want to set the <code>issuer</code> condition to ensure that this rule is only applied on imports originating from Less files:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n            issuer<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"js-to-less-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#less-resolver" id="less-resolver"></a><span class="text">Less resolver</span><a class="icon-link" href="#less-resolver"></a></h4>\n<p>If you specify the <code>paths</code> option, the less-loader will not use webpack&#39;s resolver. Modules, that can&#39;t be resolved in the local folder, will be searched in the given <code>paths</code>. This is Less&#39; default behavior. <code>paths</code> should be an array with absolute paths:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>In this case, all webpack features like importing non-Less files or aliasing won&#39;t work of course.</p>\n<h3 class="header"><a class="anchor" href="#plugins" id="plugins"></a><span class="text">Plugins</span><a class="icon-link" href="#plugins"></a></h3>\n<p>In order to use <a href="http://lesscss.org/usage/#plugins">plugins</a>, simply set the <code>plugins</code> option like this:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> CleanCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"less-plugin-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n            <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        <span class="token keyword">new</span> <span class="token class-name">CleanCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> advanced<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#extracting-style-sheets" id="extracting-style-sheets"></a><span class="text">Extracting style sheets</span><a class="icon-link" href="#extracting-style-sheets"></a></h3>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="https://webpack.js.org/concepts/hot-module-replacement/">hot module replacement</a> in development. In production, on the other hand, it&#39;s not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it&#39;s often still better to have them as separate files in your final production build.</p>\n<p>There are two possibilities to extract a style sheet from the bundle:</p>\n<ul>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a> (simpler, but specialized on the css-loader&#39;s output)</li>\n<li><a href="/plugins/extract-text-webpack-plugin/">extract-text-webpack-plugin</a> (more complex, but works in all use-cases)</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source maps</span><a class="icon-link" href="#source-maps"></a></h3>\n<p>To enable CSS source maps, you&#39;ll need to pass the <code>sourceMap</code> option to the less-loader <em>and</em> the css-loader. Your <code>webpack.config.js</code> should look like this:</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Also checkout the <a href="https://github.com/webpack-contrib/less-loader/tree/master/examples/sourceMaps">sourceMaps example</a>.</p>\n<p>If you want to edit the original Less files inside Chrome, <a href="https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0">there&#39;s a good blog post</a>. The blog post is about Sass but it also works for Less.</p>\n<h3 class="header"><a class="anchor" href="#css-modules-gotcha" id="css-modules-gotcha"></a><span class="text">CSS modules gotcha</span><a class="icon-link" href="#css-modules-gotcha"></a></h3>\n<p>There is a known problem with Less and <a href="https://github.com/css-modules/css-modules">CSS modules</a> regarding relative file paths in <code>url(...)</code> statements. <a href="https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335">See this issue for an explanation</a>.</p>\n<h2 class="header"><a class="anchor" href="#maintainer" id="maintainer"></a><span class="text">Maintainer</span><a class="icon-link" href="#maintainer"></a></h2>\n<table><tr><td align="center"><p><a href="https://github.com/jhnns"></p>\n<p><img width="150" height="150" src="https://github.com/jhnns.png?s=150"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/jhnns"></p>\n<p>Johannes Ewald</p>\n<p></a></p>\n<p></td></p>\n<tr><p></table></p>\n',title:"less-loader"},title:"less-loader",url:"/loaders/less-loader/"},{file:{attributes:{title:"bundle-loader",source:"https://raw.githubusercontent.com/webpack-contrib/bundle-loader/master/README.md",edit:"https://github.com/webpack-contrib/bundle-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/bundle-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"name",id:"name"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Bundle loader for webpack</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i bundle-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The chunk is requested, when you require the bundle.</p>\n<p><strong>file.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p>To wait until the chunk is available (and get the exports)\nyou need to async wait for it.</p>\n<pre><code class="lang-js"><span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment">// use the file like it was required</span>\n  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./file.js\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This wraps the <code>require(&#39;file.js&#39;)</code> in a <code>require.ensure</code> block</p>\n<p>Multiple callbacks can be added. They will be executed in the order of addition.</p>\n<pre><code class="lang-js"><span class="token function">bundle</span><span class="token punctuation">(</span>callbackTwo<span class="token punctuation">)</span>\n<span class="token function">bundle</span><span class="token punctuation">(</span>callbackThree<span class="token punctuation">)</span>\n</code></pre>\n<p>If a callback is added after dependencies were loaded, it will be called immediately.</p>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>lazy</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Loads the imported bundle asynchronously\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>name</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[id].[name]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Configure a custom filename for your imported bundle\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p>The file is requested when you require the <code>bundle-loader</code>. If you want it to request it lazy, use:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span>\n\n<span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<blockquote>\n<p>ℹ️  The chunk is not requested until you call the load function</p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#name" id="name"></a><span class="text"><code>name</code></span><a class="icon-link" href="#name"></a></h3>\n<p>You may set name for a bundle using the <code>name</code> options parameter.\nSee <a href="https://github.com/webpack/loader-utils#interpolatename">documentation</a>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[name]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:warning: chunks created by the loader will be named according to the\n<a href="https://webpack.js.org/configuration/output/#output-chunkfilename"><code>output.chunkFilename</code></a> rule, which defaults to <code>[id].[name]</code>. Here <code>[name]</code> corresponds to the chunk name set in the <code>name</code> options parameter.</p>\n</blockquote>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n   index<span class="token punctuation">:</span> <span class="token string">\'./App.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dest\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// or whatever other format you want</span>\n    chunkFilename<span class="token punctuation">:</span> <span class="token string">\'[name].[id].js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'my-chunk\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Normal chunks will show up using the <code>filename</code> rule above, and be named according to their <code>[chunkname]</code>.</p>\n<p>Chunks from <code>bundle-loader</code>, however will load using the <code>chunkFilename</code> rule, so the example files will produce <code>my-chunk.1.js</code> and <code>file-2.js</code> respectively.</p>\n<p>You can also use <code>chunkFilename</code> to add hash values to the filename, since putting <code>[hash]</code> in the bundle options parameter does not work correctly.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"bundle-loader"},title:"bundle-loader",url:"/loaders/bundle-loader/"},{file:{attributes:{title:"multi-loader",source:"https://raw.githubusercontent.com/webpack-contrib/multi-loader/master/README.md",edit:"https://github.com/webpack-contrib/multi-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/multi-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>This loader requires a module multiple times, each time loaded with a different loader. Like in a multi entry point the exports of the last item are exported.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i multi-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> multi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"multi-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">{</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                <span class="token comment">// Add CSS to the DOM</span>\n                <span class="token comment">// and</span>\n                <span class="token comment">// Return the raw content</span>\n                loader<span class="token punctuation">:</span> <span class="token function">multi</span><span class="token punctuation">(</span>\n                    <span class="token string">"style-loader!css-loader!autoprefixer-loader"</span><span class="token punctuation">,</span>\n                    <span class="token string">"raw-loader"</span>\n                <span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"multi-loader"},title:"multi-loader",url:"/loaders/multi-loader/"},{file:{attributes:{title:"node-loader",source:"https://raw.githubusercontent.com/webpack-contrib/node-loader/master/README.md",edit:"https://github.com/webpack-contrib/node-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/node-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"CLI",id:"cli"},{title:"Inline",id:"inline"},{title:"Maintainer",id:"maintainer"}],contributors:[],related:[]},body:'<p>Node Add-ons for webpack</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev node-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Executes <a href="https://nodejs.org/dist/latest/docs/api/addons.html">node add-ons</a> in <a href="https://github.com/webpack/enhanced-require">enhanced-require</a>.</p>\n<p>Use the loader either via your webpack config, CLI or inline.</p>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.node$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'node-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>In your application</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">\'file.node\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cli" id="cli"></a><span class="text">CLI</span><a class="icon-link" href="#cli"></a></h3>\n<pre><code class="lang-bash">webpack --module-bind <span class="token string">\'node=node-loader\'</span>\n</code></pre>\n<p><strong>In your application</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">\'file.node\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#inline" id="inline"></a><span class="text">Inline</span><a class="icon-link" href="#inline"></a></h3>\n<p><strong>In your application</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> node <span class="token keyword">from</span> <span class="token string">\'node-loader!./file.node\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainer" id="maintainer"></a><span class="text">Maintainer</span><a class="icon-link" href="#maintainer"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"node-loader"},title:"node-loader",url:"/loaders/node-loader/"},{file:{attributes:{title:"null-loader",source:"https://raw.githubusercontent.com/webpack-contrib/null-loader/master/README.md",edit:"https://github.com/webpack-contrib/null-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/null-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>A loader that returns an empty module.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i null-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>One use for this loader is to silence modules imported by a dependency. Say, for example, your project relies on an ES6 library that imports a polyfill you don&#39;t need, so removing it will cause no loss in functionality. Test for the path to the polyfill and it won&#39;t be included in your bundle:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'node_modules/library/polyfill.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'null-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"null-loader"},title:"null-loader",url:"/loaders/null-loader/"},{file:{attributes:{title:"polymer-webpack-loader",source:"https://raw.githubusercontent.com/webpack-contrib/polymer-webpack-loader/master/README.md",edit:"https://github.com/webpack-contrib/polymer-webpack-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/polymer-webpack-loader",group:"-",anchors:[{title:"Path Translations",id:"path-translations"},{title:"Configuring the Loader",id:"configuring-the-loader"},{title:"include: Condition(s)",id:"include-condition-s-"},{title:"exclude: Condition(s)",id:"exclude-condition-s-"},{title:"Options",id:"options"},{title:"ignoreLinks: Condition(s)",id:"ignorelinks-condition-s-"},{title:"ignorePathReWrite: Condition(s)",id:"ignorepathrewrite-condition-s-"},{title:"processStyleLinks Boolean",id:"processstylelinks-boolean"},{title:"htmlLoader: Object",id:"htmlloader-object"},{title:"Use with Babel (or other JS transpilers)",id:"use-with-babel-or-other-js-transpilers-"},{title:"Use of HtmlWebpackPlugin",id:"use-of-htmlwebpackplugin"},{title:"Shimming",id:"shimming"},{title:"Boostrapping Your Application",id:"boostrapping-your-application"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p><a href="https://badge.fury.io/js/polymer-webpack-loader"><img src="https://badge.fury.io/js/polymer-webpack-loader.svg" alt="npm version"></a>\n<a href="https://travis-ci.org/webpack-contrib/polymer-webpack-loader"><img src="https://travis-ci.org/webpack-contrib/polymer-webpack-loader.svg?branch=master" alt="build status"></a></p>\n<blockquote>\n<p><a href="https://www.polymer-project.org/">Polymer</a> component loader for <a href="https://webpack.js.org/">webpack</a>.</p>\n</blockquote>\n<p>The loader allows you to write mixed HTML, CSS and JavaScript Polymer elements and\nstill use the full webpack ecosystem including module bundling and code splitting.</p>\n<p><img width="1024" alt="" src="https://user-images.githubusercontent.com/1066253/28131928-3b257288-66f0-11e7-8295-cb968cefb040.png"></p>\n<p>The loader transforms your components:</p>\n<ul>\n<li><code>&lt;link rel=&quot;import&quot; href=&quot;./my-other-element.html&quot;&gt;</code> -&gt; <code>import &#39;./my-other-element.html&#39;;</code></li>\n<li><code>&lt;dom-module&gt;</code> becomes a string which is registered at runtime</li>\n<li><code>&lt;script src=&quot;./other-script.js&quot;&gt;&lt;/script&gt;</code> -&gt; <code>import &#39;./other-script.js&#39;;</code></li>\n<li><p><code>&lt;script&gt;/* contents */&lt;/script&gt;</code> -&gt; <code>/* contents */</code></p>\n<p>What does that mean?</p>\n<p>Any <code>&lt;link&gt;</code> &quot;href&quot; or <code>&lt;script&gt;</code> &quot;src&quot; that is <strong>not an external link</strong> and does not start with <code>~</code>, <code>/</code>, <code>./</code> or a series of <code>../</code> will have <code>./</code> appended to the beginning of the value. To prevent this change use options ignoreLinks below. </p>\n</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#path-translations" id="path-translations"></a><span class="text">Path Translations</span><a class="icon-link" href="#path-translations"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th"><code>tag</code></div><div class="table-th"><code>import</code></div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;./path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;/path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;/path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;../path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;../path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;./path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;./path/to/some-element.html&quot;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        <code>tag</code>\n    </div>\n    <div class="table-td-content">\n        <code>&lt;link rel=&quot;import&quot; href=&quot;~path/to/some-element.html&quot;&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        <code>import</code>\n    </div>\n    <div class="table-td-content">\n        <code>import &quot;~path/to/some-element.html&quot;</code>\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#configuring-the-loader" id="configuring-the-loader"></a><span class="text">Configuring the Loader</span><a class="icon-link" href="#configuring-the-loader"></a></h2>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  exclude<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ignoreLinks<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ignorePathReWrite<span class="token punctuation">:</span> <span class="token function">Condition</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    processStyleLinks<span class="token punctuation">:</span> Boolean <span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    htmlLoader<span class="token punctuation">:</span> Object <span class="token punctuation">(</span>optional<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'polymer-webpack-loader\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#include-condition-s-" id="include-condition-s-"></a><span class="text">include: Condition(s)</span><a class="icon-link" href="#include-condition-s-"></a></h3>\n<p>See [Rule.include] and [Condition] in the webpack documentation. Paths\nmatching this option will be processed by polymer-webpack-loader.  WARNING: If\nthis property exists the loader will only process files matching the given\nconditions. If your component has a <code>&lt;link&gt;</code> pointing to a component e.g. in\nanother directory, the <code>include</code> condition(s) MUST also match that directory.</p>\n<h3 class="header"><a class="anchor" href="#exclude-condition-s-" id="exclude-condition-s-"></a><span class="text">exclude: Condition(s)</span><a class="icon-link" href="#exclude-condition-s-"></a></h3>\n<p>See [Rule.exclude] and [Condition] in the webpack documentation. Paths\nmatching this option will be excluded from processing by\npolymer-webpack-loader. NOTE: Files imported through a <code>&lt;link&gt;</code> will not be\nexcluded by this property. See <code>Options.ignoreLinks</code>.</p>\n<h3 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h3>\n<h4 class="header"><a class="anchor" href="#ignorelinks-condition-s-" id="ignorelinks-condition-s-"></a><span class="text">ignoreLinks: Condition(s)</span><a class="icon-link" href="#ignorelinks-condition-s-"></a></h4>\n<p><code>&lt;link&gt;</code>s pointing to paths matching these conditions (see [Condition] in the\nwebpack documentation) will not be transformed into <code>import</code>s.</p>\n<h4 class="header"><a class="anchor" href="#ignorepathrewrite-condition-s-" id="ignorepathrewrite-condition-s-"></a><span class="text">ignorePathReWrite: Condition(s)</span><a class="icon-link" href="#ignorepathrewrite-condition-s-"></a></h4>\n<p><code>&lt;link&gt;</code> paths matching these conditions (see [Condition] in the webpack\ndocumentation) will not be changed when transformed into <code>import</code>s. This can\nbe useful for respecting aliases, loader syntax (e.g.\n<code>markup-inline-loader!./my-element.html</code>), or module paths.</p>\n<h4 class="header"><a class="anchor" href="#processstylelinks-boolean" id="processstylelinks-boolean"></a><span class="text">processStyleLinks Boolean</span><a class="icon-link" href="#processstylelinks-boolean"></a></h4>\n<p>If set to true the loader will rewrite <code>&lt;link import=&quot;css&quot; href=&quot;...&quot;&gt;</code> or <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code> that are inside the dom-module with <code>&lt;style&gt;require(&#39;...&#39;)&lt;/style&gt;</code>. This will allow for the file to be processed by loaders that are set up in the webpack config to handle their file type. </p>\n<ol>\n<li>Any <code>&lt;link&gt;</code> that is inside the <code>&lt;dom-module&gt;</code> but not in the <code>&lt;template&gt;</code> will be added to the <code>&lt;template&gt;</code> in the order the tags appear in the file.</li>\n</ol>\n<pre><code class="lang-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file1.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file2.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span>\n\n  would produce\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file1.css\'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'file2.css\'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span>\n</code></pre>\n<ol>\n<li>The loader will only replace a <code>&lt;link&gt;</code> if the href is a relative path. Any link attempting to access an external link i.e. <code>http</code>, <code>https</code> or <code>//</code> will not be replaced.</li>\n</ol>\n<h4 class="header"><a class="anchor" href="#htmlloader-object" id="htmlloader-object"></a><span class="text">htmlLoader: Object</span><a class="icon-link" href="#htmlloader-object"></a></h4>\n<p>Options to pass to the html-loader. See <a href="/loaders/html-loader/">html-loader</a>.</p>\n<h3 class="header"><a class="anchor" href="#use-with-babel-or-other-js-transpilers-" id="use-with-babel-or-other-js-transpilers-"></a><span class="text">Use with Babel (or other JS transpilers)</span><a class="icon-link" href="#use-with-babel-or-other-js-transpilers-"></a></h3>\n<p>If you&#39;d like to transpile the contents of your element&#39;s <code>&lt;script&gt;</code> block you can <a href="https://webpack.js.org/configuration/module/#rule-use">chain an additional loader</a>.</p>\n<pre><code class="lang-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// Chained loaders are applied last to first</span>\n        <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'polymer-webpack-loader\'</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// alternative syntax</span>\n\nmodule<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n      <span class="token comment">// Chained loaders are applied right to left</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader!polymer-webpack-loader\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#use-of-htmlwebpackplugin" id="use-of-htmlwebpackplugin"></a><span class="text">Use of HtmlWebpackPlugin</span><a class="icon-link" href="#use-of-htmlwebpackplugin"></a></h3>\n<p>Depending on how you configure the HtmlWebpackPlugin you may encounter conflicts with the polymer-webpack-loader. </p>\n<p>Example: </p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'html-loader\'</span><span class="token punctuation">,</span>\n  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.html$/</span><span class="token punctuation">,</span>  \n  loader<span class="token punctuation">:</span> <span class="token string">\'polymer-webpack-loader\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>This would expose your index.html file to the polymer-webpack-loader based on the process used by the html-loader. In this case you would need to exclude your html file from the polymer-webpack-loader or look for other ways to avoid this conflict. See: <a href="https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md">html-webpack-plugin template options</a></p>\n<h2 class="header"><a class="anchor" href="#shimming" id="shimming"></a><span class="text">Shimming</span><a class="icon-link" href="#shimming"></a></h2>\n<p>Not all Polymer Elements have been written to execute as a module and will\nrequire changes to work with webpack. The most common issue encountered is because modules do not execute\nin the global scope. Variables, functions and classes will no longer be global unless\nthey are declared as properties on the global object (window).</p>\n<pre><code class="lang-js"><span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// I\'m not global anymore</span>\nwindow<span class="token punctuation">.</span>myElement <span class="token operator">=</span> MyElement<span class="token punctuation">;</span> <span class="token comment">// Now I\'m global again</span>\n</code></pre>\n<p>For external library code, webpack provides <a href="https://webpack.js.org/guides/shimming/">shimming options</a>.</p>\n<ul>\n<li>Use the <a href="https://webpack.js.org/guides/shimming/#exports-loader">exports-loader</a> to\nadd a module export to components which expect a symbol to be global.</li>\n<li>Use the <a href="https://webpack.js.org/guides/shimming/#imports-loader">imports-loader</a> when a script\nexpects the <code>this</code> keyword to reference <code>window</code>.</li>\n<li>Use the <a href="https://webpack.js.org/guides/shimming/#provideplugin">ProvidePlugin</a> to add a module\nimport statement when a script expects a variable to be globally defined (but is now a module export).</li>\n<li>Use the <a href="https://webpack.js.org/plugins/normal-module-replacement-plugin/">NormalModuleReplacementPlugin</a>\nto have webpack swap a module-compliant version for a script.</li>\n</ul>\n<p>You may need to apply multiple shimming techniques to the same component.</p>\n<h2 class="header"><a class="anchor" href="#boostrapping-your-application" id="boostrapping-your-application"></a><span class="text">Boostrapping Your Application</span><a class="icon-link" href="#boostrapping-your-application"></a></h2>\n<p>The webcomponent polyfills must be added in a specific order. If you do not delay loading the main bundle with your components, you will see the following exceptions in the browser console:</p>\n<pre><code>Uncaught TypeError: Failed to construct <span class="token string">\'HTMLElement\'</span><span class="token keyword">:</span> Please use the <span class="token string">\'new\'</span> operator, this DOM object constructor cannot be called as a function.\n</code></pre><p>Reference the <a href="https://github.com/webpack-contrib/polymer-webpack-loader/blob/master/demo/src/index.ejs">demo html file</a>\nfor the proper loading sequence.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bryandcoulter"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/18359726?v=3"></p>\n<p></br></p>\n<pre><code>      Bryan Coulter\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/ChadKillingsworth"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/1247639?v=3"></p>\n<p></br></p>\n<pre><code>      Chad Killingsworth\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/robdodson"></p>\n<p><img width="150" height="150" src="https://avatars.githubusercontent.com/u/1066253?v=3"></p>\n<p></br></p>\n<pre><code>      Rob Dodson\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"polymer-webpack-loader"},title:"polymer-webpack-loader",url:"/loaders/polymer-webpack-loader/"},{file:{attributes:{title:"postcss-loader",source:"https://raw.githubusercontent.com/postcss/postcss-loader/master/README.md",edit:"https://github.com/postcss/postcss-loader/edit/master/README.md",repo:"https://github.com/postcss/postcss-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Config Cascade",id:"config-cascade"},{title:"Options",id:"options"},{title:"Exec",id:"exec"},{title:"Config",id:"config"},{title:"Path",id:"path"},{title:"Context (ctx)",id:"context-ctx-"},{title:"Plugins",id:"plugins"},{title:"Syntaxes",id:"syntaxes"},{title:"Parser",id:"parser"},{title:"Syntax",id:"syntax"},{title:"Stringifier",id:"stringifier"},{title:"SourceMap",id:"sourcemap"},{title:"'inline'",id:"-inline-"},{title:"Examples",id:"examples"},{title:"Stylelint",id:"stylelint"},{title:"CSS Modules",id:"css-modules"},{title:"CSS-in-JS",id:"css-in-js"},{title:"[Extract CSS][ExtractPlugin]",id:"-extract-css-extractplugin-"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>  <p>Loader for <a href="http://webpack.js.org/">webpack</a> to process CSS with <a href="http://postcss.org/">PostCSS</a></p>\n</div></p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D postcss-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>##</p>\n<p><strong>postcss.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  parser<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'postcss-import\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-cssnext\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'cssnano\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>You can read more about common PostCSS Config <a href="https://github.com/michael-ciniawsky/postcss-load-config">here</a>.</p>\n<h3 class="header"><a class="anchor" href="#config-cascade" id="config-cascade"></a><span class="text"><code>Config Cascade</code></span><a class="icon-link" href="#config-cascade"></a></h3>\n<p>You can use different <code>postcss.config.js</code> files in different directories.\nConfig lookup starts from <code>path.dirname(file)</code> and walks the file tree upwards until a config file is found.</p>\n<pre><code><span class="token operator">|</span>– components\n<span class="token operator">|</span> <span class="token operator">|</span>– component\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.js\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.png\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– style.css <span class="token punctuation">(</span>1<span class="token punctuation">)</span>\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– postcss.config.js <span class="token punctuation">(</span>1<span class="token punctuation">)</span>\n<span class="token operator">|</span> <span class="token operator">|</span>– component\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– index.js\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– image.png\n<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>– style.css <span class="token punctuation">(</span>2<span class="token punctuation">)</span>\n<span class="token operator">|</span>\n<span class="token operator">|</span>– postcss.config.js <span class="token punctuation">(</span>1 <span class="token operator">&amp;&amp;</span> 2 <span class="token punctuation">(</span>recommended<span class="token punctuation">))</span>\n<span class="token operator">|</span>– webpack.config.js\n<span class="token operator">|</span>\n<span class="token operator">|</span>– package.json\n</code></pre><p>After setting up your <code>postcss.config.js</code>, add <code>postcss-loader</code> to your <code>webpack.config.js</code>. You can use it standalone or in conjunction with <code>css-loader</code> (recommended). Use it <strong>after</strong> <code>css-loader</code> and <code>style-loader</code>, but <strong>before</strong> other preprocessor loaders like e.g <code>sass|less|stylus-loader</code>, if you use any.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'postcss-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️  When <code>postcss-loader</code> is used standalone (without <code>css-loader</code>) don&#39;t use <code>@import</code> in your CSS, since this can lead to quite bloated bundles</p>\n</blockquote>\n<p><strong>webpack.config.js (recommended)</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'postcss-loader\'</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#exec"><code>exec</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable PostCSS Parser support in <code>CSS-in-JS</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntaxes"><code>parser</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Parser\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntaxes"><code>syntax</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Syntax\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntaxes"><code>stringifier</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Stringifier\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#config"><code>config</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set <code>postcss.config.js</code> config path &amp;&amp; <code>ctx</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#plugins"><code>plugins</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set PostCSS Plugins\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#sourceMap"><code>sourceMap</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable Source Maps\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#exec" id="exec"></a><span class="text"><code>Exec</code></span><a class="icon-link" href="#exec"></a></h3>\n<p>If you use JS styles without the [<code>postcss-js</code>][postcss-js] parser, add the <code>exec</code> option.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.style.js$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> parser<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span><span class="token punctuation">,</span> exec<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#config" id="config"></a><span class="text"><code>Config</code></span><a class="icon-link" href="#config"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#path"><code>path</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        PostCSS Config Path\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#context"><code>context</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        PostCSS Config Context\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#path" id="path"></a><span class="text"><code>Path</code></span><a class="icon-link" href="#path"></a></h4>\n<p>You can manually specify the path to search for your config (<code>postcss.config.js</code>) with the <code>config.path</code> option. This is needed if you store your config  in a separate e.g <code>./config || ./.config</code> folder.</p>\n<blockquote>\n<p>⚠️  Otherwise it is <strong>unnecessary</strong> to set this option and is <strong>not</strong> recommended</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> <span class="token string">\'path/to/postcss.config.js\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#context-ctx-" id="context-ctx-"></a><span class="text"><code>Context (ctx)</code></span><a class="icon-link" href="#context-ctx-"></a></h4>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>env</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>&#39;development&#39;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>process.env.NODE_ENV</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>file</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>loader.resourcePath</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        <code>extname</code>, <code>dirname</code>, <code>basename</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <code>options</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Options\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p><code>postcss-loader</code> exposes context <code>ctx</code> to the config file, making your <code>postcss.config.js</code> dynamic, so can use it to do some real magic ✨</p>\n<p><strong>postcss.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> file<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  parser<span class="token punctuation">:</span> file<span class="token punctuation">.</span>extname <span class="token operator">===</span> <span class="token string">\'.sss\'</span> <span class="token operator">?</span> <span class="token string">\'sugarss\'</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'postcss-import\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> file<span class="token punctuation">.</span>dirname <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-cssnext\'</span><span class="token punctuation">:</span> options<span class="token punctuation">.</span>cssnext <span class="token operator">?</span> options<span class="token punctuation">.</span>cssnext <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string">\'autoprefixer\'</span><span class="token punctuation">:</span> env <span class="token operator">==</span> <span class="token string">\'production\'</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>autoprefixer <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string">\'cssnano\'</span><span class="token punctuation">:</span> env <span class="token operator">===</span> <span class="token string">\'production\'</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>cssnano <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      ctx<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        cssnext<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        cssnano<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        autoprefixer<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#plugins" id="plugins"></a><span class="text"><code>Plugins</code></span><a class="icon-link" href="#plugins"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ident<span class="token punctuation">:</span> <span class="token string">\'postcss\'</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span>loader<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> root<span class="token punctuation">:</span> loader<span class="token punctuation">.</span>resourcePath <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-cssnext\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'autoprefixer\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>⚠️  webpack requires an identifier (<code>ident</code>) in <code>options</code> when <code>{Function}/require</code> is used (Complex Options). The <code>ident</code> can be freely named as long as it is unique. It&#39;s recommended to name it (<code>ident: &#39;postcss&#39;</code>)</p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#syntaxes" id="syntaxes"></a><span class="text"><code>Syntaxes</code></span><a class="icon-link" href="#syntaxes"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#parser"><code>parser</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Custom PostCSS Parser\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#syntax"><code>syntax</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Custom PostCSS Syntax\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#stringifier"><code>stringifier</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Custom PostCSS Stringifier\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h4 class="header"><a class="anchor" href="#parser" id="parser"></a><span class="text"><code>Parser</code></span><a class="icon-link" href="#parser"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.sss$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> parser<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#syntax" id="syntax"></a><span class="text"><code>Syntax</code></span><a class="icon-link" href="#syntax"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> syntax<span class="token punctuation">:</span> <span class="token string">\'sugarss\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#stringifier" id="stringifier"></a><span class="text"><code>Stringifier</code></span><a class="icon-link" href="#stringifier"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> stringifier<span class="token punctuation">:</span> <span class="token string">\'midas\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>SourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p>Enables source map support, <code>postcss-loader</code> will use the previous source map given by other loaders and update it accordingly, if no previous loader is applied before <code>postcss-loader</code>, the loader will generate a source map for you.</p>\n<blockquote>\n<p>:warning: If a previous loader like e.g <code>sass-loader</code> is applied and it&#39;s <code>sourceMap</code> option is set, but the <code>sourceMap</code> option in <code>postcss-loader</code> is omitted, previous source maps will be discarded by <code>postcss-loader</code> <strong>entirely</strong>.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#-inline-" id="-inline-"></a><span class="text"><code>&#39;inline&#39;</code></span><a class="icon-link" href="#-inline-"></a></h4>\n<p>You can set the <code>sourceMap: &#39;inline&#39;</code> option to inline the source map\nwithin the CSS directly as an annotation comment.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token string">\'inline\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-css"><span class="token selector"><span class="token class">.class</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">/*# sourceMappingURL=data:application/json;base64, ... */</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<h3 class="header"><a class="anchor" href="#stylelint" id="stylelint"></a><span class="text"><code>Stylelint</code></span><a class="icon-link" href="#stylelint"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        ident<span class="token punctuation">:</span> <span class="token string">\'postcss\'</span><span class="token punctuation">,</span>\n        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'stylelint\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#css-modules" id="css-modules"></a><span class="text"><code>CSS Modules</code></span><a class="icon-link" href="#css-modules"></a></h3>\n<p>This loader [cannot be used] with [CSS Modules] out of the box due\nto the way <code>css-loader</code> processes file imports. To make them work properly,\neither add the css-loader’s [<code>importLoaders</code>] option.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>or use [postcss-modules] instead of <code>css-loader</code>.</p>\n<h3 class="header"><a class="anchor" href="#css-in-js" id="css-in-js"></a><span class="text"><code>CSS-in-JS</code></span><a class="icon-link" href="#css-in-js"></a></h3>\n<p>If you want to process styles written in JavaScript, use the [postcss-js] parser.</p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.style.js$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> parser<span class="token punctuation">:</span> <span class="token string">\'postcss-js\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'babel-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>As result you will be able to write styles in the following way</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> colors <span class="token keyword">from</span> <span class="token string">\'./styles/colors\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token string">\'.menu\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> colors<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n      <span class="token string">\'&amp;_link\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> <span class="token string">\'white\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>:warning: If you are using Babel you need to do the following in order for the setup to work</p>\n<ol>\n<li>Add [babel-plugin-add-module-exports] to your configuration</li>\n<li>You need to have only one <strong>default</strong> export per style module</li>\n</ol>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#-extract-css-extractplugin-" id="-extract-css-extractplugin-"></a><span class="text">[Extract CSS][ExtractPlugin]</span><a class="icon-link" href="#-extract-css-extractplugin-"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> importLoaders<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">\'postcss-loader\'</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'[name].css\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"postcss-loader"},title:"postcss-loader",url:"/loaders/postcss-loader/"},{file:{attributes:{title:"raw-loader",source:"https://raw.githubusercontent.com/webpack-contrib/raw-loader/master/README.md",edit:"https://github.com/webpack-contrib/raw-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/raw-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"CLI",id:"cli"},{title:"Inline",id:"inline"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>A loader for webpack that lets you import files as a string.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev raw-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Use the loader either via your webpack config, CLI or inline.</p>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.txt$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'raw-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>In your application</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> txt <span class="token keyword">from</span> <span class="token string">\'./file.txt\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cli" id="cli"></a><span class="text">CLI</span><a class="icon-link" href="#cli"></a></h3>\n<pre><code class="lang-bash">webpack --module-bind <span class="token string">\'txt=raw-loader\'</span>\n</code></pre>\n<p><strong>In your application</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> txt <span class="token keyword">from</span> <span class="token string">\'file.txt\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#inline" id="inline"></a><span class="text">Inline</span><a class="icon-link" href="#inline"></a></h3>\n<p><strong>In your application</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> txt <span class="token keyword">from</span> <span class="token string">\'raw-loader!./file.txt\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"raw-loader"},title:"raw-loader",url:"/loaders/raw-loader/"},{file:{attributes:{title:"react-proxy-loader",source:"https://raw.githubusercontent.com/webpack-contrib/react-proxy-loader/master/README.md",edit:"https://github.com/webpack-contrib/react-proxy-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/react-proxy-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Configuration",id:"configuration"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Wraps a react component in a proxy component to enable Code Splitting (loads a react component and its dependencies on demand).</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> react-proxy-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<pre><code class="lang-js"><span class="token keyword">var</span> Component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-proxy-loader!./Component"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// => returns the proxied component (It loads on demand.)</span>\n<span class="token comment">// (webpack creates an additional chunk for this component and its dependencies)</span>\n\n<span class="token keyword">var</span> ComponentProxyMixin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-proxy-loader!./Component"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Mixin<span class="token punctuation">;</span>\n<span class="token comment">// => returns a mixin for the proxied component</span>\n<span class="token comment">// (This allows you to setup rendering for the loading state for the proxy)</span>\n<span class="token keyword">var</span> ComponentProxy <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>ComponentProxyMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    renderUnavailable<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The proxy is a react component. All properties are transferred to the wrapped component.</p>\n<h2 class="header"><a class="anchor" href="#configuration" id="configuration"></a><span class="text">Configuration</span><a class="icon-link" href="#configuration"></a></h2>\n<p>Instead of (or in addition to) inlining the loader call you can also specify the proxied components in your configuration:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token comment">/* ... */</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token regex">/component\\.jsx$/</span><span class="token punctuation">,</span> <span class="token comment">// select component by RegExp</span>\n                    <span class="token regex">/\\.async\\.jsx$/</span><span class="token punctuation">,</span> <span class="token comment">// select component by extension</span>\n                    <span class="token string">"/abs/path/to/component.jsx"</span> <span class="token comment">// absolute path to component</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"react-proxy-loader"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>##</p>\n<p>You can give the chunk a name with the <code>name</code> query parameter:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> Component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-proxy-loader?name=chunkName!./Component"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"react-proxy-loader"},title:"react-proxy-loader",url:"/loaders/react-proxy-loader/"},{file:{attributes:{title:"restyle-loader",source:"https://raw.githubusercontent.com/webpack-contrib/restyle-loader/master/README.md",edit:"https://github.com/webpack-contrib/restyle-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/restyle-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<div align="center"><p>Updates style <code>&lt;link&gt;</code></p>\n<p> href value with a hash to trigger a style reload</p>\n<p></div></p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev restyle-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><a href="https://webpack.js.org/loaders/">Documentation: Using loaders</a></p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css?$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"restyle-loader"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        name<span class="token punctuation">:</span> <span class="token string">"[name].css?[hash:8]"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Hash is required to enable HMR</p>\n<p><strong>bundle.js</strong></p>\n<pre><code class="lang-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./index.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Bundle code here...</span>\n</code></pre>\n<p><strong>index.html</strong></p>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>after the loader runs it becomes</p>\n<pre><code class="lang-html">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css?531fdfd0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/"></p>\n<p><img width="150" height="150" src="https://avatars2.githubusercontent.com/u/7072732?v=3&s=150"></p>\n<p><br /></p>\n<p><a href="https://github.com/"></p>\n<p>Daniel Verejan</p>\n<p></a></p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"restyle-loader"},title:"restyle-loader",url:"/loaders/restyle-loader/"},{file:{attributes:{title:"sass-loader",source:"https://raw.githubusercontent.com/webpack-contrib/sass-loader/master/README.md",edit:"https://github.com/webpack-contrib/sass-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/sass-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Examples",id:"examples"},{title:"Usage",id:"usage"},{title:"Imports",id:"imports"},{title:"Problems with url(...)",id:"problems-with-url-"},{title:"Extracting style sheets",id:"extracting-style-sheets"},{title:"Source maps",id:"source-maps"},{title:"Environment variables",id:"environment-variables"},{title:"Maintainers",id:"maintainers"},{title:"License",id:"license"}],contributors:[],related:[]},body:'<p>Loads a SASS/SCSS file and compiles it to CSS.</p>\n<p>Use the <a href="/loaders/css-loader/">css-loader</a> or the <a href="/loaders/raw-loader/">raw-loader</a> to turn it into a JS module and the <a href="/plugins/extract-text-webpack-plugin/">ExtractTextPlugin</a> to extract it into a separate file.\nLooking for the webpack 1 loader? Check out the <a href="https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1">archive/webpack-1 branch</a>.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> sass-loader node-sass webpack --save-dev\n</code></pre>\n<p>The sass-loader requires <a href="https://github.com/sass/node-sass">node-sass</a> and <a href="https://github.com/webpack">webpack</a>\nas <a href="https://docs.npmjs.com/files/package.json#peerdependencies"><code>peerDependency</code></a>. Thus you are able to control the versions accurately.</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>Chain the sass-loader with the <a href="/loaders/css-loader/">css-loader</a> and the <a href="/loaders/style-loader/">style-loader</a> to immediately apply all styles to the DOM.</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token comment">// creates style nodes from JS strings</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token comment">// translates CSS into CommonJS</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span> <span class="token comment">// compiles Sass to CSS</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>You can also pass options directly to <a href="https://github.com/andrew/node-sass">node-sass</a> by specifying an <code>options</code> property like this:</p>\n<pre><code class="lang-js"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n                options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"absolute/path/a"</span><span class="token punctuation">,</span> <span class="token string">"absolute/path/b"</span><span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>See <a href="https://github.com/andrew/node-sass">node-sass</a> for all available Sass options.</p>\n<p>##</p>\n<p>Usually, it&#39;s recommended to extract the style sheets into a dedicated file in production using the <a href="/plugins/extract-text-webpack-plugin/">ExtractTextPlugin</a>. This way your styles are not dependent on JavaScript:</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> extractSass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">"[name].[contenthash].css"</span><span class="token punctuation">,</span>\n    disable<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"development"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> extractSass<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token comment">// use style-loader in development</span>\n                fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        extractSass\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<h3 class="header"><a class="anchor" href="#imports" id="imports"></a><span class="text">Imports</span><a class="icon-link" href="#imports"></a></h3>\n<p>webpack provides an <a href="https://webpack.js.org/concepts/module-resolution/">advanced mechanism to resolve files</a>. The sass-loader uses node-sass&#39; custom importer feature to pass all queries to the webpack resolving engine. Thus you can import your Sass modules from <code>node_modules</code>. Just prepend them with a <code>~</code> to tell webpack that this is not a relative import:</p>\n<pre><code class="lang-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"~bootstrap/dist/css/bootstrap"</span><span class="token punctuation">;</span></span>\n</code></pre>\n<p>It&#39;s important to only prepend it with <code>~</code>, because <code>~/</code> resolves to the home directory. webpack needs to distinguish between <code>bootstrap</code> and <code>~bootstrap</code> because CSS and Sass files have no special syntax for importing relative files. Writing <code>@import &quot;file&quot;</code> is the same as <code>@import &quot;./file&quot;;</code></p>\n<h3 class="header"><a class="anchor" href="#problems-with-url-" id="problems-with-url-"></a><span class="text">Problems with <code>url(...)</code></span><a class="icon-link" href="#problems-with-url-"></a></h3>\n<p>Since Sass/<a href="https://github.com/sass/libsass">libsass</a> does not provide <a href="https://github.com/sass/libsass/issues/532">url rewriting</a>, all linked assets must be relative to the output.</p>\n<ul>\n<li>If you&#39;re just generating CSS without passing it to the css-loader, it must be relative to your web root.</li>\n<li>If you pass the generated CSS on to the css-loader, all urls must be relative to the entry-file (e.g. <code>main.scss</code>).</li>\n</ul>\n<p>More likely you will be disrupted by this second issue. It is natural to expect relative references to be resolved against the <code>.scss</code> file in which they are specified (like in regular <code>.css</code> files). Thankfully there are a two solutions to this problem:</p>\n<ul>\n<li>Add the missing url rewriting using the <a href="https://github.com/bholloway/resolve-url-loader">resolve-url-loader</a>. Place it directly after the sass-loader in the loader chain.</li>\n<li>Library authors usually provide a variable to modify the asset path. <a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a> for example has an <code>$icon-font-path</code>. Check out <a href="https://github.com/webpack-contrib/sass-loader/tree/master/test/bootstrapSass">this working bootstrap example</a>.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#extracting-style-sheets" id="extracting-style-sheets"></a><span class="text">Extracting style sheets</span><a class="icon-link" href="#extracting-style-sheets"></a></h3>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="https://webpack.js.org/concepts/hot-module-replacement/">hot module replacement</a> in development. In production, on the other hand, it&#39;s not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it&#39;s often still better to have them as separate files in your final production build.</p>\n<p>There are two possibilities to extract a style sheet from the bundle:</p>\n<ul>\n<li><a href="https://github.com/peerigon/extract-loader">extract-loader</a> (simpler, but specialized on the css-loader&#39;s output)</li>\n<li><a href="/plugins/extract-text-webpack-plugin/">extract-text-webpack-plugin</a> (more complex, but works in all use-cases)</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#source-maps" id="source-maps"></a><span class="text">Source maps</span><a class="icon-link" href="#source-maps"></a></h3>\n<p>To enable CSS source maps, you&#39;ll need to pass the <code>sourceMap</code> option to the sass-loader <em>and</em> the css-loader. Your <code>webpack.config.js</code> should look like this:</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    devtool<span class="token punctuation">:</span> <span class="token string">"source-map"</span><span class="token punctuation">,</span> <span class="token comment">// any "source-map"-like devtool is possible</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            test<span class="token punctuation">:</span> <span class="token regex">/\\.scss$/</span><span class="token punctuation">,</span>\n            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>If you want to edit the original Sass files inside Chrome, <a href="https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0">there&#39;s a good blog post</a>. Checkout <a href="https://github.com/webpack-contrib/sass-loader/tree/master/test">test/sourceMap</a> for a running example.</p>\n<h3 class="header"><a class="anchor" href="#environment-variables" id="environment-variables"></a><span class="text">Environment variables</span><a class="icon-link" href="#environment-variables"></a></h3>\n<p>If you want to prepend Sass code before the actual entry file, you can set the <code>data</code> option. In this case, the sass-loader will not override the <code>data</code> option but just append the entry&#39;s content. This is especially useful when some of your Sass variables depend on the environment:</p>\n<pre><code class="lang-javascript"><span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        data<span class="token punctuation">:</span> <span class="token string">"$env: "</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">+</span> <span class="token string">";"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>Please note:</strong> Since you&#39;re injecting code, this will break the source mappings in your entry file. Often there&#39;s a simpler solution than this, like multiple Sass entry files.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tr><td align="center"><p><a href="https://github.com/jhnns"></p>\n<p><img width="150" height="150" src="https://avatars0.githubusercontent.com/u/781746?v=3"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/jhnns"></p>\n<p>Johannes Ewald</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/webpack-contrib"></p>\n<p><img width="150" height="150" src="https://avatars1.githubusercontent.com/u/1243901?v=3&s=460"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/webpack-contrib"></p>\n<p>Jorik Tangelder</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/akiran"></p>\n<p><img width="150" height="150" src="https://avatars1.githubusercontent.com/u/3403295?v=3"></p>\n<p></a></p>\n<p><br></p>\n<p><a href="https://github.com/akiran"></p>\n<p>Kiran</p>\n<p></a></p>\n<p></td></p>\n<tr><p></table></p>\n<h2 class="header"><a class="anchor" href="#license" id="license"></a><span class="text">License</span><a class="icon-link" href="#license"></a></h2>\n<p><a href="http://www.opensource.org/licenses/mit-license.php">MIT</a></p>\n',title:"sass-loader"},title:"sass-loader",url:"/loaders/sass-loader/"},{file:{attributes:{title:"script-loader",source:"https://raw.githubusercontent.com/webpack-contrib/script-loader/master/README.md",edit:"https://github.com/webpack-contrib/script-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/script-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Inline",id:"inline"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev script-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Executes JS script once in global context.</p>\n<blockquote>\n<p>:warning: Doesn&#39;t work in NodeJS</p>\n</blockquote>\n<p>##</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> exec <span class="token keyword">from</span> <span class="token string">\'script.exec.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.exec\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'script-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#inline" id="inline"></a><span class="text">Inline</span><a class="icon-link" href="#inline"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> exec <span class="token keyword">from</span> <span class="token string">\'script-loader!./script.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"script-loader"},title:"script-loader",url:"/loaders/script-loader/"},{file:{attributes:{title:"source-map-loader",source:"https://raw.githubusercontent.com/webpack-contrib/source-map-loader/master/README.md",edit:"https://github.com/webpack-contrib/source-map-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/source-map-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Extracts source maps from existing source files (from their <code>sourceMappingURL</code>).</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D source-map-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p><a href="https://webpack.js.org/concepts/#loaders">Documentation: Using loaders</a></p>\n<p>##</p>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"source-map-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">"pre"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>source-map-loader</code> extracts existing source maps from all JavaScript entries. This includes both inline source maps as well as those linked via URL. All source map data is passed to webpack for processing as per a chosen <a href="https://webpack.js.org/configuration/devtool/">source map style</a> specified by the <code>devtool</code> option in <a href="https://webpack.js.org/configuration/">webpack.config.js</a>.</p>\n<p>This loader is especially useful when using 3rd-party libraries having their own source maps. If not extracted and processed into the souce map of the webpack bundle, browsers may misinterpret source map data. <code>source-map-loader</code> allows webpack to maintain source map data continuity across libraries so ease of debugging is preserved.</p>\n<p><code>source-map-loader</code> will extract from any JavaScript file, including those in the <code>node_modules</code> directory. Be mindful in setting <a href="https://webpack.js.org/configuration/module/#rule-include">include</a> and <a href="https://webpack.js.org/configuration/module/#rule-exclude">exclude</a> rule conditions to maximize bundling performance.</p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"source-map-loader"},title:"source-map-loader",url:"/loaders/source-map-loader/"},{file:{attributes:{title:"style-loader",source:"https://raw.githubusercontent.com/webpack-contrib/style-loader/master/README.md",edit:"https://github.com/webpack-contrib/style-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/style-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Url",id:"url"},{title:"Useable",id:"useable"},{title:"Reference Counter API",id:"reference-counter-api"},{title:"Options",id:"options"},{title:"hmr",id:"hmr"},{title:"base",id:"base"},{title:"attrs",id:"attrs"},{title:"Url",id:"url"},{title:"transform",id:"transform"},{title:"Conditional",id:"conditional"},{title:"insertAt",id:"insertat"},{title:"insertInto",id:"insertinto"},{title:"singleton",id:"singleton"},{title:"sourceMap",id:"sourcemap"},{title:"convertToAbsoluteUrls",id:"converttoabsoluteurls"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Adds CSS to the DOM by injecting a <code>&lt;style&gt;</code> tag</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> style-loader --save-dev\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>It&#39;s recommended to combine <code>style-loader</code> with the <a href="/loaders/css-loader/"><code>css-loader</code></a></p>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>###</p>\n<p>When using <a href="https://github.com/webpack/css-loader#css-scope">local scoped CSS</a> the module exports the generated identifiers (locals).</p>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n\nstyle<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">"z849f98ca812"</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#url" id="url"></a><span class="text"><code>Url</code></span><a class="icon-link" href="#url"></a></h3>\n<p>It&#39;s also possible to add a URL <code>&lt;link href=&quot;path/to/file.css&quot; rel=&quot;stylesheet&quot;&gt;</code> instead of inlining the CSS <code>{String}</code> with <code>&lt;style&gt;&lt;/style&gt;</code> tag.</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">\'file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"style-loader/url"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/file.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n</code></pre>\n<blockquote>\n<p>:information_source: Source maps and assets referenced with <code>url</code>: when style loader is used with <code>{ options: { sourceMap: true } }</code> option, the CSS modules will be generated as <code>Blob</code>s, so relative paths don&#39;t work (they would be relative to <code>chrome:blob</code> or <code>chrome:devtools</code>). In order for assets to maintain correct paths setting <code>output.publicPath</code> property of webpack configuration must be set, so that absolute paths are generated. Alternatively you can enable the <code>convertToAbsoluteUrls</code> option mentioned above.</p>\n</blockquote>\n<h3 class="header"><a class="anchor" href="#useable" id="useable"></a><span class="text"><code>Useable</code></span><a class="icon-link" href="#useable"></a></h3>\n<p>By convention the <code>Reference Counter API</code> should be bound to <code>.useable.css</code> and the <code>.css</code> should be loaded with basic <code>style-loader</code> usage.(similar to other file types, i.e. <code>.useable.less</code> and <code>.less</code>).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"style-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.useable\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">"style-loader/useable"</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#reference-counter-api" id="reference-counter-api"></a><span class="text"><code>Reference Counter API</code></span><a class="icon-link" href="#reference-counter-api"></a></h4>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n\nstyle<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = style.ref();</span>\nstyle<span class="token punctuation">.</span><span class="token function">unuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = style.unref();</span>\n</code></pre>\n<p>Styles are not added on <code>import/require()</code>, but instead on call to <code>use</code>/<code>ref</code>. Styles are removed from page if <code>unuse</code>/<code>unref</code> is called exactly as often as <code>use</code>/<code>ref</code>.</p>\n<p>:warning: Behavior is undefined when <code>unuse</code>/<code>unref</code> is called more often than <code>use</code>/<code>ref</code>. Don&#39;t do that.</p>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>hmr</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/disable Hot Module Replacement (HMR), if disabled no HMR Code will be added (good for non local development/production)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>base</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>true</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set module ID base (DLLPlugin)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>attrs</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>{}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Add custom attrs to <code>&lt;style&gt;&lt;/style&gt;</code>\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>transform</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Function}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Transform/Conditionally load CSS by passing a transform/condition function\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>insertAt</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Object}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>bottom</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Inserts <code>&lt;style&gt;&lt;/style&gt;</code> at the given position\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>insertInto</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>&lt;head&gt;</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Inserts <code>&lt;style&gt;&lt;/style&gt;</code> into the given position\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>singleton</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Reuses a single <code>&lt;style&gt;&lt;/style&gt;</code> element, instead of adding/removing individual elements for each required module.\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Enable/Disable Sourcemaps\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>convertToAbsoluteUrls</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Converts relative URLs to absolute urls, when source maps are enabled\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#hmr" id="hmr"></a><span class="text"><code>hmr</code></span><a class="icon-link" href="#hmr"></a></h3>\n<p>Enable/disable Hot Module Replacement (HMR), if disabled no HMR Code will be added.\nThis could be used for non local development and production.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hmr<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#base" id="base"></a><span class="text"><code>base</code></span><a class="icon-link" href="#base"></a></h3>\n<p>This setting is primarily used as a workaround for <a href="https://github.com/webpack-contrib/style-loader/issues/163">css clashes</a> when using one or more <a href="https://robertknight.github.io/posts/webpack-dll-plugins/">DllPlugin</a>&#39;s.  <code>base</code> allows you to prevent either the <em>app</em>&#39;s css (or <em>DllPlugin2</em>&#39;s css) from overwriting <em>DllPlugin1</em>&#39;s css by specifying a css module id base which is greater than the range used by <em>DllPlugin1</em> e.g.:</p>\n<p><strong>webpack.dll1.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'css-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>webpack.dll2.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'css-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>webpack.app.config.js</strong></p>\n<pre><code><span class="token punctuation">{</span>\n  test: /\\.css$/,\n  use: <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader: <span class="token string">\'style-loader\'</span>, options: <span class="token punctuation">{</span> base: 2000 <span class="token punctuation">}</span> <span class="token punctuation">}</span>,\n    <span class="token string">\'css-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><h3 class="header"><a class="anchor" href="#attrs" id="attrs"></a><span class="text"><code>attrs</code></span><a class="icon-link" href="#attrs"></a></h3>\n<p>If defined, style-loader will attach given attributes with their values on <code>&lt;style&gt;</code> / <code>&lt;link&gt;</code> element.</p>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#url" id="url"></a><span class="text"><code>Url</code></span><a class="icon-link" href="#url"></a></h4>\n<p><strong>component.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> link <span class="token keyword">from</span> <span class="token string">\'./file.css\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'style-loader/url\'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#transform" id="transform"></a><span class="text"><code>transform</code></span><a class="icon-link" href="#transform"></a></h3>\n<p>A <code>transform</code> is a function that can modify the css just before it is loaded into the page by the style-loader.\nThis function will be called on the css that is about to be loaded and the return value of the function will be loaded into the page instead of the original css.\nIf the return value of the <code>transform</code> function is falsy, the css will not be loaded into the page at all.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transform<span class="token punctuation">:</span> <span class="token string">\'path/to/transform.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>transform.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Here we can change the original css</span>\n  <span class="token keyword">const</span> transformed <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'.classNameA\'</span><span class="token punctuation">,</span> <span class="token string">\'.classNameB\'</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> transformed\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 class="header"><a class="anchor" href="#conditional" id="conditional"></a><span class="text"><code>Conditional</code></span><a class="icon-link" href="#conditional"></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transform<span class="token punctuation">:</span> <span class="token string">\'path/to/conditional.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>conditional.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// If the condition is matched load [and transform] the CSS</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>css<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'something I want to check\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> css<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// If a falsy value is returned, the CSS won\'t be loaded</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#insertat" id="insertat"></a><span class="text"><code>insertAt</code></span><a class="icon-link" href="#insertat"></a></h3>\n<p>By default, the style-loader appends <code>&lt;style&gt;</code> elements to the end of the style target, which is the <code>&lt;head&gt;</code> tag of the page unless specified by <code>insertInto</code>. This will cause CSS created by the loader to take priority over CSS already present in the target. To insert style elements at the beginning of the target, set this query parameter to &#39;top&#39;, e.g</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    insertAt<span class="token punctuation">:</span> <span class="token string">\'top\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>A new <code>&lt;style&gt;</code> element can be inserted before a specific element by passing an object, e.g.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    insertAt<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        before<span class="token punctuation">:</span> <span class="token string">\'#id\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#insertinto" id="insertinto"></a><span class="text"><code>insertInto</code></span><a class="icon-link" href="#insertinto"></a></h3>\n<p>By default, the style-loader inserts the <code>&lt;style&gt;</code> elements into the <code>&lt;head&gt;</code> tag of the page. If you want the tags to be inserted somewhere else you can specify a CSS selector for that element here. If you target an <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement">IFrame</a> make sure you have sufficient access rights, the styles will be injected into the content document head.\nYou can also insert the styles into a <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot">ShadowRoot</a>, e.g</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    insertInto<span class="token punctuation">:</span> <span class="token string">\'#host::shadow>#root\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#singleton" id="singleton"></a><span class="text"><code>singleton</code></span><a class="icon-link" href="#singleton"></a></h3>\n<p>If defined, the style-loader will reuse a single <code>&lt;style&gt;&lt;/style&gt;</code> element, instead of adding/removing individual elements for each required module.</p>\n<blockquote>\n<p>ℹ️  This option is on by default in IE9, which has strict limitations on the number of style tags allowed on a page. You can enable or disable it with the singleton option.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    singleton<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#sourcemap" id="sourcemap"></a><span class="text"><code>sourceMap</code></span><a class="icon-link" href="#sourcemap"></a></h3>\n<p>Enable/Disable source map loading</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#converttoabsoluteurls" id="converttoabsoluteurls"></a><span class="text"><code>convertToAbsoluteUrls</code></span><a class="icon-link" href="#converttoabsoluteurls"></a></h3>\n<p>If convertToAbsoluteUrls and sourceMaps are both enabled, relative urls will be converted to absolute urls right before the css is injected into the page. This resolves <a href="https://github.com/webpack/style-loader/pull/96">an issue</a> where relative resources fail to load when source maps are enabled. You can enable it with the convertToAbsoluteUrls option.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    convertToAbsoluteUrls<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/sapegin"></p>\n<p><img width="150" height="150" src="https://github.com/sapegin.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Artem Sapegin\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tr><td align="center"><p><a href="https://github.com/sokra"></p>\n<p><img width="150" height="150" src="https://github.com/sokra.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Tobias Koppers\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/SpaceK33z"></p>\n<p><img width="150" height="150" src="https://github.com/SpaceK33z.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Kees Kluskens\n</code></pre><p></a></p>\n<p></td></p>\n<tr><tbody><p></table></p>\n',title:"style-loader"},title:"style-loader",url:"/loaders/style-loader/"},{file:{attributes:{title:"svg-inline-loader",source:"https://raw.githubusercontent.com/webpack-contrib/svg-inline-loader/master/README.md",edit:"https://github.com/webpack-contrib/svg-inline-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/svg-inline-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Configuration",id:"configuration"},{title:"Query Options",id:"query-options"},{title:"removingTags: [...string]",id:"removingtags-string-"},{title:"warnTags: [...string]",id:"warntags-string-"},{title:"removeSVGTagAttrs: boolean",id:"removesvgtagattrs-boolean"},{title:"removingTagAttrs: [...string]",id:"removingtagattrs-string-"},{title:"warnTagAttrs: [...string]",id:"warntagattrs-string-"},{title:"classPrefix: boolean || string",id:"classprefix-boolean-string"},{title:"idPrefix: boolean || string",id:"idprefix-boolean-string"},{title:"Example Usage",id:"example-usage"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>This Webpack loader inlines SVG as module. If you use Adobe suite or Sketch to export SVGs, you will get auto-generated, unneeded crusts. This loader removes it for you, too.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> svg-inline-loader --save-dev\n</code></pre>\n<h2 class="header"><a class="anchor" href="#configuration" id="configuration"></a><span class="text">Configuration</span><a class="icon-link" href="#configuration"></a></h2>\n<p>Simply add configuration object to <code>module.loaders</code> like this.</p>\n<pre><code class="lang-javascript">    <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.svg$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'svg-inline-loader\'</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n<p>warning: You should configure this loader only once via <code>module.loaders</code> or <code>require(&#39;!...&#39;)</code>. See <a href="https://github.com/webpack-contrib/svg-inline-loader/issues/15">#15</a> for detail.</p>\n<h2 class="header"><a class="anchor" href="#query-options" id="query-options"></a><span class="text">Query Options</span><a class="icon-link" href="#query-options"></a></h2>\n<p>###</p>\n<p>Removes specified tags and its children. You can specify tags by setting <code>removingTags</code> query array.</p>\n<p>default: <code>removeTags: false</code></p>\n<h4 class="header"><a class="anchor" href="#removingtags-string-" id="removingtags-string-"></a><span class="text"><code>removingTags: [...string]</code></span><a class="icon-link" href="#removingtags-string-"></a></h4>\n<p>warning: this won&#39;t work unless you specify <code>removeTags: true</code></p>\n<p>default: <code>removingTags: [&#39;title&#39;, &#39;desc&#39;, &#39;defs&#39;, &#39;style&#39;]</code></p>\n<h4 class="header"><a class="anchor" href="#warntags-string-" id="warntags-string-"></a><span class="text"><code>warnTags: [...string]</code></span><a class="icon-link" href="#warntags-string-"></a></h4>\n<p>warns about tags, ex: [&#39;desc&#39;, &#39;defs&#39;, &#39;style&#39;]</p>\n<p>default: <code>warnTags: []</code></p>\n<h4 class="header"><a class="anchor" href="#removesvgtagattrs-boolean" id="removesvgtagattrs-boolean"></a><span class="text"><code>removeSVGTagAttrs: boolean</code></span><a class="icon-link" href="#removesvgtagattrs-boolean"></a></h4>\n<p>Removes <code>width</code> and <code>height</code> attributes from <code>&lt;svg /&gt;</code>.</p>\n<p>default: <code>removeSVGTagAttrs: true</code></p>\n<h4 class="header"><a class="anchor" href="#removingtagattrs-string-" id="removingtagattrs-string-"></a><span class="text"><code>removingTagAttrs: [...string]</code></span><a class="icon-link" href="#removingtagattrs-string-"></a></h4>\n<p>Removes attributes from inside the <code>&lt;svg /&gt;</code>.</p>\n<p>default: <code>removingTagAttrs: []</code></p>\n<h4 class="header"><a class="anchor" href="#warntagattrs-string-" id="warntagattrs-string-"></a><span class="text"><code>warnTagAttrs: [...string]</code></span><a class="icon-link" href="#warntagattrs-string-"></a></h4>\n<p>Warns to console about attributes from inside the <code>&lt;svg /&gt;</code>.</p>\n<p>default: <code>warnTagAttrs: []</code></p>\n<h4 class="header"><a class="anchor" href="#classprefix-boolean-string" id="classprefix-boolean-string"></a><span class="text"><code>classPrefix: boolean || string</code></span><a class="icon-link" href="#classprefix-boolean-string"></a></h4>\n<p>Adds a prefix to class names to avoid collision across svg files.</p>\n<p>default: <code>classPrefix: false</code></p>\n<h4 class="header"><a class="anchor" href="#idprefix-boolean-string" id="idprefix-boolean-string"></a><span class="text"><code>idPrefix: boolean || string</code></span><a class="icon-link" href="#idprefix-boolean-string"></a></h4>\n<p>Adds a prefix to ids to avoid collision across svg files.</p>\n<p>default: <code>idPrefix: false</code></p>\n<h2 class="header"><a class="anchor" href="#example-usage" id="example-usage"></a><span class="text">Example Usage</span><a class="icon-link" href="#example-usage"></a></h2>\n<pre><code class="lang-js"><span class="token comment">// Using default hashed prefix (__[hash:base64:7]__)</span>\n<span class="token keyword">var</span> logoTwo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svg-inline-loader?classPrefix!./logo_two.svg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Using custom string</span>\n<span class="token keyword">var</span> logoOne <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svg-inline-loader?classPrefix=my-prefix-!./logo_one.svg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Using custom string and hash</span>\n<span class="token keyword">var</span> logoThree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svg-inline-loader?classPrefix=__prefix-[sha512:hash:hex:5]__!./logo_three.svg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>See <a href="https://github.com/webpack/loader-utils#interpolatename">loader-utils</a> for hash options.</p>\n<p>Preferred usage is via a <code>module.loaders</code>:</p>\n<pre><code class="lang-js">    <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.svg$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'svg-inline-loader?classPrefix\'</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"svg-inline-loader"},title:"svg-inline-loader",url:"/loaders/svg-inline-loader/"},{file:{attributes:{title:"thread-loader",source:"https://raw.githubusercontent.com/webpack-contrib/thread-loader/master/README.md",edit:"https://github.com/webpack-contrib/thread-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/thread-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Examples",id:"examples"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Runs the following loaders in a worker pool.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev thread-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>Put this loader in front of other loaders. The following loaders run in a worker pool.</p>\n<p>Loaders running in a worker pool are limited. Examples:</p>\n<ul>\n<li>Loaders cannot emit files.</li>\n<li>Loaders cannot use custom loader API (i. e. by plugins).</li>\n<li>Loaders cannot access the webpack options.</li>\n</ul>\n<p>Each worker is a separate node.js process, which has an overhead of ~600ms. There is also an overhead of inter-process communication.</p>\n<p>Use this loader only for expensive operations!</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"expensive-loader"</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>with options</strong></p>\n<pre><code class="lang-js">use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token punctuation">:</span> <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n    <span class="token comment">// loaders with equal options will share worker pools</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// the number of spawned workers, defaults to number of cpus</span>\n      workers<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// number of jobs a worker processes in parallel</span>\n      <span class="token comment">// defaults to 20</span>\n      workerParallelJobs<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// additional node.js arguments</span>\n      workerNodeArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'--max-old-space-size=1024\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// timeout for killing the worker processes when idle</span>\n      <span class="token comment">// defaults to 500 (ms)</span>\n      <span class="token comment">// can be set to Infinity for watching builds to keep workers alive</span>\n      poolTimeout<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// number of jobs the poll distributes to the workers</span>\n      <span class="token comment">// defaults to 200</span>\n      <span class="token comment">// decrease of less efficient but more fair distribution</span>\n      poolParallelJobs<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// name of the pool</span>\n      <span class="token comment">// can be used to create different pools with elsewise identical options</span>\n      name<span class="token punctuation">:</span> <span class="token string">"my-pool"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"expensive-loader"</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<p><strong>prewarming</strong></p>\n<p>To prevent the high delay when booting workers it possible to warmup the worker pool.</p>\n<p>This boots the max number of workers in the pool and loads specified modules into the node.js module cache.</p>\n<pre><code class="lang-js"><span class="token keyword">const</span> threadLoader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'thread-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nthreadLoader<span class="token punctuation">.</span><span class="token function">warmup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// pool options, like passed to loader options</span>\n  <span class="token comment">// must match loader options to boot the correct pool</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token comment">// modules to load</span>\n  <span class="token comment">// can be any module, i. e.</span>\n  <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'babel-preset-es2015\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/sokra"></p>\n<p><img width="150" height="150" src="https://github.com/sokra.png?size=150"></p>\n<p></br></p>\n<pre><code>      sokra\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"thread-loader"},title:"thread-loader",url:"/loaders/thread-loader/"},{file:{attributes:{title:"transform-loader",source:"https://raw.githubusercontent.com/webpack-contrib/transform-loader/master/README.md",edit:"https://github.com/webpack-contrib/transform-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/transform-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"webpack 2 config example",id:"webpack-2-config-example"},{title:"webpack 1 config example",id:"webpack-1-config-example"},{title:"Typical brfs Example",id:"typical-brfs-example"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Use <a href="https://github.com/substack/node-browserify/wiki/list-of-transforms">browserify transforms</a> as webpack-loader.</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i transform-loader --save\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>Pass the module name as query parameter.</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"!transform-loader?brfs!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"!transform-loader/cacheable?brfs!./file.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cacheable version</span>\n</code></pre>\n<p>If you pass a number instead it will take the function from <code>this.options.transforms[number]</code>.</p>\n<h2 class="header"><a class="anchor" href="#webpack-2-config-example" id="webpack-2-config-example"></a><span class="text">webpack 2 config example</span><a class="icon-link" href="#webpack-2-config-example"></a></h2>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?brfs"</span><span class="token punctuation">,</span>\n        enforce<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n              <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token comment">/*file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>\n                          buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>chunk<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                              <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader/cacheable?coffeeify"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n              <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token comment">/*file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>\n                          buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>chunk<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                              <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.weirdjs$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?0"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n              <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token comment">/*file*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>\n                          buffer<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>chunk<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                              <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#webpack-1-config-example" id="webpack-1-config-example"></a><span class="text">webpack 1 config example</span><a class="icon-link" href="#webpack-1-config-example"></a></h2>\n<pre><code class="lang-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        postLoaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?brfs"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.coffee$/</span><span class="token punctuation">,</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"transform-loader/cacheable?coffeeify"</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.weirdjs$/</span><span class="token punctuation">,</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?0"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    transforms<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">through</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token operator">-</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#typical-brfs-example" id="typical-brfs-example"></a><span class="text">Typical brfs Example</span><a class="icon-link" href="#typical-brfs-example"></a></h2>\n<p>Say you have the following Node source:</p>\n<pre><code class="lang-js"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'./test.txt\'</span><span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>After <code>npm install transform-loader brfs --save</code>, add the following loader to your config:</p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n    entry<span class="token punctuation">:</span> <span class="token string">"./index.js"</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n                loader<span class="token punctuation">:</span> <span class="token string">"transform-loader?brfs"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The loader is applied to all JS files, which can incur a performance hit with watch tasks. So you may want to use <code>transform-loader/cacheable?brfs</code> instead. </p>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"transform-loader"},title:"transform-loader",url:"/loaders/transform-loader/"},{file:{attributes:{title:"url-loader",source:"https://raw.githubusercontent.com/webpack-contrib/url-loader/master/README.md",edit:"https://github.com/webpack-contrib/url-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/url-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"mimetype",id:"mimetype"},{title:"fallback",id:"fallback"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Loads files as <code>base64</code> encoded URL</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev url-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>The <code>url-loader</code> works like the <a href="/loaders/file-loader/"><code>file-loader</code></a>, but can return a DataURL if the file is smaller than a byte limit.</p>\n<pre><code class="lang-js"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">\'./image.png\'</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif)$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              limit<span class="token punctuation">:</span> <span class="token number">8192</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#limit"><code>limit</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Number}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Byte limit to inline files as Data URL\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#mimetype"><code>mimetype</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>extname</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Specify MIME type for the file (Otherwise it&#39;s inferred from the file extension)\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><a href="#fallback"><code>fallback</code></a></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>file-loader</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Specify <code>loader</code> for the file when file is greater than the limit (in bytes)\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>##</p>\n<p>If the file is greater than the limit (in bytes) the <a href="/loaders/file-loader/"><code>file-loader</code></a> is used by default and all query parameters are passed to it.\nYou can use other loader using <code>fallback</code> option.</p>\n<p>The limit can be specified via loader options and defaults to no limit.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    limit<span class="token punctuation">:</span> <span class="token number">8192</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#mimetype" id="mimetype"></a><span class="text"><code>mimetype</code></span><a class="icon-link" href="#mimetype"></a></h3>\n<p>Set the MIME type for the file. If unspecified the file extensions will be used to lookup the MIME type.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    mimetype<span class="token punctuation">:</span> <span class="token string">\'image/png\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#fallback" id="fallback"></a><span class="text"><code>fallback</code></span><a class="icon-link" href="#fallback"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    fallback<span class="token punctuation">:</span> <span class="token string">\'responsive-loader\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/sapegin"></p>\n<p><img width="150" height="150" src="https://github.com/sapegin.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Artem Sapegin\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"url-loader"},title:"url-loader",url:"/loaders/url-loader/"},{file:{attributes:{title:"val-loader",source:"https://raw.githubusercontent.com/webpack-contrib/val-loader/master/README.md",edit:"https://github.com/webpack-contrib/val-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/val-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Function Interface",id:"function-interface"},{title:"{Object}",id:"-object-"},{title:"{Promise}",id:"-promise-"},{title:"Object Interface",id:"object-interface"},{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Complete",id:"complete"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>Executes the given module to generate source code on build time</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D val-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>The module that is loaded with this loader must stick to the following interfaces</p>\n<p>##</p>\n<p>The loaded module must export a function as <code>default</code> export with the following <em>Function Interface</em></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Modules transpiled by <a href="https://babeljs.io/">Babel</a> are also supported</p>\n<pre><code class="lang-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#function-interface" id="function-interface"></a><span class="text"><code>Function Interface</code></span><a class="icon-link" href="#function-interface"></a></h3>\n<p>The function will be called with the loader <a href="https://webpack.js.org/configuration/module/#useentry"><code>options</code></a> and must either return</p>\n<h4 class="header"><a class="anchor" href="#-object-" id="-object-"></a><span class="text"><code>{Object}</code></span><a class="icon-link" href="#-object-"></a></h4>\n<p>Following the <strong>Object Interface</strong></p>\n<h4 class="header"><a class="anchor" href="#-promise-" id="-promise-"></a><span class="text"><code>{Promise}</code></span><a class="icon-link" href="#-promise-"></a></h4>\n<p>Resolving to an <code>{Object}</code> following the <strong>Object Interface</strong></p>\n<h3 class="header"><a class="anchor" href="#object-interface" id="object-interface"></a><span class="text"><code>Object Interface</code></span><a class="icon-link" href="#object-interface"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>code</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String|Buffer}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        (<strong>Required</strong>) The code that is passed to the next loader or to webpack\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>sourceMap</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <a href="https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit"><code>{Object}</code></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        (<strong>Optional</strong>) Will be passed to the next loader or to webpack\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>ast</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array&lt;{Object}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>undefined</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        (<strong>Optional</strong>) An <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a> that will be passed to the next loader. Useful to speed up the build time if the next loader uses the same AST\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>dependencies</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array&lt;{String}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        An array of absolute, native paths to file dependencies that need to be watched for changes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>contextDependencies</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Array&lt;{String}&gt;}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[]</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        An array of absolute, native paths to directory dependencies that need to be watched for changes\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <strong><code>cacheable</code></strong>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Flag whether the code can be re-used in watch mode if none of the <code>dependencies</code> have changed\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<p><strong><code>val-loader</code></strong> itself has no options. The options are passed as they are (without cloning them) to the exported function</p>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>If you have a module like this</p>\n<p><strong>answer.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">function</span> answer <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    code<span class="token punctuation">:</span> <span class="token string">\'module.exports = 42;\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> answer<span class="token punctuation">;</span>\n</code></pre>\n<p>you can use the <strong>val-loader</strong> to generate source code on build time</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'path/to/answer.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'val-loader\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#complete" id="complete"></a><span class="text"><code>Complete</code></span><a class="icon-link" href="#complete"></a></h3>\n<p>A complete example of all available features looks like this</p>\n<p><strong>answer.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> ask <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./ask.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./generate.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">answer</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">ask</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>question<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>generate<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      ast<span class="token punctuation">:</span> result<span class="token punctuation">.</span>abstractSyntaxTree<span class="token punctuation">,</span>\n      code<span class="token punctuation">:</span> result<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n      <span class="token comment">// Mark dependencies of answer().</span>\n      <span class="token comment">// The function will be re-executed if one of these</span>\n      <span class="token comment">// dependencies has changed in watch mode.</span>\n      dependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// Array of absolute native paths!</span>\n        require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./ask.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./generate.js\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// Flag the generated code as cacheable.</span>\n      <span class="token comment">// If none of the dependencies have changed,</span>\n      <span class="token comment">// the function won\'t be executed again.</span>\n      cacheable<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      sourceMap<span class="token punctuation">:</span> result<span class="token punctuation">.</span>sourceMap<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> answer<span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'path/to/answer.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'val-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              question<span class="token punctuation">:</span> <span class="token string">\'What is the meaning of life?\'</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/781746?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/jhnns"></p>\n<p>Johannes Ewald</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"val-loader"},title:"val-loader",url:"/loaders/val-loader/"},{file:{attributes:{title:"worker-loader",source:"https://raw.githubusercontent.com/webpack-contrib/worker-loader/master/README.md",edit:"https://github.com/webpack-contrib/worker-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/worker-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Config",id:"config"},{title:"Options",id:"options"},{title:"name",id:"name"},{title:"inline",id:"inline"},{title:"fallback",id:"fallback"},{title:"publicPath",id:"publicpath"},{title:"Examples",id:"examples"},{title:"Integrating with ES2015 Modules",id:"integrating-with-es2015-modules"},{title:"Integrating with TypeScript",id:"integrating-with-typescript"},{title:"Cross-Origin Policy",id:"cross-origin-policy"},{title:"Maintainers",id:"maintainers"}],contributors:[],related:[]},body:'<p>This loader registers the script as <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Worker</a></p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm i -D worker-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text"><a href="https://webpack.js.org/concepts/loaders">Usage</a></span><a class="icon-link" href="#usage"></a></h2>\n<p>##</p>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'worker-loader!./Worker.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#config" id="config"></a><span class="text"><code>Config</code></span><a class="icon-link" href="#config"></a></h3>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.worker\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Name</div><div class="table-th">Type</div><div class="table-th">Default</div><div class="table-th">Description</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#name"><strong><code>name</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>[hash].worker.js</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Set a custom name for the output script\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#inline"><strong><code>inline</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Inline the worker as a BLOB\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#fallback"><strong><code>fallback</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{Boolean}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>false</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Require a fallback for non-worker supporting environments\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Name\n    </div>\n    <div class="table-td-content">\n        <a href="#publicPath"><strong><code>publicPath</code></strong></a>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Type\n    </div>\n    <div class="table-td-content">\n        <code>{String}</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default\n    </div>\n    <div class="table-td-content">\n        <code>null</code>\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Description\n    </div>\n    <div class="table-td-content">\n        Override the path from which worker scripts are downloaded\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><h3 class="header"><a class="anchor" href="#name" id="name"></a><span class="text"><code>name</code></span><a class="icon-link" href="#name"></a></h3>\n<p>To set a custom name for the output script, use the <code>name</code> parameter. The name may contain the string <code>[hash]</code>, which will be replaced with a content dependent hash for caching purposes</p>\n<p><em>webpack.config.js*</em></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'WorkerName.[hash].js\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#inline" id="inline"></a><span class="text"><code>inline</code></span><a class="icon-link" href="#inline"></a></h3>\n<p>You can also inline the worker as a BLOB with the <code>inline</code> parameter</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote>\n<p>ℹ️  Inline mode will also create chunks for browsers without support for inline workers, to disable this behavior just set <code>fallback</code> parameter as <code>false</code></p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#fallback" id="fallback"></a><span class="text"><code>fallback</code></span><a class="icon-link" href="#fallback"></a></h3>\n<p>Require a fallback for non-worker supporting environments</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#publicpath" id="publicpath"></a><span class="text"><code>publicPath</code></span><a class="icon-link" href="#publicpath"></a></h3>\n<p>Overrides the path from which worker scripts are downloaded. If not specified, the same public path used for other\nwebpack assets is used</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> publicPath<span class="token punctuation">:</span> <span class="token string">\'/scripts/workers/\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#examples" id="examples"></a><span class="text">Examples</span><a class="icon-link" href="#examples"></a></h2>\n<p>The worker file can import dependencies just like any other file</p>\n<p><strong>Worker.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span>\n\n_<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Post data to parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#integrating-with-es2015-modules" id="integrating-with-es2015-modules"></a><span class="text"><code>Integrating with ES2015 Modules</code></span><a class="icon-link" href="#integrating-with-es2015-modules"></a></h3>\n<blockquote>\n<p>ℹ️  You can even use ES2015 Modules if you have the <a href="https://github.com/babel/babel-loader"><code>babel-loader</code></a> configured.</p>\n</blockquote>\n<p><strong>Worker.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span>\n\n_<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Post data to parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">\'foo\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#integrating-with-typescript" id="integrating-with-typescript"></a><span class="text"><code>Integrating with TypeScript</code></span><a class="icon-link" href="#integrating-with-typescript"></a></h3>\n<p>To integrate with TypeScript, you will need to define a custom module for the exports of your worker</p>\n<p><strong>typings/custom.d.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"worker-loader!*"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">WebpackWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">export</span> <span class="token operator">=</span> WebpackWorker<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>Worker.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">const</span> ctx<span class="token punctuation">:</span> Worker <span class="token operator">=</span> self as <span class="token keyword">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Post data to parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Respond to message from parent thread</span>\nctx<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>App.ts</strong></p>\n<pre><code class="lang-typescript"><span class="token keyword">import</span> Worker <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"worker-loader!./Worker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cross-origin-policy" id="cross-origin-policy"></a><span class="text"><code>Cross-Origin Policy</code></span><a class="icon-link" href="#cross-origin-policy"></a></h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"><code>WebWorkers</code></a> are restricted by a <a href="https://en.wikipedia.org/wiki/Same-origin_policy">same-origin policy</a>, so if your <code>webpack</code> assets are not being served from the same origin as your application, their download may be blocked by your browser. This scenario can commonly occur if you are hosting your assets under a CDN domain. Even downloads from the <code>webpack-dev-server</code> could be blocked. There are two workarounds</p>\n<p>Firstly, you can inline the worker as a blob instead of downloading it as an external script via the <a href="#inline"><code>inline</code></a> parameter</p>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Secondly, you may override the base download URL for your worker script via the <a href="#publicpath"><code>publicPath</code></a> option</p>\n<p><strong>App.js</strong></p>\n<pre><code class="lang-js"><span class="token comment">// This will cause the worker to be downloaded from `/workers/file.worker.js`</span>\n<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">\'./file.worker.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'worker-loader\'</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span> publicPath<span class="token punctuation">:</span> <span class="token string">\'/workers/\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#maintainers" id="maintainers"></a><span class="text">Maintainers</span><a class="icon-link" href="#maintainers"></a></h2>\n<table><tbody><tr><td align="center"><p><a href="https://github.com/TrySound"></p>\n<p><img width="150" height="150" src="https://avatars3.githubusercontent.com/u/5635476?v=3&s=150"></p>\n<p></a></p>\n<p><br /></p>\n<p><a href="https://github.com/TrySound"></p>\n<p>Bogdan Chadkin</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/bebraw"></p>\n<p><img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Juho Vepsäläinen\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/d3viant0ne"></p>\n<p><img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Joshua Wiens\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/michael-ciniawsky"></p>\n<p><img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Michael Ciniawsky\n</code></pre><p></a></p>\n<p></td></p>\n<td align="center"><p><a href="https://github.com/evilebottnawi"></p>\n<p><img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150"></p>\n<p></br></p>\n<pre><code>      Alexander Krasnoyarov\n</code></pre><p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"worker-loader"},title:"worker-loader",url:"/loaders/worker-loader/"},{file:{attributes:{title:"mocha-loader",source:"https://raw.githubusercontent.com/webpack-contrib/mocha-loader/master/README.md",edit:"https://github.com/webpack-contrib/mocha-loader/edit/master/README.md",repo:"https://github.com/webpack-contrib/mocha-loader",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"CLI",id:"cli"},{title:"Require",id:"require"},{title:"Options",id:"options"},{title:"Maintainer",id:"maintainer"}],contributors:[],related:[]},body:'<p>Allows <a href="http://mochajs.org/">Mocha</a> tests to be loaded and run via webpack</p>\n<h2 class="header"><a class="anchor" href="#install" id="install"></a><span class="text">Install</span><a class="icon-link" href="#install"></a></h2>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev mocha-loader\n</code></pre>\n<h2 class="header"><a class="anchor" href="#usage" id="usage"></a><span class="text">Usage</span><a class="icon-link" href="#usage"></a></h2>\n<p>##</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'./entry.js\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token regex">/test\\.js$/</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token string">\'mocha-loader\'</span><span class="token punctuation">,</span>\n      exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">\'./test\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#cli" id="cli"></a><span class="text">CLI</span><a class="icon-link" href="#cli"></a></h3>\n<pre><code class="lang-bash">webpack --module-bind <span class="token string">\'mocha-loader!./test\'</span>\n</code></pre>\n<pre><code class="lang-js"><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">\'./test\'</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#require" id="require"></a><span class="text">Require</span><a class="icon-link" href="#require"></a></h3>\n<pre><code class="lang-js"><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">\'mocha-loader!./test\'</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#options" id="options"></a><span class="text">Options</span><a class="icon-link" href="#options"></a></h2>\n<h2 class="header"><a class="anchor" href="#maintainer" id="maintainer"></a><span class="text">Maintainer</span><a class="icon-link" href="#maintainer"></a></h2>\n<table><tbody><tr><td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/bebraw"></p>\n<p>Juho Vepsäläinen</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/d3viant0ne"></p>\n<p>Joshua Wiens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/SpaceK33z"></p>\n<p>Kees Kluskens</p>\n<p></a></p>\n<p></td></p>\n<td align="center"><p><img width="150" height="150"\n        src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"></p>\n<p></br></p>\n<p><a href="https://github.com/TheLarkInn"></p>\n<p>Sean Larkin</p>\n<p></a></p>\n<p></td></p>\n<p></tr></p>\n<tbody><p></table></p>\n',title:"mocha-loader"},title:"mocha-loader",url:"/loaders/mocha-loader/"}]},{title:"Contribute",url:"contribute",pages:[{file:{attributes:{title:"Writer's Guide",sort:2,group:"-",anchors:[{title:"Process",id:"process"},{title:"YAML Frontmatter",id:"yaml-frontmatter"},{title:"Article Structure",id:"article-structure"},{title:"Typesetting",id:"typesetting"},{title:"Formatting",id:"formatting"},{title:"Code",id:"code"},{title:"Lists",id:"lists"},{title:"Tables",id:"tables"},{title:"Configuration Properties",id:"configuration-properties"},{title:"Quotes",id:"quotes"},{title:"Blockquote",id:"blockquote"},{title:"Tip",id:"tip"}],contributors:[],related:[]},body:'<p>The following sections contain all you need to know about editing and formatting the content within this site. Make sure to do some research before starting your edits or additions. Sometimes the toughest part is finding where the content should live and determining whether or not it already exists.</p>\n<h2 class="header"><a class="anchor" href="#process" id="process"></a><span class="text">Process</span><a class="icon-link" href="#process"></a></h2>\n<ol>\n<li>Check related issue if an article links to one.</li>\n<li>Hit <code>edit</code> and expand on the structure.</li>\n<li>PR changes.</li>\n</ol>\n<h2 class="header"><a class="anchor" href="#yaml-frontmatter" id="yaml-frontmatter"></a><span class="text">YAML Frontmatter</span><a class="icon-link" href="#yaml-frontmatter"></a></h2>\n<p>Each article contains a small section at the top written in <a href="https://jekyllrb.com/docs/frontmatter/">YAML Frontmatter</a>:</p>\n<pre><code class="lang-yaml"><span class="token punctuation">---</span>\n<span class="token key atrule">title</span><span class="token punctuation">:</span> My Article\n<span class="token key atrule">sort</span><span class="token punctuation">:</span> <span class="token number">3</span>\n<span class="token key atrule">contributors</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token punctuation">[</span>github username<span class="token punctuation">]</span>\n<span class="token key atrule">related</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Title of Related Article\n    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>url of related article<span class="token punctuation">]</span>\n<span class="token punctuation">---</span>\n</code></pre>\n<p>Let&#39;s break these down:</p>\n<ul>\n<li><code>title</code>: The name of the article.</li>\n<li><code>sort</code>: The order of the article within its section.</li>\n<li><code>contributors</code>: A list of GitHub usernames who have contributed to this article.</li>\n<li><code>related</code>: Any related reading or useful examples.</li>\n</ul>\n<p>Note that <code>related</code> will generate a <strong>Further Reading</strong> section at the bottom of the page and <code>contributors</code> will yield a <strong>Contributors</strong> section below it. If you edit an article and would like recognition, don&#39;t hesitate to add your GitHub username to the <code>contributors</code> list.</p>\n<h2 class="header"><a class="anchor" href="#article-structure" id="article-structure"></a><span class="text">Article Structure</span><a class="icon-link" href="#article-structure"></a></h2>\n<ol>\n<li>Brief Introduction - a paragraph or two so you get the basic idea about the what and why.</li>\n<li>Outline Remaining Content – how the content will be presented.</li>\n<li>Main Content - tell what you promised to tell.</li>\n<li>Conclusion - tell what you told and recap the main points.</li>\n</ol>\n<h2 class="header"><a class="anchor" href="#typesetting" id="typesetting"></a><span class="text">Typesetting</span><a class="icon-link" href="#typesetting"></a></h2>\n<ul>\n<li>webpack should always be written in lower-case letters. Even at the beginning of a sentence. (<a href="https://github.com/webpack/media#name">source</a>)</li>\n<li>loaders are enclosed in backticks and <a href="https://en.wikipedia.org/w/index.php?title=Kebab_case">kebab-cased</a>: <code>css-loader</code>, <code>ts-loader</code>, …</li>\n<li>plugins are enclosed in backticks and <a href="https://en.wikipedia.org/wiki/Camel_case">camel-cased</a>: <code>BannerPlugin</code>, <code>NpmInstallWebpackPlugin</code>, …</li>\n<li>Use &quot;webpack 2&quot; to refer to a specific webpack version (<del>&quot;webpack v2&quot;</del>)</li>\n<li>Use ES5; ES2015, ES2016, … to refer to the ECMAScript standards (<del>ES6</del>, <del>ES7</del>)</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#formatting" id="formatting"></a><span class="text">Formatting</span><a class="icon-link" href="#formatting"></a></h2>\n<h3 class="header"><a class="anchor" href="#code" id="code"></a><span class="text">Code</span><a class="icon-link" href="#code"></a></h3>\n<p><strong>Syntax: ```javascript … ```</strong></p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#lists" id="lists"></a><span class="text">Lists</span><a class="icon-link" href="#lists"></a></h3>\n<ul>\n<li>Boo</li>\n<li>Foo</li>\n<li>Zoo</li>\n</ul>\n<p>Lists should be ordered alphabetically.</p>\n<h3 class="header"><a class="anchor" href="#tables" id="tables"></a><span class="text">Tables</span><a class="icon-link" href="#tables"></a></h3>\n\n    <div class="table">\n        <div class="table-wrap">\n          <div class="table-header">\n              <div class="table-tr"><div class="table-th">Parameter</div><div class="table-th">Explanation</div><div class="table-th">Input Type</div><div class="table-th">Default Value</div></div>\n          </div>\n          <div class="table-body">\n              <div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --debug\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Switch loaders to debug mode\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default Value\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --devtool\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Define source map type for the bundled resources\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input Type\n    </div>\n    <div class="table-td-content">\n        string\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default Value\n    </div>\n    <div class="table-td-content">\n        -\n    </div>\n  </div></div><div class="table-tr"><div class="table-td">\n    <div class="table-td-title">\n        Parameter\n    </div>\n    <div class="table-td-content">\n        --progress\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Explanation\n    </div>\n    <div class="table-td-content">\n        Print compilation progress in percentage\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Input Type\n    </div>\n    <div class="table-td-content">\n        boolean\n    </div>\n  </div><div class="table-td">\n    <div class="table-td-title">\n        Default Value\n    </div>\n    <div class="table-td-content">\n        false\n    </div>\n  </div></div>\n          </div>\n        </div>\n    </div><p>Same goes for tables.</p>\n<h3 class="header"><a class="anchor" href="#configuration-properties" id="configuration-properties"></a><span class="text">Configuration Properties</span><a class="icon-link" href="#configuration-properties"></a></h3>\n<p>The <a href="/configuration">configuration</a> properties should be ordered alphabetically as well:</p>\n<ul>\n<li><code>devServer.compress</code></li>\n<li><code>devServer.contentBase</code></li>\n<li><code>devServer.hot</code></li>\n</ul>\n<h3 class="header"><a class="anchor" href="#quotes" id="quotes"></a><span class="text">Quotes</span><a class="icon-link" href="#quotes"></a></h3>\n<h4 class="header"><a class="anchor" href="#blockquote" id="blockquote"></a><span class="text">Blockquote</span><a class="icon-link" href="#blockquote"></a></h4>\n<p><strong>Syntax: ></strong></p>\n<blockquote>\n<p>This is a blockquote.</p>\n</blockquote>\n<h4 class="header"><a class="anchor" href="#tip" id="tip"></a><span class="text">Tip</span><a class="icon-link" href="#tip"></a></h4>\n<p><strong>Syntax: T></strong></p>\n<blockquote class="tip"><div class="tip-content"> This is a tip. </div></blockquote><p><strong>Syntax: W></strong></p>\n<blockquote class="warning"><div class="tip-content"> This is a warning. </div></blockquote><p><strong>Syntax: ?></strong></p>\n<blockquote class="todo"><div class="tip-content"> This is a todo. </div></blockquote>',title:"Writer's Guide"},title:"Writer's Guide",url:"/contribute/writers-guide/"},{file:{attributes:{title:"Writing a Loader",sort:3,contributors:["asulaiman","michael-ciniawsky"],group:"-",anchors:[{title:"Setup",id:"setup"},{title:"Simple Usage",id:"simple-usage"},{title:"Complex Usage",id:"complex-usage"},{title:"Guidelines",id:"guidelines"},{title:"Simple",id:"simple"},{title:"Chaining",id:"chaining"},{title:"Modular",id:"modular"},{title:"Stateless",id:"stateless"},{title:"Loader Utilities",id:"loader-utilities"},{title:"Loader Dependencies",id:"loader-dependencies"},{title:"Module Dependencies",id:"module-dependencies"},{title:"Common Code",id:"common-code"},{title:"Absolute Paths",id:"absolute-paths"},{title:"Peer Dependencies",id:"peer-dependencies"},{title:"Testing",id:"testing"}],related:[]},body:'<p>A loader is a node module that exports a function. This function is called when a resource should be transformed by this loader. The given function will have access to the <a href="/api/loaders/">Loader API</a> using the <code>this</code> context provided to it.</p>\n<h2 class="header"><a class="anchor" href="#setup" id="setup"></a><span class="text">Setup</span><a class="icon-link" href="#setup"></a></h2>\n<p>Before we dig into the different types of loaders, their usage, and examples, let&#39;s take a look at the three ways you can develop and test a loader locally.</p>\n<p>To test a single loader, you can simply use <code>path</code> to <code>resolve</code> a local file within a rule object:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'path/to/loader.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>To test multiple, you can utilize the <code>resolveLoader.modules</code> configuration to update where webpack will search for loaders. For example, if you had a local <code>/loaders</code> directory in your project:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js">resolveLoader<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'node_modules\'</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'loaders\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Last but not least, if you&#39;ve already created a separate repository and package for your loader, you could <a href="https://docs.npmjs.com/cli/link"><code>npm link</code></a> it to the project in which you&#39;d like to test it out.</p>\n<h2 class="header"><a class="anchor" href="#simple-usage" id="simple-usage"></a><span class="text">Simple Usage</span><a class="icon-link" href="#simple-usage"></a></h2>\n<p>When a single loader is applied to the resource, the loader is called with only one parameter -- a string containing the content of the resource file.</p>\n<p>Synchronous loaders can simply <code>return</code> a single value representing the transformed module. In more complex cases, the loader can return any number of values by using the <code>this.callback(err, values...)</code> function. Errors are either passed to the <code>this.callback</code> function or thrown in a sync loader.</p>\n<p>The loader is expected to give back one or two values. The first value is a resulting JavaScript code as string or buffer. The second optional value is a SourceMap as JavaScript object.</p>\n<h2 class="header"><a class="anchor" href="#complex-usage" id="complex-usage"></a><span class="text">Complex Usage</span><a class="icon-link" href="#complex-usage"></a></h2>\n<p>When multiple loaders are chained, it is important to remember that they are executed in reverse order -- either right to left or bottom to top depending on array format.</p>\n<ul>\n<li>The last loader, called first, will be passed the contents of the raw resource.</li>\n<li>The first loader, called last, is expected to return JavaScript and an optional source map.</li>\n<li>The loaders in between will be executed with the result(s) of the previous loader in the chain.</li>\n</ul>\n<p>So, in the following example, the <code>foo-loader</code> would be passed the raw resource and the <code>bar-loader</code> would receive the output of the <code>foo-loader</code> and return the final transformed module and a source map if necessary.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="lang-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.js/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'bar-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'foo-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#guidelines" id="guidelines"></a><span class="text">Guidelines</span><a class="icon-link" href="#guidelines"></a></h2>\n<p>The following guidelines should be followed when writing a loader. They are ordered in terms of importance and some only apply in certain scenarios, read the detailed sections that follow for more information.</p>\n<ul>\n<li>Keep them <strong>simple</strong>.</li>\n<li>Utilize <strong>chaining</strong>.</li>\n<li>Emit <strong>modular</strong> output.</li>\n<li>Make sure they&#39;re <strong>stateless</strong>.</li>\n<li>Employ <strong>loader utilities</strong>.</li>\n<li>Mark <strong>loader dependencies</strong>.</li>\n<li>Resolve <strong>module dependencies</strong>.</li>\n<li>Extract <strong>common code</strong>.</li>\n<li>Avoid <strong>absolute paths</strong>.</li>\n<li>Use <strong>peer dependencies</strong>.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#simple" id="simple"></a><span class="text">Simple</span><a class="icon-link" href="#simple"></a></h3>\n<p>Loaders should do only a single task. This not only makes the job of maintaining each loader easier, but also allows them to be chained for usage in more scenarios.</p>\n<h3 class="header"><a class="anchor" href="#chaining" id="chaining"></a><span class="text">Chaining</span><a class="icon-link" href="#chaining"></a></h3>\n<p>Take advantage of the fact that loaders can be chained together. Instead of writing a single loader that tackles five tasks, write five simpler loaders that divide this effort. Isolating them not only keeps each individual loader simple, but may allow for them to be used for something you hadn&#39;t though of originally.</p>\n<p>Take the case of rendering a template file with data specified via loader options or query parameters. It could be written as a single loader that compiles the template from source, executes it and returns a module that exports a string containing the HTML code. However, in accordance with guidelines, a simple <code>apply-loader</code> exists that can be chained with other open source loaders:</p>\n<ul>\n<li><code>jade-loader</code>: Convert template to a module that exports a function.</li>\n<li><code>apply-loader</code>: Executes the function with loader options and returns raw HTML.</li>\n<li><code>html-loader</code>: Accepts HTML and outputs a valid JavaScript module.</li>\n</ul>\n<blockquote class="tip"><div class="tip-content"> The fact that loaders can be chained also means they don&#39;t necessarily have to output JavaScript. As long as the next loader in the chain can handle its output, the loader can return any type of module. </div></blockquote><h3 class="header"><a class="anchor" href="#modular" id="modular"></a><span class="text">Modular</span><a class="icon-link" href="#modular"></a></h3>\n<p>Keep the output modular. Loader generated modules should respect the same design principles as normal modules.</p>\n<h3 class="header"><a class="anchor" href="#stateless" id="stateless"></a><span class="text">Stateless</span><a class="icon-link" href="#stateless"></a></h3>\n<p>Make sure the loader does not retain state between module transformations. Each run should always be independent of other compiled modules as well as previous compilations of the same module.</p>\n<h3 class="header"><a class="anchor" href="#loader-utilities" id="loader-utilities"></a><span class="text">Loader Utilities</span><a class="icon-link" href="#loader-utilities"></a></h3>\n<p>Take advantage of the <a href="https://github.com/webpack/loader-utils"><code>loader-utils</code></a> package. It provides a variety of useful tools but one of the most common is retrieving the options passed to the loader. Along with <code>loader-utils</code>, the <a href="https://github.com/webpack-contrib/schema-utils"><code>schema-utils</code></a> package should be used for consistent JSON Schema based validation of loader options. Here&#39;s a brief example that utilizes both:</p>\n<p><strong>loader.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'loader-utils\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> validateOptions <span class="token keyword">from</span> <span class="token string">\'schema-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'string\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">validateOptions</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token string">\'Example Loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Apply some transformations to the source...</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#loader-dependencies" id="loader-dependencies"></a><span class="text">Loader Dependencies</span><a class="icon-link" href="#loader-dependencies"></a></h3>\n<p>If a loader uses external resources (i.e. by reading from filesystem), they <strong>must</strong> indicate it. This information is used to invalidate cacheable loaders and recompile in watch mode. Here&#39;s a brief example of how to accomplish this using the <code>addDependency</code> method:</p>\n<p><strong>loader.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> headerPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'header.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDependency</span><span class="token punctuation">(</span>headerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>headerPath<span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> header <span class="token operator">+</span> <span class="token string">"\\n"</span> <span class="token operator">+</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 class="header"><a class="anchor" href="#module-dependencies" id="module-dependencies"></a><span class="text">Module Dependencies</span><a class="icon-link" href="#module-dependencies"></a></h3>\n<p>Depending the type of module, there may be a different schema used to specify dependencies. In CSS for example, the <code>@import</code> and <code>url(...)</code> statements are used. These dependencies should be resolved by the module system.</p>\n<p>This can be done in one of two ways:</p>\n<ul>\n<li>By transforming them to <code>require</code> statements.</li>\n<li>Using the <code>this.resolve</code> function to resolve the path.</li>\n</ul>\n<p>The <code>css-loader</code> is a good example of the first approach. It transforms dependencies to <code>require</code>s, by replacing <code>@import</code> statements with a <code>require</code> to the other stylesheet and <code>url(...)</code> with a <code>require</code> to the referenced file.</p>\n<p>In the case of the <code>less-loader</code>, it cannot transform each <code>@import</code> to a <code>require</code> because all <code>.less</code> files must be compiled in one pass for variables and mixin tracking. Therefore, the <code>less-loader</code> extends the less compiler with custom path resolving logic. It then takes advantage of the second approach, <code>this.resolve</code>, to resolve the dependency through webpack.</p>\n<blockquote class="tip"><div class="tip-content"> If the language only accepts relative urls (e.g. <code>url(file)</code> always refers to <code>./file</code>), you can use the <code>~</code> convention to specify references to installed modules (e.g. those in <code>node_modules</code>). So, in the case of <code>url</code>, that would look something like <code>url(&#39;~some-library/image.jpg&#39;)</code>. </div></blockquote><h3 class="header"><a class="anchor" href="#common-code" id="common-code"></a><span class="text">Common Code</span><a class="icon-link" href="#common-code"></a></h3>\n<p>Avoid generating common code in every module the loader processes. Instead, create a runtime file in the loader and generate a <code>require</code> to that shared module.</p>\n<h3 class="header"><a class="anchor" href="#absolute-paths" id="absolute-paths"></a><span class="text">Absolute Paths</span><a class="icon-link" href="#absolute-paths"></a></h3>\n<p>Don&#39;t insert absolute paths into the module code as they break hashing when the root for the project is moved. There&#39;s a <a href="https://github.com/webpack/loader-utils#stringifyrequest"><code>stringifyRequest</code></a> method in <code>loader-utils</code> which can be used to convert an absolute path to a relative one.</p>\n<h3 class="header"><a class="anchor" href="#peer-dependencies" id="peer-dependencies"></a><span class="text">Peer Dependencies</span><a class="icon-link" href="#peer-dependencies"></a></h3>\n<p>If the loader you&#39;re working on is a simple wrapper around another package, then you should include the package as a <code>peerDependency</code>. This approach allows the application&#39;s developer to specify the exact version in the <code>package.json</code> if desired.</p>\n<p>For instance, the <code>sass-loader</code> <a href="https://github.com/webpack-contrib/sass-loader/blob/master/package.json">specifies <code>node-sass</code></a> as peer dependency like so:</p>\n<pre><code class="lang-js"><span class="token string">"peerDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"node-sass"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#testing" id="testing"></a><span class="text">Testing</span><a class="icon-link" href="#testing"></a></h2>\n<p>So you&#39;ve written a loader, followed the guidelines above, and have it set up to run locally. What&#39;s next? Let&#39;s go through a simple unit testing example to ensure our loader is working the way we expect. We&#39;ll be using the <a href="https://facebook.github.io/jest/">Jest</a> framework to do this. We&#39;ll also install <code>babel-jest</code> and some presets that will allow us to use the <code>import</code> / <code>export</code> and <code>async</code> / <code>await</code>. Let&#39;s start by installing and saving these as a <code>devDependencies</code>:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev jest babel-jest babel-preset-env\n</code></pre>\n<p><strong>.babelrc</strong></p>\n<pre><code class="lang-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>\n    <span class="token string">"env"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"4"</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Our loader will process <code>.txt</code> files and simply replace any instance of <code>[name]</code> with the <code>name</code> option given to the loader. Then it will output a valid JavaScript module containing the text as it&#39;s default export:</p>\n<p><strong>src/loader.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'loader-utils\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  source <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\[name\\]/g</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>We&#39;ll use this loader to process the following file:</p>\n<p><strong>test/example.txt</strong></p>\n<pre><code class="lang-text">Hey <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">!</span>\n</code></pre>\n<p>Pay close attention to this next step as we&#39;ll be using the <a href="/api/node">Node.js API</a> and <a href="https://github.com/webpack/memory-fs"><code>memory-fs</code></a> to execute webpack. This lets us avoid emitting <code>output</code> to disk and will give us access to the <code>stats</code> data which we can use to grab our transformed module:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --save-dev webpack memory-fs\n</code></pre>\n<p><strong>test/compiler.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> memoryfs <span class="token keyword">from</span> <span class="token string">\'memory-fs\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>fixture<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n    entry<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fixture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.txt$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'../src/loader.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'Alice\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">memoryfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token function">resolve</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<blockquote class="tip"><div class="tip-content"> In this case, we&#39;ve inlined our webpack configuration but you can also accept a configuration as a parameter to the exported function. This would allow you to test multiple setups using the same compiler module. </div></blockquote><p>And now, finally, we can write our test and add an npm script to run it:</p>\n<p><strong>test/loader.test.js</strong></p>\n<pre><code class="lang-js"><span class="token keyword">import</span> compiler <span class="token keyword">from</span> <span class="token string">\'./compiler.js\'</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Inserts name and outputs JavaScript\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">compiler</span><span class="token punctuation">(</span><span class="token string">\'example.txt\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> output <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>source<span class="token punctuation">;</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>`<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"Hey Alice!\\\\n"</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><strong>package.json</strong></p>\n<pre><code class="lang-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"jest"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>With everything in place, we can run it and see if our new loader passes the test:</p>\n<pre><code class="lang-bash"> PASS  test/loader.test.js\n  ✓ Inserts name and outputs JavaScript <span class="token punctuation">(</span>229ms<span class="token punctuation">)</span>\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.853s, estimated 2s\nRan all <span class="token function">test</span> suites.\n</code></pre>\n<p>It worked! At this point you should be ready to start developing, testing, and deploying your own loaders. We hope that you&#39;ll share your creations with the rest of the community!</p>\n',title:"Writing a Loader"},title:"Writing a Loader",url:"/contribute/writing-a-loader/"},{file:{attributes:{title:"Writing a Plugin",sort:4,contributors:["tbroadley"],group:"-",anchors:[{title:"Creating a Plugin",id:"creating-a-plugin"},{title:"Compiler and Compilation",id:"compiler-and-compilation"},{title:"Basic plugin architecture",id:"basic-plugin-architecture"},{title:"Accessing the compilation",id:"accessing-the-compilation"},{title:"Async compilation plugins",id:"async-compilation-plugins"},{title:"Example",id:"example"},{title:"Different Plugin Shapes",id:"different-plugin-shapes"}],related:[]},body:'<p>Plugins expose the full potential of the webpack engine to third-party developers. Using staged build callbacks, developers can introduce their own behaviors into the webpack build process. Building plugins is a bit more advanced than building loaders, because you&#39;ll need to understand some of the webpack low-level internals to hook into them. Be prepared to read some source code!</p>\n<h2 class="header"><a class="anchor" href="#creating-a-plugin" id="creating-a-plugin"></a><span class="text">Creating a Plugin</span><a class="icon-link" href="#creating-a-plugin"></a></h2>\n<p>A plugin for <code>webpack</code> consists of</p>\n<ul>\n<li>A named JavaScript function.</li>\n<li>Defines <code>apply</code> method in it&#39;s prototype.</li>\n<li>Specifies an <a href="/api/compiler/#event-hooks">event hook</a> on which to bind itself.</li>\n<li>Manipulates webpack internal instance specific data.</li>\n<li>Invokes webpack provided callback after functionality is complete.</li>\n</ul>\n<pre><code class="lang-javascript"><span class="token comment">// A named JavaScript function.</span>\n<span class="token keyword">function</span> <span class="token function">MyExampleWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Defines `apply` method in it\'s prototype.</span>\nMyExampleWebpackPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Specifies webpack\'s event hook to attach itself.</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'webpacksEventHook\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation <span class="token comment">/* Manipulates webpack internal instance specific data. */</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is an example plugin!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Invokes webpack provided callback after functionality is complete.</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#compiler-and-compilation" id="compiler-and-compilation"></a><span class="text">Compiler and Compilation</span><a class="icon-link" href="#compiler-and-compilation"></a></h2>\n<p>Among the two most important resources while developing plugins are the <code>compiler</code> and <code>compilation</code> objects. Understanding their roles is an important first step in extending the webpack engine.</p>\n<ul>\n<li><p>The <code>compiler</code> object represents the fully configured webpack environment. This object is built once upon starting webpack, and is configured with all operational settings including options, loaders, and plugins. When applying a plugin to the webpack environment, the plugin will receive a reference to this compiler. Use the compiler to access the main webpack environment.</p>\n</li>\n<li><p>A <code>compilation</code> object represents a single build of versioned assets. While running webpack development middleware, a new compilation will be created each time a file change is detected, thus generating a new set of compiled assets. A compilation surfaces information about the present state of module resources, compiled assets, changed files, and watched dependencies. The compilation also provides many callback points at which a plugin may choose to perform custom actions.</p>\n</li>\n</ul>\n<p>These two components are an integral part of any webpack plugin (especially a <code>compilation</code>), so developers will benefit by familiarizing themselves with these source files:</p>\n<ul>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/Compiler.js">Compiler Source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/Compilation.js">Compilation Source</a></li>\n</ul>\n<h2 class="header"><a class="anchor" href="#basic-plugin-architecture" id="basic-plugin-architecture"></a><span class="text">Basic plugin architecture</span><a class="icon-link" href="#basic-plugin-architecture"></a></h2>\n<p>Plugins are instantiated objects with an <code>apply</code> method on their prototype. This <code>apply</code> method is called once by the webpack compiler while installing the plugin. The <code>apply</code> method is given a reference to the underlying webpack compiler, which grants access to compiler callbacks. A simple plugin is structured as follows:</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">HelloWorldPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Setup the plugin instance with options...</span>\n<span class="token punctuation">}</span>\n\nHelloWorldPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'done\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello World!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> HelloWorldPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>Then to install the plugin, just include an instance in your webpack config <code>plugins</code> array:</p>\n<pre><code class="lang-javascript"><span class="token keyword">var</span> HelloWorldPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'hello-world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... config settings here ...</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HelloWorldPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>options<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#accessing-the-compilation" id="accessing-the-compilation"></a><span class="text">Accessing the compilation</span><a class="icon-link" href="#accessing-the-compilation"></a></h2>\n<p>Using the compiler object, you may bind callbacks that provide a reference to each new compilation. These compilations provide callbacks for hooking into numerous steps within the build process.</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">HelloCompilationPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nHelloCompilationPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// Setup callback for accessing a compilation:</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// Now setup callbacks for accessing compilation steps:</span>\n    compilation<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"optimize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Assets are being optimized."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> HelloCompilationPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>For more information on what callbacks are available on the <code>compiler</code>, <code>compilation</code>, and other important objects, see the <a href="/api/plugins/">plugins</a> doc.</p>\n<h2 class="header"><a class="anchor" href="#async-compilation-plugins" id="async-compilation-plugins"></a><span class="text">Async compilation plugins</span><a class="icon-link" href="#async-compilation-plugins"></a></h2>\n<p>Some compilation plugin steps are asynchronous, and pass a callback function that <em>must</em> be invoked when your plugin is finished running.</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">HelloAsyncPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nHelloAsyncPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"emit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// Do something async...</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Done with async work..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> HelloAsyncPlugin<span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#example" id="example"></a><span class="text">Example</span><a class="icon-link" href="#example"></a></h2>\n<p>Once we can latch onto the webpack compiler and each individual compilations, the possibilities become endless for what we can do with the engine itself. We can reformat existing files, create derivative files, or fabricate entirely new assets.</p>\n<p>Let&#39;s write a simple example plugin that generates a new build file called <code>filelist.md</code>; the contents of which will list all of the asset files in our build. This plugin might look something like this:</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">FileListPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nFileListPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Create a header string for the generated file:</span>\n    <span class="token keyword">var</span> filelist <span class="token operator">=</span> <span class="token string">\'In this build:\\n\\n\'</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Loop through all compiled assets,</span>\n    <span class="token comment">// adding a new line item for each filename.</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> filename <span class="token keyword">in</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      filelist <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">\'- \'</span><span class="token operator">+</span> filename <span class="token operator">+</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Insert this list into the webpack build as a new file asset:</span>\n    compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">\'filelist.md\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      source<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> filelist<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      size<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> filelist<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> FileListPlugin<span class="token punctuation">;</span>\n</code></pre>\n<h2 class="header"><a class="anchor" href="#different-plugin-shapes" id="different-plugin-shapes"></a><span class="text">Different Plugin Shapes</span><a class="icon-link" href="#different-plugin-shapes"></a></h2>\n<p>A plugin can be classified into types based on the event it is registered to. Every event hook decides how it is going to apply the plugins in its registry.</p>\n<ul>\n<li><strong>synchronous</strong> The Tapable instance applies plugins using</li>\n</ul>\n<p><code>applyPlugins(name: string, args: any...)</code></p>\n<p><code>applyPluginsBailResult(name: string, args: any...)</code></p>\n<p>This means that each of the plugin callbacks will be invoked one after the other with the specific <code>args</code>.\nThis is the simplest format for a plugin. Many useful events like <code>&quot;compile&quot;</code>, <code>&quot;this-compilation&quot;</code> expect plugins to have synchronous execution.</p>\n<ul>\n<li><strong>waterfall</strong> Plugins applied using</li>\n</ul>\n<p><code>applyPluginsWaterfall(name: string, init: any, args: any...)</code></p>\n<p>Here each of the plugins are called one after the other with the args from the return value of the previous plugin. The plugin must take the order of its execution into account.\nIt must accept arguments from the previous plugin that was executed. The value for the first plugin is <code>init</code>. This pattern is used in the Tapable instances which are related to the <code>webpack</code> templates like <code>ModuleTemplate</code>, <code>ChunkTemplate</code> etc.</p>\n<ul>\n<li><strong>asynchronous</strong> When all the plugins are applied asynchronously using</li>\n</ul>\n<p><code>applyPluginsAsync(name: string, args: any..., callback: (err?: Error) -&gt; void)</code></p>\n<p>The plugin handler functions are called with all args and a callback function with the signature <code>(err?: Error) -&gt; void</code>. The handler functions are called in order of registration. <code>callback`` is called after all the handlers are called.\nThis is also a commonly used pattern for events like</code>&quot;emit&quot;<code>,</code>&quot;run&quot;`.</p>\n<ul>\n<li><strong>async waterfall</strong> The plugins will be applied asynchronously in the waterfall manner.</li>\n</ul>\n<p><code>applyPluginsAsyncWaterfall(name: string, init: any, callback: (err: Error, result: any) -&gt; void)</code></p>\n<p>The plugin handler functions are called with the current value and a callback function with the signature <code>(err: Error, nextValue: any) -&gt; void.</code> When called <code>nextValue</code> is the current value for the next handler. The current value for the first handler is <code>init</code>. After all handlers are applied, callback is called with the last value. If any handler passes a value for <code>err</code>, the callback is called with this error and no more handlers are called.\nThis plugin pattern is expected for events like <code>&quot;before-resolve&quot;</code> and <code>&quot;after-resolve&quot;</code>.</p>\n<ul>\n<li><strong>async series</strong> It is the same as asynchronous but if any of the plugins registered fails, then no more plugins are called.</li>\n</ul>\n<p><code>applyPluginsAsyncSeries(name: string, args: any..., callback: (err: Error, result: any) -&gt; void)</code></p>\n<p>-<strong>parallel</strong> -</p>\n<p><code>applyPluginsParallel(name: string, args: any..., callback: (err?: Error) -&gt; void)</code></p>\n<p><code>applyPluginsParallelBailResult(name: string, args: any..., callback: (err: Error, result: any) -&gt; void)</code></p>\n',title:"Writing a Plugin"},title:"Writing a Plugin",url:"/contribute/writing-a-plugin/"},{file:{attributes:{title:"Plugin Patterns",sort:5,group:"-",anchors:[{title:"Exploring assets, chunks, modules, and dependencies",id:"exploring-assets-chunks-modules-and-dependencies"},{title:"Monitoring the watch graph",id:"monitoring-the-watch-graph"},{title:"Changed chunks",id:"changed-chunks"}],contributors:[],related:[]},body:'<p>Plugins grant unlimited opportunity to perform customizations within the webpack build system. This allows you to create custom asset types, perform unique build modifications, or even enhance the webpack runtime while using middleware. The following are some features of webpack that become useful while writing plugins.</p>\n<h2 class="header"><a class="anchor" href="#exploring-assets-chunks-modules-and-dependencies" id="exploring-assets-chunks-modules-and-dependencies"></a><span class="text">Exploring assets, chunks, modules, and dependencies</span><a class="icon-link" href="#exploring-assets-chunks-modules-and-dependencies"></a></h2>\n<p>After a compilation is sealed, all structures within the compilation may be traversed.</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// Explore each chunk (build output):</span>\n    compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Explore each module within the chunk (built inputs):</span>\n      chunk<span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Explore each source file path that was included into the module:</span>\n        module<span class="token punctuation">.</span>fileDependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// we\'ve learned a lot about the source structure now...</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Explore each asset filename generated by the chunk:</span>\n      chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Get the asset source for each file generated by the chunk:</span>\n        <span class="token keyword">var</span> source <span class="token operator">=</span> compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n<ul>\n<li><code>compilation.modules</code>: An array of modules (built inputs) in the compilation. Each module manages the build of a raw file from your source library.</li>\n<li><code>module.fileDependencies</code>: An array of source file paths included into a module. This includes the source JavaScript file itself (ex: <code>index.js</code>), and all dependency asset files (stylesheets, images, etc) that it has required. Reviewing dependencies is useful for seeing what source files belong to a module.</li>\n<li><code>compilation.chunks</code>: An array of chunks (build outputs) in the compilation. Each chunk manages the composition of a final rendered assets.</li>\n<li><code>chunk.modules</code>: An array of modules that are included into a chunk. By extension, you may look through each module&#39;s dependencies to see what raw source files fed into a chunk.</li>\n<li><code>chunk.files</code>: An array of output filenames generated by the chunk. You may access these asset sources from the <code>compilation.assets</code> table.</li>\n</ul>\n<h3 class="header"><a class="anchor" href="#monitoring-the-watch-graph" id="monitoring-the-watch-graph"></a><span class="text">Monitoring the watch graph</span><a class="icon-link" href="#monitoring-the-watch-graph"></a></h3>\n<p>While running webpack middleware, each compilation includes a <code>fileDependencies</code> array (what files are being watched) and a <code>fileTimestamps</code> hash that maps watched file paths to a timestamp. These are extremely useful for detecting what files have changed within the compilation:</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>prevTimestamps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">var</span> changedFiles <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>fileTimestamps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>watchfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevTimestamps<span class="token punctuation">[</span>watchfile<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>fileTimestamps<span class="token punctuation">[</span>watchfile<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>prevTimestamps <span class="token operator">=</span> compilation<span class="token punctuation">.</span>fileTimestamps<span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>You may also feed new file paths into the watch graph to receive compilation triggers when those files change. Simply push valid filepaths into the <code>compilation.fileDependencies</code> array to add them to the watch. Note: the <code>fileDependencies</code> array is rebuilt in each compilation, so your plugin must push its own watched dependencies into each compilation to keep them under watch.</p>\n<h2 class="header"><a class="anchor" href="#changed-chunks" id="changed-chunks"></a><span class="text">Changed chunks</span><a class="icon-link" href="#changed-chunks"></a></h2>\n<p>Similar to the watch graph, it&#39;s fairly simple to monitor changed chunks (or modules, for that matter) within a compilation by tracking their hashes.</p>\n<pre><code class="lang-javascript"><span class="token keyword">function</span> <span class="token function">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>chunkVersions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nMyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'emit\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">var</span> changedChunks <span class="token operator">=</span> compilation<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> oldVersion <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chunkVersions<span class="token punctuation">[</span>chunk<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>chunkVersions<span class="token punctuation">[</span>chunk<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> chunk<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> chunk<span class="token punctuation">.</span>hash <span class="token operator">!==</span> oldVersion<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>\n</code></pre>\n',title:"Plugin Patterns"},title:"Plugin Patterns",url:"/contribute/plugin-patterns/"},{file:{attributes:{title:"Release Process",sort:6,contributors:["d3viant0ne","sokra"],group:"-",anchors:[{title:"Pull Requests",id:"pull-requests"},{title:"Releasing",id:"releasing"}],related:[]},body:'<p>The release process for deploying webpack is actually quite painless. Read through the following steps, so you have a clear understanding of how it&#39;s done.</p>\n<h2 class="header"><a class="anchor" href="#pull-requests" id="pull-requests"></a><span class="text">Pull Requests</span><a class="icon-link" href="#pull-requests"></a></h2>\n<p>When merging pull requests into the <code>master</code> branch, select the <em>Create Merge Commit</em> option.</p>\n<h2 class="header"><a class="anchor" href="#releasing" id="releasing"></a><span class="text">Releasing</span><a class="icon-link" href="#releasing"></a></h2>\n<pre><code class="lang-sh">npm version patch <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push --follow-tags <span class="token operator">&amp;&amp;</span> npm publish\nnpm version minor <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push --follow-tags <span class="token operator">&amp;&amp;</span> npm publish\nnpm version major <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push --follow-tags <span class="token operator">&amp;&amp;</span> npm publish\n</code></pre>\n<p><em>This will increment the package version, commits the changes, cuts a <strong>local tag</strong>, push to github &amp; publish the npm package.</em></p>\n<p>After that go to the github <a href="https://github.com/webpack/webpack/releases">releases page</a> and write a Changelog for the new tag.</p>\n',title:"Release Process"},title:"Release Process",url:"/contribute/release-process/"},{file:{attributes:{title:"Debugging",sort:7,contributors:["skipjack","tbroadley"],related:[{title:"Learn and Debug webpack with Chrome DevTools!",url:"https://medium.com/webpack/webpack-bits-learn-and-debug-webpack-with-chrome-dev-tools-da1c5b19554b"},{title:"Debugging Guide | Node",url:"https://nodejs.org/en/docs/guides/debugging-getting-started/"},{title:"Debugging Node.js with Chrome DevTools",url:"https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27"}],group:"-",anchors:[{title:"Stats",id:"stats"},{title:"DevTools",id:"devtools"}]},body:'<p>When contributing to the core repo, writing a loader/plugin, or even just working on complex project, debugging tools can be central to your workflow. Whether the problem is slow performance on a large project or an unhelpful traceback, the following utilities can make figuring it out less painful.</p>\n<ul>\n<li>The <a href="/api/stats"><code>stats</code> data</a> made available through <a href="/api/node#stats-object">Node</a> and the <a href="/api/cli#common-options">CLI</a>.</li>\n<li>Chrome <strong>DevTools</strong> via <code>node-nightly</code> and the latest Node.js versions.</li>\n</ul>\n<h2 class="header"><a class="anchor" href="#stats" id="stats"></a><span class="text">Stats</span><a class="icon-link" href="#stats"></a></h2>\n<p>Whether you want to sift through <a href="/api/stats">this data</a> manually or use a tool to process it, the <code>stats</code> data can be extremely useful when debugging build issues. We won&#39;t go in depth here as there&#39;s an <a href="/api/stats">entire page</a> dedicated to its contents, but know that you can use it to find the following information:</p>\n<ul>\n<li>The contents of every module.</li>\n<li>The modules contained within every chunk.</li>\n<li>Per module compilation and resolving stats.</li>\n<li>Build errors and warnings.</li>\n<li>The relationships between modules.</li>\n<li>And much more...</li>\n</ul>\n<p>On top of that, the official <a href="https://github.com/webpack/analyse">analyze tool</a> and <a href="/guides/code-splitting#bundle-analysis">various others</a> will accept this data and visualize it in various ways.</p>\n<h2 class="header"><a class="anchor" href="#devtools" id="devtools"></a><span class="text">DevTools</span><a class="icon-link" href="#devtools"></a></h2>\n<p>While <a href="https://nodejs.org/api/console.html"><code>console</code></a> statements may work well in simpler scenarios, sometimes a more robust solution is needed. As most front-end developers already know, Chrome DevTools are a life saver when debugging web applications, <em>but they don’t have to stop there</em>. As of Node v6.3.0+, developers can use the built-in <code>--inspect</code> flag to debug a node program in DevTools.</p>\n<p>This gives you the power to easily create breakpoints, debug memory usage, expose and examine objects in the console, and much more. In this short demo, we&#39;ll utilize the <a href="https://github.com/hemanth/node-nightly"><code>node-nightly</code></a> package which provides access to the latest and greatest inspecting capabilities.</p>\n<blockquote class="warning"><div class="tip-content"> The <code>--inspect</code> interface has been available since v6.3.0 so feel to try it out with your local version, but be warned that certain features and flags may differ from the ones in this demo. </div></blockquote><p>Let&#39;s start by installing it globally:</p>\n<pre><code class="lang-bash">npm <span class="token function">install</span> --global node-nightly\n</code></pre>\n<p>Now, we&#39;ll need to run it once to finish the installation:</p>\n<pre><code class="lang-bash">node-nightly\n</code></pre>\n<p>Now, we can simply use <code>node-nightly</code> along with the <code>--inspect</code> flag to start our build in any webpack-based project. Note that we cannot run NPM <code>scripts</code>, e.g. <code>npm run build</code>, so we&#39;ll have specify the full <code>node_modules</code> path:</p>\n<pre><code class="lang-bash">node-nightly --inspect ./node_modules/webpack/bin/webpack.js\n</code></pre>\n<p>Which should output something like:</p>\n<pre><code class="lang-bash">Debugger listening on ws://127.0.0.1:9229/c624201a-250f-416e-a018-300bbec7be2c\nFor <span class="token function">help</span> see https://nodejs.org/en/docs/inspector\n</code></pre>\n<p>Now jump to <code>chrome://inspect</code> in the browser and you should see any active scripts you&#39;ve inspected under the <em>Remote Target</em> header. Click the &quot;inspect&quot; link under each script to open a dedicated debugger or the <em>Open dedicated DevTools for Node</em> link for a session that will autoconnect. You can also check out the <a href="https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj">NiM extension</a>, a handy Chrome plugin that will automatically open a DevTools tab every time you <code>--inspect</code> a script.</p>\n<p>We recommend using the <code>--inspect-brk</code> flag which will break on the first statement of the script allowing you to go through the source to set breakpoints and start/stop the build as you please. Also, don&#39;t forget that you can still pass arguments to the script. For example, if you have multiple configuration files you could pass <code>--config webpack.prod.js</code> to specify the configuration you&#39;d like to debug.</p>\n',title:"Debugging"},title:"Debugging",url:"/contribute/debugging/"}]},{url:"vote",pages:[]},{url:"organization",pages:[]},{url:"starter-kits",pages:[]},{url:"api/plugins",pages:[]},{url:"development",pages:[]}]}),document.getElementById("src/components/SidebarMobile/SidebarMobile.jsx")),t.render(e.createElement(i,{pages:[{url:"/plugins/",group:"-",title:"Plugins",anchors:[]},{url:"/plugins/aggressive-splitting-plugin/",title:"AggressiveSplittingPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"Examples",id:"examples"}]},{url:"/plugins/zopfli-webpack-plugin/",title:"ZopfliWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Arguments",id:"arguments"},{title:"Option Arguments",id:"option-arguments"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/banner-plugin/",title:"BannerPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"Placeholders",id:"placeholders"}]},{url:"/plugins/closure-webpack-plugin/",title:"ClosureWebpackPlugin",group:"-",anchors:[{title:"Usage example",id:"usage-example"},{title:"Options",id:"options"},{title:"Compiler Flags",id:"compiler-flags"},{title:"Aggressive Bundle Mode",id:"aggressive-bundle-mode"},{title:"Tips for Use",id:"tips-for-use"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/commons-chunk-plugin/",title:"CommonsChunkPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Commons chunk for entries",id:"commons-chunk-for-entries"},{title:"Explicit vendor chunk",id:"explicit-vendor-chunk"},{title:"Move common modules into the parent chunk",id:"move-common-modules-into-the-parent-chunk"},{title:"Extra async commons chunk",id:"extra-async-commons-chunk"},{title:"Passing the minChunks property a function",id:"passing-the-minchunks-property-a-function"},{title:"Manifest file",id:"manifest-file"},{title:"Combining implicit common vendor chunks and manifest file",id:"combining-implicit-common-vendor-chunks-and-manifest-file"},{title:"More Examples",id:"more-examples"}]},{url:"/plugins/component-webpack-plugin/",title:"ComponentWebpackPlugin",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Advanced usage",id:"advanced-usage"},{title:"License",id:"license"}]},{url:"/plugins/compression-webpack-plugin/",title:"CompressionWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"include",id:"include"},{title:"exclude",id:"exclude"},{title:"cache",id:"cache"},{title:"asset",id:"asset"},{title:"filename",id:"filename"},{title:"algorithm",id:"algorithm"},{title:"threshold",id:"threshold"},{title:"minRatio",id:"minratio"},{title:"deleteOriginalAssets",id:"deleteoriginalassets"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/context-replacement-plugin/",title:"ContextReplacementPlugin",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Content Callback",id:"content-callback"},{title:"Other Options",id:"other-options"}]},{url:"/plugins/copy-webpack-plugin/",title:"CopyWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Available options:",id:"available-options-"},{title:"Examples",id:"examples"},{title:"FAQ",id:"faq"},{title:'"EMFILE: too many open files" or "ENFILE: file table overflow"',id:"-emfile-too-many-open-files-or-enfile-file-table-overflow-"},{title:"This doesn't copy my files with webpack-dev-server",id:"this-doesn-t-copy-my-files-with-webpack-dev-server"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/css-webpack-plugin/",title:"CssWebpackPlugin",group:"-",anchors:[]},{url:"/plugins/define-plugin/",title:"DefinePlugin",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Feature Flags",id:"feature-flags"},{title:"Service URLs",id:"service-urls"}]},{url:"/plugins/dll-plugin/",title:"DllPlugin",group:"-",anchors:[{title:"DllPlugin",id:"dllplugin"},{title:"DllReferencePlugin",id:"dllreferenceplugin"},{title:"Modes",id:"modes"},{title:"Scoped Mode",id:"scoped-mode"},{title:"Mapped Mode",id:"mapped-mode"},{title:"Usage",id:"usage"},{title:"Examples",id:"examples"},{title:"References",id:"references"},{title:"Source",id:"source"},{title:"Tests",id:"tests"}]},{url:"/plugins/environment-plugin/",title:"EnvironmentPlugin",group:"-",anchors:[{title:"Usage",id:"usage"},{title:"Usage with default values",id:"usage-with-default-values"},{title:"DotenvPlugin",id:"dotenvplugin"}]},{url:"/plugins/extract-text-webpack-plugin/",title:"ExtractTextWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"#extract",id:"-extract"},{title:"Multiple Instances",id:"multiple-instances"},{title:"Extracting Sass or LESS",id:"extracting-sass-or-less"},{title:"url() Resolving",id:"url-resolving"},{title:"Modify filename",id:"modify-filename"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/hashed-module-ids-plugin/",title:"HashedModuleIdsPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"Usage",id:"usage"}]},{url:"/plugins/hot-module-replacement-plugin/",title:"HotModuleReplacementPlugin",group:"-",anchors:[{title:"Basic Usage",id:"basic-usage"},{title:"Options",id:"options"}]},{url:"/plugins/babel-minify-webpack-plugin/",title:"BabelMinifyWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"pluginOpts",id:"pluginopts"},{title:"Why",id:"why"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/i18n-webpack-plugin/",title:"I18nWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/ignore-plugin/",title:"IgnorePlugin",group:"-",anchors:[{title:"Ignore Moment Locales",id:"ignore-moment-locales"}]},{url:"/plugins/limit-chunk-count-plugin/",title:"LimitChunkCountPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"CLI",id:"cli"}]},{url:"/plugins/loader-options-plugin/",title:"LoaderOptionsPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"Usage",id:"usage"}]},{url:"/plugins/min-chunk-size-plugin/",title:"MinChunkSizePlugin",group:"-",anchors:[]},{url:"/plugins/module-concatenation-plugin/",title:"ModuleConcatenationPlugin",group:"-",anchors:[{title:"Optimization Bailouts",id:"optimization-bailouts"},{title:"Module Grouping Algorithm",id:"module-grouping-algorithm"},{title:"Debugging Optimization Bailouts",id:"debugging-optimization-bailouts"}]},{url:"/plugins/named-modules-plugin/",title:"NamedModulesPlugin",group:"-",anchors:[]},{url:"/plugins/no-emit-on-errors-plugin/",title:"NoEmitOnErrorsPlugin",group:"-",anchors:[]},{url:"/plugins/normal-module-replacement-plugin/",title:"NormalModuleReplacementPlugin",group:"-",anchors:[{title:"Basic Example",id:"basic-example"},{title:"Advanced Example",id:"advanced-example"}]},{url:"/plugins/npm-install-webpack-plugin/",title:"NpmInstallWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Demo",id:"demo"},{title:"Features",id:"features"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/prefetch-plugin/",title:"PrefetchPlugin",group:"-",anchors:[{title:"Options",id:"options"}]},{url:"/plugins/provide-plugin/",title:"ProvidePlugin",group:"-",anchors:[{title:"Usage: jQuery",id:"usage-jquery"},{title:"Usage: jQuery with Angular 1",id:"usage-jquery-with-angular-1"},{title:"Usage: Lodash Map",id:"usage-lodash-map"},{title:"Usage: Vue.js",id:"usage-vue-js"}]},{url:"/plugins/source-map-dev-tool-plugin/",title:"SourceMapDevToolPlugin",group:"-",anchors:[{title:"Options",id:"options"},{title:"Examples",id:"examples"},{title:"Exclude Vendor Maps",id:"exclude-vendor-maps"},{title:"Host Source Maps Externally",id:"host-source-maps-externally"}]},{url:"/plugins/uglifyjs-webpack-plugin/",title:"UglifyjsWebpackPlugin",group:"-",anchors:[{title:"Install",id:"install"},{title:"Usage",id:"usage"},{title:"Options",id:"options"},{title:"include",id:"include"},{title:"exclude",id:"exclude"},{title:"cache",id:"cache"},{title:"{Boolean}",id:"-boolean-"},{title:"{String}",id:"-string-"},{title:"parallel",id:"parallel"},{title:"{Boolean}",id:"-boolean-"},{title:"{Number}",id:"-number-"},{title:"sourceMap",id:"sourcemap"},{title:"uglifyOptions",id:"uglifyoptions"},{title:"extractComments",id:"extractcomments"},{title:"{Boolean}",id:"-boolean-"},{title:"{RegExp|String} or  {Function {Boolean}>}",id:"-regexp-string-or-function-boolean-"},{title:"{Object}",id:"-object-"},{title:"warningsFilter",id:"warningsfilter"},{title:"Maintainers",id:"maintainers"}]},{url:"/plugins/watch-ignore-plugin/",title:"WatchIgnorePlugin",group:"-",anchors:[{title:"Options",id:"options"}]},{url:"/plugins/html-webpack-plugin/",title:"HtmlWebpackPlugin",group:"-",anchors:[{title:"Installation",id:"installation"},{title:"Basic Usage",id:"basic-usage"},{title:"Configuration",id:"configuration"},{title:"Third party addons",id:"third-party-addons"}]}],currentPage:"/plugins/hot-module-replacement-plugin/"}),document.getElementById("src/components/Sidebar/Sidebar.jsx")),t.render(e.createElement(l,{}),document.getElementById("src/components/Gitter/Gitter.jsx"))}])});